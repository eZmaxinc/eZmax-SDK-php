<?php
/**
 * UserRequestCompound
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * UserRequestCompound Class Doc Comment
 *
 * @category Class
 * @description A User Object and children
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserRequestCompound implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'user-RequestCompound';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pkiUserID' => 'int',
        'fkiAgentID' => 'int',
        'fkiBrokerID' => 'int',
        'fkiAssistantID' => 'int',
        'fkiEmployeeID' => 'int',
        'fkiCompanyIDDefault' => 'int',
        'fkiDepartmentIDDefault' => 'int',
        'fkiTimezoneID' => 'int',
        'fkiLanguageID' => 'int',
        'objEmail' => '\eZmaxAPI\Model\EmailRequestCompound',
        'fkiBillingentityinternalID' => 'int',
        'objPhoneHome' => '\eZmaxAPI\Model\PhoneRequestCompound',
        'objPhoneSMS' => '\eZmaxAPI\Model\PhoneRequestCompound',
        'fkiSecretquestionID' => 'int',
        'sUserSecretresponse' => 'string',
        'fkiModuleIDForm' => 'int',
        'eUserType' => '\eZmaxAPI\Model\FieldEUserType',
        'eUserLogintype' => '\eZmaxAPI\Model\FieldEUserLogintype',
        'sUserFirstname' => 'string',
        'sUserLastname' => 'string',
        'sUserLoginname' => 'string',
        'eUserEzsignaccess' => '\eZmaxAPI\Model\FieldEUserEzsignaccess',
        'bUserIsactive' => 'bool',
        'bUserValidatebyadministration' => 'bool',
        'bUserValidatebydirector' => 'bool',
        'bUserAttachmentautoverified' => 'bool',
        'bUserChangepassword' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pkiUserID' => null,
        'fkiAgentID' => null,
        'fkiBrokerID' => null,
        'fkiAssistantID' => null,
        'fkiEmployeeID' => null,
        'fkiCompanyIDDefault' => null,
        'fkiDepartmentIDDefault' => null,
        'fkiTimezoneID' => null,
        'fkiLanguageID' => null,
        'objEmail' => null,
        'fkiBillingentityinternalID' => null,
        'objPhoneHome' => null,
        'objPhoneSMS' => null,
        'fkiSecretquestionID' => null,
        'sUserSecretresponse' => null,
        'fkiModuleIDForm' => null,
        'eUserType' => null,
        'eUserLogintype' => null,
        'sUserFirstname' => null,
        'sUserLastname' => null,
        'sUserLoginname' => null,
        'eUserEzsignaccess' => null,
        'bUserIsactive' => null,
        'bUserValidatebyadministration' => null,
        'bUserValidatebydirector' => null,
        'bUserAttachmentautoverified' => null,
        'bUserChangepassword' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pkiUserID' => false,
		'fkiAgentID' => false,
		'fkiBrokerID' => false,
		'fkiAssistantID' => false,
		'fkiEmployeeID' => false,
		'fkiCompanyIDDefault' => false,
		'fkiDepartmentIDDefault' => false,
		'fkiTimezoneID' => false,
		'fkiLanguageID' => false,
		'objEmail' => false,
		'fkiBillingentityinternalID' => false,
		'objPhoneHome' => false,
		'objPhoneSMS' => false,
		'fkiSecretquestionID' => false,
		'sUserSecretresponse' => false,
		'fkiModuleIDForm' => false,
		'eUserType' => false,
		'eUserLogintype' => false,
		'sUserFirstname' => false,
		'sUserLastname' => false,
		'sUserLoginname' => false,
		'eUserEzsignaccess' => false,
		'bUserIsactive' => false,
		'bUserValidatebyadministration' => false,
		'bUserValidatebydirector' => false,
		'bUserAttachmentautoverified' => false,
		'bUserChangepassword' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pkiUserID' => 'pkiUserID',
        'fkiAgentID' => 'fkiAgentID',
        'fkiBrokerID' => 'fkiBrokerID',
        'fkiAssistantID' => 'fkiAssistantID',
        'fkiEmployeeID' => 'fkiEmployeeID',
        'fkiCompanyIDDefault' => 'fkiCompanyIDDefault',
        'fkiDepartmentIDDefault' => 'fkiDepartmentIDDefault',
        'fkiTimezoneID' => 'fkiTimezoneID',
        'fkiLanguageID' => 'fkiLanguageID',
        'objEmail' => 'objEmail',
        'fkiBillingentityinternalID' => 'fkiBillingentityinternalID',
        'objPhoneHome' => 'objPhoneHome',
        'objPhoneSMS' => 'objPhoneSMS',
        'fkiSecretquestionID' => 'fkiSecretquestionID',
        'sUserSecretresponse' => 'sUserSecretresponse',
        'fkiModuleIDForm' => 'fkiModuleIDForm',
        'eUserType' => 'eUserType',
        'eUserLogintype' => 'eUserLogintype',
        'sUserFirstname' => 'sUserFirstname',
        'sUserLastname' => 'sUserLastname',
        'sUserLoginname' => 'sUserLoginname',
        'eUserEzsignaccess' => 'eUserEzsignaccess',
        'bUserIsactive' => 'bUserIsactive',
        'bUserValidatebyadministration' => 'bUserValidatebyadministration',
        'bUserValidatebydirector' => 'bUserValidatebydirector',
        'bUserAttachmentautoverified' => 'bUserAttachmentautoverified',
        'bUserChangepassword' => 'bUserChangepassword'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pkiUserID' => 'setPkiUserID',
        'fkiAgentID' => 'setFkiAgentID',
        'fkiBrokerID' => 'setFkiBrokerID',
        'fkiAssistantID' => 'setFkiAssistantID',
        'fkiEmployeeID' => 'setFkiEmployeeID',
        'fkiCompanyIDDefault' => 'setFkiCompanyIDDefault',
        'fkiDepartmentIDDefault' => 'setFkiDepartmentIDDefault',
        'fkiTimezoneID' => 'setFkiTimezoneID',
        'fkiLanguageID' => 'setFkiLanguageID',
        'objEmail' => 'setObjEmail',
        'fkiBillingentityinternalID' => 'setFkiBillingentityinternalID',
        'objPhoneHome' => 'setObjPhoneHome',
        'objPhoneSMS' => 'setObjPhoneSMS',
        'fkiSecretquestionID' => 'setFkiSecretquestionID',
        'sUserSecretresponse' => 'setSUserSecretresponse',
        'fkiModuleIDForm' => 'setFkiModuleIDForm',
        'eUserType' => 'setEUserType',
        'eUserLogintype' => 'setEUserLogintype',
        'sUserFirstname' => 'setSUserFirstname',
        'sUserLastname' => 'setSUserLastname',
        'sUserLoginname' => 'setSUserLoginname',
        'eUserEzsignaccess' => 'setEUserEzsignaccess',
        'bUserIsactive' => 'setBUserIsactive',
        'bUserValidatebyadministration' => 'setBUserValidatebyadministration',
        'bUserValidatebydirector' => 'setBUserValidatebydirector',
        'bUserAttachmentautoverified' => 'setBUserAttachmentautoverified',
        'bUserChangepassword' => 'setBUserChangepassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pkiUserID' => 'getPkiUserID',
        'fkiAgentID' => 'getFkiAgentID',
        'fkiBrokerID' => 'getFkiBrokerID',
        'fkiAssistantID' => 'getFkiAssistantID',
        'fkiEmployeeID' => 'getFkiEmployeeID',
        'fkiCompanyIDDefault' => 'getFkiCompanyIDDefault',
        'fkiDepartmentIDDefault' => 'getFkiDepartmentIDDefault',
        'fkiTimezoneID' => 'getFkiTimezoneID',
        'fkiLanguageID' => 'getFkiLanguageID',
        'objEmail' => 'getObjEmail',
        'fkiBillingentityinternalID' => 'getFkiBillingentityinternalID',
        'objPhoneHome' => 'getObjPhoneHome',
        'objPhoneSMS' => 'getObjPhoneSMS',
        'fkiSecretquestionID' => 'getFkiSecretquestionID',
        'sUserSecretresponse' => 'getSUserSecretresponse',
        'fkiModuleIDForm' => 'getFkiModuleIDForm',
        'eUserType' => 'getEUserType',
        'eUserLogintype' => 'getEUserLogintype',
        'sUserFirstname' => 'getSUserFirstname',
        'sUserLastname' => 'getSUserLastname',
        'sUserLoginname' => 'getSUserLoginname',
        'eUserEzsignaccess' => 'getEUserEzsignaccess',
        'bUserIsactive' => 'getBUserIsactive',
        'bUserValidatebyadministration' => 'getBUserValidatebyadministration',
        'bUserValidatebydirector' => 'getBUserValidatebydirector',
        'bUserAttachmentautoverified' => 'getBUserAttachmentautoverified',
        'bUserChangepassword' => 'getBUserChangepassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pkiUserID', $data ?? [], null);
        $this->setIfExists('fkiAgentID', $data ?? [], null);
        $this->setIfExists('fkiBrokerID', $data ?? [], null);
        $this->setIfExists('fkiAssistantID', $data ?? [], null);
        $this->setIfExists('fkiEmployeeID', $data ?? [], null);
        $this->setIfExists('fkiCompanyIDDefault', $data ?? [], null);
        $this->setIfExists('fkiDepartmentIDDefault', $data ?? [], null);
        $this->setIfExists('fkiTimezoneID', $data ?? [], null);
        $this->setIfExists('fkiLanguageID', $data ?? [], null);
        $this->setIfExists('objEmail', $data ?? [], null);
        $this->setIfExists('fkiBillingentityinternalID', $data ?? [], null);
        $this->setIfExists('objPhoneHome', $data ?? [], null);
        $this->setIfExists('objPhoneSMS', $data ?? [], null);
        $this->setIfExists('fkiSecretquestionID', $data ?? [], null);
        $this->setIfExists('sUserSecretresponse', $data ?? [], null);
        $this->setIfExists('fkiModuleIDForm', $data ?? [], null);
        $this->setIfExists('eUserType', $data ?? [], null);
        $this->setIfExists('eUserLogintype', $data ?? [], null);
        $this->setIfExists('sUserFirstname', $data ?? [], null);
        $this->setIfExists('sUserLastname', $data ?? [], null);
        $this->setIfExists('sUserLoginname', $data ?? [], null);
        $this->setIfExists('eUserEzsignaccess', $data ?? [], null);
        $this->setIfExists('bUserIsactive', $data ?? [], null);
        $this->setIfExists('bUserValidatebyadministration', $data ?? [], null);
        $this->setIfExists('bUserValidatebydirector', $data ?? [], null);
        $this->setIfExists('bUserAttachmentautoverified', $data ?? [], null);
        $this->setIfExists('bUserChangepassword', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['pkiUserID']) && ($this->container['pkiUserID'] < 0)) {
            $invalidProperties[] = "invalid value for 'pkiUserID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiAgentID']) && ($this->container['fkiAgentID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiAgentID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiBrokerID']) && ($this->container['fkiBrokerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiBrokerID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiAssistantID']) && ($this->container['fkiAssistantID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiAssistantID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEmployeeID']) && ($this->container['fkiEmployeeID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEmployeeID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiCompanyIDDefault'] === null) {
            $invalidProperties[] = "'fkiCompanyIDDefault' can't be null";
        }
        if (($this->container['fkiCompanyIDDefault'] > 255)) {
            $invalidProperties[] = "invalid value for 'fkiCompanyIDDefault', must be smaller than or equal to 255.";
        }

        if (($this->container['fkiCompanyIDDefault'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiCompanyIDDefault', must be bigger than or equal to 1.";
        }

        if ($this->container['fkiDepartmentIDDefault'] === null) {
            $invalidProperties[] = "'fkiDepartmentIDDefault' can't be null";
        }
        if (($this->container['fkiDepartmentIDDefault'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiDepartmentIDDefault', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiTimezoneID'] === null) {
            $invalidProperties[] = "'fkiTimezoneID' can't be null";
        }
        if (($this->container['fkiTimezoneID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiTimezoneID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiLanguageID'] === null) {
            $invalidProperties[] = "'fkiLanguageID' can't be null";
        }
        if (($this->container['fkiLanguageID'] > 2)) {
            $invalidProperties[] = "invalid value for 'fkiLanguageID', must be smaller than or equal to 2.";
        }

        if (($this->container['fkiLanguageID'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiLanguageID', must be bigger than or equal to 1.";
        }

        if ($this->container['objEmail'] === null) {
            $invalidProperties[] = "'objEmail' can't be null";
        }
        if ($this->container['fkiBillingentityinternalID'] === null) {
            $invalidProperties[] = "'fkiBillingentityinternalID' can't be null";
        }
        if (($this->container['fkiBillingentityinternalID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiBillingentityinternalID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiSecretquestionID']) && ($this->container['fkiSecretquestionID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiSecretquestionID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiModuleIDForm']) && ($this->container['fkiModuleIDForm'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiModuleIDForm', must be bigger than or equal to 0.";
        }

        if ($this->container['eUserType'] === null) {
            $invalidProperties[] = "'eUserType' can't be null";
        }
        if ($this->container['eUserLogintype'] === null) {
            $invalidProperties[] = "'eUserLogintype' can't be null";
        }
        if ($this->container['sUserFirstname'] === null) {
            $invalidProperties[] = "'sUserFirstname' can't be null";
        }
        if ($this->container['sUserLastname'] === null) {
            $invalidProperties[] = "'sUserLastname' can't be null";
        }
        if ($this->container['sUserLoginname'] === null) {
            $invalidProperties[] = "'sUserLoginname' can't be null";
        }
//        if (!preg_match("/^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4})|([a-zA-Z0-9]){1,32})$/", $this->container['sUserLoginname'])) {
        if (!is_null($this->container['sUserLoginname']) && !preg_match("/^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4})|([a-zA-Z0-9]){1,32})$/", $this->container['sUserLoginname'])) {
            $invalidProperties[] = "invalid value for 'sUserLoginname', must be conform to the pattern /^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4})|([a-zA-Z0-9]){1,32})$/.";
        }

        if ($this->container['eUserEzsignaccess'] === null) {
            $invalidProperties[] = "'eUserEzsignaccess' can't be null";
        }
        if ($this->container['bUserIsactive'] === null) {
            $invalidProperties[] = "'bUserIsactive' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pkiUserID
     *
     * @return int|null
     */
    public function getPkiUserID()
    {
        return $this->container['pkiUserID'];
    }

    /**
     * Sets pkiUserID
     *
     * @param int|null $pkiUserID The unique ID of the User
     *
     * @return self
     */
    public function setPkiUserID($pkiUserID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($pkiUserID)) {
            //throw new \InvalidArgumentException('non-nullable pkiUserID cannot be null');
        //}

//        if (($pkiUserID < 0)) {
        if (!is_null($pkiUserID) && ($pkiUserID < 0)) {
            throw new \InvalidArgumentException('invalid value for $pkiUserID when calling UserRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['pkiUserID'] = $pkiUserID;
        $this->container['pkiUserID'] = (is_null($pkiUserID) ? null : (int) $pkiUserID);

        return $this;
    }

    /**
     * Gets fkiAgentID
     *
     * @return int|null
     */
    public function getFkiAgentID()
    {
        return $this->container['fkiAgentID'];
    }

    /**
     * Sets fkiAgentID
     *
     * @param int|null $fkiAgentID The unique ID of the Agent.
     *
     * @return self
     */
    public function setFkiAgentID($fkiAgentID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiAgentID)) {
            //throw new \InvalidArgumentException('non-nullable fkiAgentID cannot be null');
        //}

//        if (($fkiAgentID < 0)) {
        if (!is_null($fkiAgentID) && ($fkiAgentID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiAgentID when calling UserRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiAgentID'] = $fkiAgentID;
        $this->container['fkiAgentID'] = (is_null($fkiAgentID) ? null : (int) $fkiAgentID);

        return $this;
    }

    /**
     * Gets fkiBrokerID
     *
     * @return int|null
     */
    public function getFkiBrokerID()
    {
        return $this->container['fkiBrokerID'];
    }

    /**
     * Sets fkiBrokerID
     *
     * @param int|null $fkiBrokerID The unique ID of the Broker.
     *
     * @return self
     */
    public function setFkiBrokerID($fkiBrokerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiBrokerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiBrokerID cannot be null');
        //}

//        if (($fkiBrokerID < 0)) {
        if (!is_null($fkiBrokerID) && ($fkiBrokerID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiBrokerID when calling UserRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiBrokerID'] = $fkiBrokerID;
        $this->container['fkiBrokerID'] = (is_null($fkiBrokerID) ? null : (int) $fkiBrokerID);

        return $this;
    }

    /**
     * Gets fkiAssistantID
     *
     * @return int|null
     */
    public function getFkiAssistantID()
    {
        return $this->container['fkiAssistantID'];
    }

    /**
     * Sets fkiAssistantID
     *
     * @param int|null $fkiAssistantID The unique ID of the Assistant.
     *
     * @return self
     */
    public function setFkiAssistantID($fkiAssistantID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiAssistantID)) {
            //throw new \InvalidArgumentException('non-nullable fkiAssistantID cannot be null');
        //}

//        if (($fkiAssistantID < 0)) {
        if (!is_null($fkiAssistantID) && ($fkiAssistantID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiAssistantID when calling UserRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiAssistantID'] = $fkiAssistantID;
        $this->container['fkiAssistantID'] = (is_null($fkiAssistantID) ? null : (int) $fkiAssistantID);

        return $this;
    }

    /**
     * Gets fkiEmployeeID
     *
     * @return int|null
     */
    public function getFkiEmployeeID()
    {
        return $this->container['fkiEmployeeID'];
    }

    /**
     * Sets fkiEmployeeID
     *
     * @param int|null $fkiEmployeeID The unique ID of the Employee.
     *
     * @return self
     */
    public function setFkiEmployeeID($fkiEmployeeID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEmployeeID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEmployeeID cannot be null');
        //}

//        if (($fkiEmployeeID < 0)) {
        if (!is_null($fkiEmployeeID) && ($fkiEmployeeID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiEmployeeID when calling UserRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEmployeeID'] = $fkiEmployeeID;
        $this->container['fkiEmployeeID'] = (is_null($fkiEmployeeID) ? null : (int) $fkiEmployeeID);

        return $this;
    }

    /**
     * Gets fkiCompanyIDDefault
     *
     * @return int
     */
    public function getFkiCompanyIDDefault()
    {
        return $this->container['fkiCompanyIDDefault'];
    }

    /**
     * Sets fkiCompanyIDDefault
     *
     * @param int $fkiCompanyIDDefault The unique ID of the Company
     *
     * @return self
     */
    public function setFkiCompanyIDDefault($fkiCompanyIDDefault)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiCompanyIDDefault)) {
            //throw new \InvalidArgumentException('non-nullable fkiCompanyIDDefault cannot be null');
        //}

//        if (($fkiCompanyIDDefault > 255)) {
        if (($fkiCompanyIDDefault > 255)) {
            throw new \InvalidArgumentException('invalid value for $fkiCompanyIDDefault when calling UserRequestCompound., must be smaller than or equal to 255.');
        }
//        if (($fkiCompanyIDDefault < 1)) {
        if (($fkiCompanyIDDefault < 1)) {
            throw new \InvalidArgumentException('invalid value for $fkiCompanyIDDefault when calling UserRequestCompound., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiCompanyIDDefault'] = $fkiCompanyIDDefault;
        $this->container['fkiCompanyIDDefault'] = (is_null($fkiCompanyIDDefault) ? null : (int) $fkiCompanyIDDefault);

        return $this;
    }

    /**
     * Gets fkiDepartmentIDDefault
     *
     * @return int
     */
    public function getFkiDepartmentIDDefault()
    {
        return $this->container['fkiDepartmentIDDefault'];
    }

    /**
     * Sets fkiDepartmentIDDefault
     *
     * @param int $fkiDepartmentIDDefault The unique ID of the Department
     *
     * @return self
     */
    public function setFkiDepartmentIDDefault($fkiDepartmentIDDefault)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiDepartmentIDDefault)) {
            //throw new \InvalidArgumentException('non-nullable fkiDepartmentIDDefault cannot be null');
        //}

//        if (($fkiDepartmentIDDefault < 0)) {
        if (($fkiDepartmentIDDefault < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiDepartmentIDDefault when calling UserRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiDepartmentIDDefault'] = $fkiDepartmentIDDefault;
        $this->container['fkiDepartmentIDDefault'] = (is_null($fkiDepartmentIDDefault) ? null : (int) $fkiDepartmentIDDefault);

        return $this;
    }

    /**
     * Gets fkiTimezoneID
     *
     * @return int
     */
    public function getFkiTimezoneID()
    {
        return $this->container['fkiTimezoneID'];
    }

    /**
     * Sets fkiTimezoneID
     *
     * @param int $fkiTimezoneID The unique ID of the Timezone
     *
     * @return self
     */
    public function setFkiTimezoneID($fkiTimezoneID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiTimezoneID)) {
            //throw new \InvalidArgumentException('non-nullable fkiTimezoneID cannot be null');
        //}

//        if (($fkiTimezoneID < 0)) {
        if (($fkiTimezoneID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiTimezoneID when calling UserRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiTimezoneID'] = $fkiTimezoneID;
        $this->container['fkiTimezoneID'] = (is_null($fkiTimezoneID) ? null : (int) $fkiTimezoneID);

        return $this;
    }

    /**
     * Gets fkiLanguageID
     *
     * @return int
     */
    public function getFkiLanguageID()
    {
        return $this->container['fkiLanguageID'];
    }

    /**
     * Sets fkiLanguageID
     *
     * @param int $fkiLanguageID The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
     *
     * @return self
     */
    public function setFkiLanguageID($fkiLanguageID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiLanguageID)) {
            //throw new \InvalidArgumentException('non-nullable fkiLanguageID cannot be null');
        //}

//        if (($fkiLanguageID > 2)) {
        if (($fkiLanguageID > 2)) {
            throw new \InvalidArgumentException('invalid value for $fkiLanguageID when calling UserRequestCompound., must be smaller than or equal to 2.');
        }
//        if (($fkiLanguageID < 1)) {
        if (($fkiLanguageID < 1)) {
            throw new \InvalidArgumentException('invalid value for $fkiLanguageID when calling UserRequestCompound., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiLanguageID'] = $fkiLanguageID;
        $this->container['fkiLanguageID'] = (is_null($fkiLanguageID) ? null : (int) $fkiLanguageID);

        return $this;
    }

    /**
     * Gets objEmail
     *
     * @return \eZmaxAPI\Model\EmailRequestCompound
     */
    public function getObjEmail()
    {
        return $this->container['objEmail'];
    }

    /**
     * Sets objEmail
     *
     * @param \eZmaxAPI\Model\EmailRequestCompound $objEmail objEmail
     *
     * @return self
     */
    public function setObjEmail($objEmail)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($objEmail)) {
            //throw new \InvalidArgumentException('non-nullable objEmail cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['objEmail'] = $objEmail;
        $this->container['objEmail'] = $objEmail;

        return $this;
    }

    /**
     * Gets fkiBillingentityinternalID
     *
     * @return int
     */
    public function getFkiBillingentityinternalID()
    {
        return $this->container['fkiBillingentityinternalID'];
    }

    /**
     * Sets fkiBillingentityinternalID
     *
     * @param int $fkiBillingentityinternalID The unique ID of the Billingentityinternal.
     *
     * @return self
     */
    public function setFkiBillingentityinternalID($fkiBillingentityinternalID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiBillingentityinternalID)) {
            //throw new \InvalidArgumentException('non-nullable fkiBillingentityinternalID cannot be null');
        //}

//        if (($fkiBillingentityinternalID < 0)) {
        if (($fkiBillingentityinternalID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiBillingentityinternalID when calling UserRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiBillingentityinternalID'] = $fkiBillingentityinternalID;
        $this->container['fkiBillingentityinternalID'] = (is_null($fkiBillingentityinternalID) ? null : (int) $fkiBillingentityinternalID);

        return $this;
    }

    /**
     * Gets objPhoneHome
     *
     * @return \eZmaxAPI\Model\PhoneRequestCompound|null
     */
    public function getObjPhoneHome()
    {
        return $this->container['objPhoneHome'];
    }

    /**
     * Sets objPhoneHome
     *
     * @param \eZmaxAPI\Model\PhoneRequestCompound|null $objPhoneHome objPhoneHome
     *
     * @return self
     */
    public function setObjPhoneHome($objPhoneHome)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($objPhoneHome)) {
            //throw new \InvalidArgumentException('non-nullable objPhoneHome cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['objPhoneHome'] = $objPhoneHome;
        $this->container['objPhoneHome'] = $objPhoneHome;

        return $this;
    }

    /**
     * Gets objPhoneSMS
     *
     * @return \eZmaxAPI\Model\PhoneRequestCompound|null
     */
    public function getObjPhoneSMS()
    {
        return $this->container['objPhoneSMS'];
    }

    /**
     * Sets objPhoneSMS
     *
     * @param \eZmaxAPI\Model\PhoneRequestCompound|null $objPhoneSMS objPhoneSMS
     *
     * @return self
     */
    public function setObjPhoneSMS($objPhoneSMS)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($objPhoneSMS)) {
            //throw new \InvalidArgumentException('non-nullable objPhoneSMS cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['objPhoneSMS'] = $objPhoneSMS;
        $this->container['objPhoneSMS'] = $objPhoneSMS;

        return $this;
    }

    /**
     * Gets fkiSecretquestionID
     *
     * @return int|null
     */
    public function getFkiSecretquestionID()
    {
        return $this->container['fkiSecretquestionID'];
    }

    /**
     * Sets fkiSecretquestionID
     *
     * @param int|null $fkiSecretquestionID The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father's middle name| |15|Your mother's maiden name| |16|Name of your eldest child| |17|Your spouse's middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat's name| |22|Date of Birth (YYYY-MM-DD)|
     *
     * @return self
     */
    public function setFkiSecretquestionID($fkiSecretquestionID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiSecretquestionID)) {
            //throw new \InvalidArgumentException('non-nullable fkiSecretquestionID cannot be null');
        //}

//        if (($fkiSecretquestionID < 0)) {
        if (!is_null($fkiSecretquestionID) && ($fkiSecretquestionID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiSecretquestionID when calling UserRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiSecretquestionID'] = $fkiSecretquestionID;
        $this->container['fkiSecretquestionID'] = (is_null($fkiSecretquestionID) ? null : (int) $fkiSecretquestionID);

        return $this;
    }

    /**
     * Gets sUserSecretresponse
     *
     * @return string|null
     */
    public function getSUserSecretresponse()
    {
        return $this->container['sUserSecretresponse'];
    }

    /**
     * Sets sUserSecretresponse
     *
     * @param string|null $sUserSecretresponse The answer to the Secretquestion
     *
     * @return self
     */
    public function setSUserSecretresponse($sUserSecretresponse)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sUserSecretresponse)) {
            //throw new \InvalidArgumentException('non-nullable sUserSecretresponse cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sUserSecretresponse'] = $sUserSecretresponse;
        $this->container['sUserSecretresponse'] = (is_null($sUserSecretresponse) ? null : (string) $sUserSecretresponse);

        return $this;
    }

    /**
     * Gets fkiModuleIDForm
     *
     * @return int|null
     */
    public function getFkiModuleIDForm()
    {
        return $this->container['fkiModuleIDForm'];
    }

    /**
     * Sets fkiModuleIDForm
     *
     * @param int|null $fkiModuleIDForm The unique ID of the Module
     *
     * @return self
     */
    public function setFkiModuleIDForm($fkiModuleIDForm)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiModuleIDForm)) {
            //throw new \InvalidArgumentException('non-nullable fkiModuleIDForm cannot be null');
        //}

//        if (($fkiModuleIDForm < 0)) {
        if (!is_null($fkiModuleIDForm) && ($fkiModuleIDForm < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiModuleIDForm when calling UserRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiModuleIDForm'] = $fkiModuleIDForm;
        $this->container['fkiModuleIDForm'] = (is_null($fkiModuleIDForm) ? null : (int) $fkiModuleIDForm);

        return $this;
    }

    /**
     * Gets eUserType
     *
     * @return \eZmaxAPI\Model\FieldEUserType
     */
    public function getEUserType()
    {
        return $this->container['eUserType'];
    }

    /**
     * Sets eUserType
     *
     * @param \eZmaxAPI\Model\FieldEUserType $eUserType eUserType
     *
     * @return self
     */
    public function setEUserType($eUserType)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eUserType)) {
            //throw new \InvalidArgumentException('non-nullable eUserType cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eUserType'] = $eUserType;
        $this->container['eUserType'] = $eUserType;

        return $this;
    }

    /**
     * Gets eUserLogintype
     *
     * @return \eZmaxAPI\Model\FieldEUserLogintype
     */
    public function getEUserLogintype()
    {
        return $this->container['eUserLogintype'];
    }

    /**
     * Sets eUserLogintype
     *
     * @param \eZmaxAPI\Model\FieldEUserLogintype $eUserLogintype eUserLogintype
     *
     * @return self
     */
    public function setEUserLogintype($eUserLogintype)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eUserLogintype)) {
            //throw new \InvalidArgumentException('non-nullable eUserLogintype cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eUserLogintype'] = $eUserLogintype;
        $this->container['eUserLogintype'] = $eUserLogintype;

        return $this;
    }

    /**
     * Gets sUserFirstname
     *
     * @return string
     */
    public function getSUserFirstname()
    {
        return $this->container['sUserFirstname'];
    }

    /**
     * Sets sUserFirstname
     *
     * @param string $sUserFirstname The first name of the user
     *
     * @return self
     */
    public function setSUserFirstname($sUserFirstname)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sUserFirstname)) {
            //throw new \InvalidArgumentException('non-nullable sUserFirstname cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sUserFirstname'] = $sUserFirstname;
        $this->container['sUserFirstname'] = (is_null($sUserFirstname) ? null : (string) $sUserFirstname);

        return $this;
    }

    /**
     * Gets sUserLastname
     *
     * @return string
     */
    public function getSUserLastname()
    {
        return $this->container['sUserLastname'];
    }

    /**
     * Sets sUserLastname
     *
     * @param string $sUserLastname The last name of the user
     *
     * @return self
     */
    public function setSUserLastname($sUserLastname)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sUserLastname)) {
            //throw new \InvalidArgumentException('non-nullable sUserLastname cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sUserLastname'] = $sUserLastname;
        $this->container['sUserLastname'] = (is_null($sUserLastname) ? null : (string) $sUserLastname);

        return $this;
    }

    /**
     * Gets sUserLoginname
     *
     * @return string
     */
    public function getSUserLoginname()
    {
        return $this->container['sUserLoginname'];
    }

    /**
     * Sets sUserLoginname
     *
     * @param string $sUserLoginname The login name of the User.
     *
     * @return self
     */
    public function setSUserLoginname($sUserLoginname)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sUserLoginname)) {
            //throw new \InvalidArgumentException('non-nullable sUserLoginname cannot be null');
        //}

//        if ((!preg_match("/^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4})|([a-zA-Z0-9]){1,32})$/", $sUserLoginname))) {
        if (!is_null($sUserLoginname) && (!preg_match("/^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4})|([a-zA-Z0-9]){1,32})$/", $sUserLoginname))) {
            throw new \InvalidArgumentException("invalid value for \$sUserLoginname when calling UserRequestCompound., must conform to the pattern /^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4})|([a-zA-Z0-9]){1,32})$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sUserLoginname'] = $sUserLoginname;
        $this->container['sUserLoginname'] = (is_null($sUserLoginname) ? null : (string) $sUserLoginname);

        return $this;
    }

    /**
     * Gets eUserEzsignaccess
     *
     * @return \eZmaxAPI\Model\FieldEUserEzsignaccess
     */
    public function getEUserEzsignaccess()
    {
        return $this->container['eUserEzsignaccess'];
    }

    /**
     * Sets eUserEzsignaccess
     *
     * @param \eZmaxAPI\Model\FieldEUserEzsignaccess $eUserEzsignaccess eUserEzsignaccess
     *
     * @return self
     */
    public function setEUserEzsignaccess($eUserEzsignaccess)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eUserEzsignaccess)) {
            //throw new \InvalidArgumentException('non-nullable eUserEzsignaccess cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eUserEzsignaccess'] = $eUserEzsignaccess;
        $this->container['eUserEzsignaccess'] = $eUserEzsignaccess;

        return $this;
    }

    /**
     * Gets bUserIsactive
     *
     * @return bool
     */
    public function getBUserIsactive()
    {
        return $this->container['bUserIsactive'];
    }

    /**
     * Sets bUserIsactive
     *
     * @param bool $bUserIsactive Whether the User is active or not
     *
     * @return self
     */
    public function setBUserIsactive($bUserIsactive)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bUserIsactive)) {
            //throw new \InvalidArgumentException('non-nullable bUserIsactive cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bUserIsactive'] = $bUserIsactive;
        $this->container['bUserIsactive'] = (is_null($bUserIsactive) ? null : (bool) $bUserIsactive);

        return $this;
    }

    /**
     * Gets bUserValidatebyadministration
     *
     * @return bool|null
     */
    public function getBUserValidatebyadministration()
    {
        return $this->container['bUserValidatebyadministration'];
    }

    /**
     * Sets bUserValidatebyadministration
     *
     * @param bool|null $bUserValidatebyadministration Whether if the transactions in which the User is implicated must be validated by administrative personnel or not
     *
     * @return self
     */
    public function setBUserValidatebyadministration($bUserValidatebyadministration)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bUserValidatebyadministration)) {
            //throw new \InvalidArgumentException('non-nullable bUserValidatebyadministration cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bUserValidatebyadministration'] = $bUserValidatebyadministration;
        $this->container['bUserValidatebyadministration'] = (is_null($bUserValidatebyadministration) ? null : (bool) $bUserValidatebyadministration);

        return $this;
    }

    /**
     * Gets bUserValidatebydirector
     *
     * @return bool|null
     */
    public function getBUserValidatebydirector()
    {
        return $this->container['bUserValidatebydirector'];
    }

    /**
     * Sets bUserValidatebydirector
     *
     * @param bool|null $bUserValidatebydirector Whether if the transactions in which the User is implicated must be validated by a director or not
     *
     * @return self
     */
    public function setBUserValidatebydirector($bUserValidatebydirector)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bUserValidatebydirector)) {
            //throw new \InvalidArgumentException('non-nullable bUserValidatebydirector cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bUserValidatebydirector'] = $bUserValidatebydirector;
        $this->container['bUserValidatebydirector'] = (is_null($bUserValidatebydirector) ? null : (bool) $bUserValidatebydirector);

        return $this;
    }

    /**
     * Gets bUserAttachmentautoverified
     *
     * @return bool|null
     */
    public function getBUserAttachmentautoverified()
    {
        return $this->container['bUserAttachmentautoverified'];
    }

    /**
     * Sets bUserAttachmentautoverified
     *
     * @param bool|null $bUserAttachmentautoverified Whether if Attachments uploaded by the User must be validated or not
     *
     * @return self
     */
    public function setBUserAttachmentautoverified($bUserAttachmentautoverified)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bUserAttachmentautoverified)) {
            //throw new \InvalidArgumentException('non-nullable bUserAttachmentautoverified cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bUserAttachmentautoverified'] = $bUserAttachmentautoverified;
        $this->container['bUserAttachmentautoverified'] = (is_null($bUserAttachmentautoverified) ? null : (bool) $bUserAttachmentautoverified);

        return $this;
    }

    /**
     * Gets bUserChangepassword
     *
     * @return bool|null
     */
    public function getBUserChangepassword()
    {
        return $this->container['bUserChangepassword'];
    }

    /**
     * Sets bUserChangepassword
     *
     * @param bool|null $bUserChangepassword Whether if the User is forced to change its password
     *
     * @return self
     */
    public function setBUserChangepassword($bUserChangepassword)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bUserChangepassword)) {
            //throw new \InvalidArgumentException('non-nullable bUserChangepassword cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bUserChangepassword'] = $bUserChangepassword;
        $this->container['bUserChangepassword'] = (is_null($bUserChangepassword) ? null : (bool) $bUserChangepassword);

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


