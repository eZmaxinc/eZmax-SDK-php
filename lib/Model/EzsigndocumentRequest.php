<?php
/**
 * EzsigndocumentRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * EzsigndocumentRequest Class Doc Comment
 *
 * @category Class
 * @description An Ezsigndocument Object
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EzsigndocumentRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ezsigndocument-Request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'eEzsigndocumentSource' => 'string',
        'eEzsigndocumentFormat' => 'string',
        'sEzsigndocumentBase64' => 'string',
        'sEzsigndocumentUrl' => 'string',
        'bEzsigndocumentForcerepair' => 'bool',
        'sEzsigndocumentPassword' => 'string',
        'fkiEzsignfolderID' => 'int',
        'dtEzsigndocumentDuedate' => 'string',
        'fkiLanguageID' => 'int',
        'sEzsigndocumentName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'eEzsigndocumentSource' => null,
        'eEzsigndocumentFormat' => null,
        'sEzsigndocumentBase64' => 'byte',
        'sEzsigndocumentUrl' => null,
        'bEzsigndocumentForcerepair' => null,
        'sEzsigndocumentPassword' => null,
        'fkiEzsignfolderID' => null,
        'dtEzsigndocumentDuedate' => null,
        'fkiLanguageID' => null,
        'sEzsigndocumentName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'eEzsigndocumentSource' => 'eEzsigndocumentSource',
        'eEzsigndocumentFormat' => 'eEzsigndocumentFormat',
        'sEzsigndocumentBase64' => 'sEzsigndocumentBase64',
        'sEzsigndocumentUrl' => 'sEzsigndocumentUrl',
        'bEzsigndocumentForcerepair' => 'bEzsigndocumentForcerepair',
        'sEzsigndocumentPassword' => 'sEzsigndocumentPassword',
        'fkiEzsignfolderID' => 'fkiEzsignfolderID',
        'dtEzsigndocumentDuedate' => 'dtEzsigndocumentDuedate',
        'fkiLanguageID' => 'fkiLanguageID',
        'sEzsigndocumentName' => 'sEzsigndocumentName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'eEzsigndocumentSource' => 'setEEzsigndocumentSource',
        'eEzsigndocumentFormat' => 'setEEzsigndocumentFormat',
        'sEzsigndocumentBase64' => 'setSEzsigndocumentBase64',
        'sEzsigndocumentUrl' => 'setSEzsigndocumentUrl',
        'bEzsigndocumentForcerepair' => 'setBEzsigndocumentForcerepair',
        'sEzsigndocumentPassword' => 'setSEzsigndocumentPassword',
        'fkiEzsignfolderID' => 'setFkiEzsignfolderID',
        'dtEzsigndocumentDuedate' => 'setDtEzsigndocumentDuedate',
        'fkiLanguageID' => 'setFkiLanguageID',
        'sEzsigndocumentName' => 'setSEzsigndocumentName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'eEzsigndocumentSource' => 'getEEzsigndocumentSource',
        'eEzsigndocumentFormat' => 'getEEzsigndocumentFormat',
        'sEzsigndocumentBase64' => 'getSEzsigndocumentBase64',
        'sEzsigndocumentUrl' => 'getSEzsigndocumentUrl',
        'bEzsigndocumentForcerepair' => 'getBEzsigndocumentForcerepair',
        'sEzsigndocumentPassword' => 'getSEzsigndocumentPassword',
        'fkiEzsignfolderID' => 'getFkiEzsignfolderID',
        'dtEzsigndocumentDuedate' => 'getDtEzsigndocumentDuedate',
        'fkiLanguageID' => 'getFkiLanguageID',
        'sEzsigndocumentName' => 'getSEzsigndocumentName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const E_EZSIGNDOCUMENT_SOURCE_BASE64 = 'Base64';
    const E_EZSIGNDOCUMENT_SOURCE_URL = 'Url';
    const E_EZSIGNDOCUMENT_FORMAT_PDF = 'Pdf';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEEzsigndocumentSourceAllowableValues()
    {
        return [
            self::E_EZSIGNDOCUMENT_SOURCE_BASE64,
            self::E_EZSIGNDOCUMENT_SOURCE_URL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEEzsigndocumentFormatAllowableValues()
    {
        return [
            self::E_EZSIGNDOCUMENT_FORMAT_PDF,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['eEzsigndocumentSource'] = $data['eEzsigndocumentSource'] ?? null;
        $this->container['eEzsigndocumentFormat'] = $data['eEzsigndocumentFormat'] ?? null;
        $this->container['sEzsigndocumentBase64'] = $data['sEzsigndocumentBase64'] ?? null;
        $this->container['sEzsigndocumentUrl'] = $data['sEzsigndocumentUrl'] ?? null;
        $this->container['bEzsigndocumentForcerepair'] = $data['bEzsigndocumentForcerepair'] ?? true;
        $this->container['sEzsigndocumentPassword'] = $data['sEzsigndocumentPassword'] ?? '';
        $this->container['fkiEzsignfolderID'] = $data['fkiEzsignfolderID'] ?? null;
        $this->container['dtEzsigndocumentDuedate'] = $data['dtEzsigndocumentDuedate'] ?? null;
        $this->container['fkiLanguageID'] = $data['fkiLanguageID'] ?? null;
        $this->container['sEzsigndocumentName'] = $data['sEzsigndocumentName'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['eEzsigndocumentSource'] === null) {
            $invalidProperties[] = "'eEzsigndocumentSource' can't be null";
        }
        $allowedValues = $this->getEEzsigndocumentSourceAllowableValues();
        if (!is_null($this->container['eEzsigndocumentSource']) && !in_array($this->container['eEzsigndocumentSource'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eEzsigndocumentSource', must be one of '%s'",
                $this->container['eEzsigndocumentSource'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['eEzsigndocumentFormat'] === null) {
            $invalidProperties[] = "'eEzsigndocumentFormat' can't be null";
        }
        $allowedValues = $this->getEEzsigndocumentFormatAllowableValues();
        if (!is_null($this->container['eEzsigndocumentFormat']) && !in_array($this->container['eEzsigndocumentFormat'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eEzsigndocumentFormat', must be one of '%s'",
                $this->container['eEzsigndocumentFormat'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['fkiEzsignfolderID'] === null) {
            $invalidProperties[] = "'fkiEzsignfolderID' can't be null";
        }
        if ($this->container['dtEzsigndocumentDuedate'] === null) {
            $invalidProperties[] = "'dtEzsigndocumentDuedate' can't be null";
        }
        if ($this->container['fkiLanguageID'] === null) {
            $invalidProperties[] = "'fkiLanguageID' can't be null";
        }
        if (($this->container['fkiLanguageID'] > 2)) {
            $invalidProperties[] = "invalid value for 'fkiLanguageID', must be smaller than or equal to 2.";
        }

        if (($this->container['fkiLanguageID'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiLanguageID', must be bigger than or equal to 1.";
        }

        if ($this->container['sEzsigndocumentName'] === null) {
            $invalidProperties[] = "'sEzsigndocumentName' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets eEzsigndocumentSource
     *
     * @return string
     */
    public function getEEzsigndocumentSource()
    {
        return $this->container['eEzsigndocumentSource'];
    }

    /**
     * Sets eEzsigndocumentSource
     *
     * @param string $eEzsigndocumentSource Indicates where to look for the document binary content.
     *
     * @return self
     */
    public function setEEzsigndocumentSource($eEzsigndocumentSource)
    {
        $allowedValues = $this->getEEzsigndocumentSourceAllowableValues();
        if (!in_array($eEzsigndocumentSource, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eEzsigndocumentSource', must be one of '%s'",
                    $eEzsigndocumentSource,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eEzsigndocumentSource'] = $eEzsigndocumentSource;

        return $this;
    }

    /**
     * Gets eEzsigndocumentFormat
     *
     * @return string
     */
    public function getEEzsigndocumentFormat()
    {
        return $this->container['eEzsigndocumentFormat'];
    }

    /**
     * Sets eEzsigndocumentFormat
     *
     * @param string $eEzsigndocumentFormat Indicates the format of the document.
     *
     * @return self
     */
    public function setEEzsigndocumentFormat($eEzsigndocumentFormat)
    {
        $allowedValues = $this->getEEzsigndocumentFormatAllowableValues();
        if (!in_array($eEzsigndocumentFormat, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eEzsigndocumentFormat', must be one of '%s'",
                    $eEzsigndocumentFormat,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eEzsigndocumentFormat'] = $eEzsigndocumentFormat;

        return $this;
    }

    /**
     * Gets sEzsigndocumentBase64
     *
     * @return string|null
     */
    public function getSEzsigndocumentBase64()
    {
        return $this->container['sEzsigndocumentBase64'];
    }

    /**
     * Sets sEzsigndocumentBase64
     *
     * @param string|null $sEzsigndocumentBase64 The Base64 encoded binary content of the document.  This field is Required when eEzsigndocumentSource = Base64.
     *
     * @return self
     */
    public function setSEzsigndocumentBase64($sEzsigndocumentBase64)
    {
        $this->container['sEzsigndocumentBase64'] = $sEzsigndocumentBase64;

        return $this;
    }

    /**
     * Gets sEzsigndocumentUrl
     *
     * @return string|null
     */
    public function getSEzsigndocumentUrl()
    {
        return $this->container['sEzsigndocumentUrl'];
    }

    /**
     * Sets sEzsigndocumentUrl
     *
     * @param string|null $sEzsigndocumentUrl The url where the document content resides.  This field is Required when eEzsigndocumentSource = Url.
     *
     * @return self
     */
    public function setSEzsigndocumentUrl($sEzsigndocumentUrl)
    {
        $this->container['sEzsigndocumentUrl'] = $sEzsigndocumentUrl;

        return $this;
    }

    /**
     * Gets bEzsigndocumentForcerepair
     *
     * @return bool|null
     */
    public function getBEzsigndocumentForcerepair()
    {
        return $this->container['bEzsigndocumentForcerepair'];
    }

    /**
     * Sets bEzsigndocumentForcerepair
     *
     * @param bool|null $bEzsigndocumentForcerepair Try to repair the document or flatten it if it cannot be used for electronic signature.
     *
     * @return self
     */
    public function setBEzsigndocumentForcerepair($bEzsigndocumentForcerepair)
    {
        $this->container['bEzsigndocumentForcerepair'] = $bEzsigndocumentForcerepair;

        return $this;
    }

    /**
     * Gets sEzsigndocumentPassword
     *
     * @return string|null
     */
    public function getSEzsigndocumentPassword()
    {
        return $this->container['sEzsigndocumentPassword'];
    }

    /**
     * Sets sEzsigndocumentPassword
     *
     * @param string|null $sEzsigndocumentPassword If the source document is password protected, the password to open/modify it.
     *
     * @return self
     */
    public function setSEzsigndocumentPassword($sEzsigndocumentPassword)
    {
        $this->container['sEzsigndocumentPassword'] = $sEzsigndocumentPassword;

        return $this;
    }

    /**
     * Gets fkiEzsignfolderID
     *
     * @return int
     */
    public function getFkiEzsignfolderID()
    {
        return $this->container['fkiEzsignfolderID'];
    }

    /**
     * Sets fkiEzsignfolderID
     *
     * @param int $fkiEzsignfolderID The unique ID of the Ezsignfolder
     *
     * @return self
     */
    public function setFkiEzsignfolderID($fkiEzsignfolderID)
    {
        $this->container['fkiEzsignfolderID'] = $fkiEzsignfolderID;

        return $this;
    }

    /**
     * Gets dtEzsigndocumentDuedate
     *
     * @return string
     */
    public function getDtEzsigndocumentDuedate()
    {
        return $this->container['dtEzsigndocumentDuedate'];
    }

    /**
     * Sets dtEzsigndocumentDuedate
     *
     * @param string $dtEzsigndocumentDuedate The maximum date and time at which the Ezsigndocument can be signed.
     *
     * @return self
     */
    public function setDtEzsigndocumentDuedate($dtEzsigndocumentDuedate)
    {
        $this->container['dtEzsigndocumentDuedate'] = $dtEzsigndocumentDuedate;

        return $this;
    }

    /**
     * Gets fkiLanguageID
     *
     * @return int
     */
    public function getFkiLanguageID()
    {
        return $this->container['fkiLanguageID'];
    }

    /**
     * Sets fkiLanguageID
     *
     * @param int $fkiLanguageID The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
     *
     * @return self
     */
    public function setFkiLanguageID($fkiLanguageID)
    {

        if (($fkiLanguageID > 2)) {
            throw new \InvalidArgumentException('invalid value for $fkiLanguageID when calling EzsigndocumentRequest., must be smaller than or equal to 2.');
        }
        if (($fkiLanguageID < 1)) {
            throw new \InvalidArgumentException('invalid value for $fkiLanguageID when calling EzsigndocumentRequest., must be bigger than or equal to 1.');
        }

        $this->container['fkiLanguageID'] = $fkiLanguageID;

        return $this;
    }

    /**
     * Gets sEzsigndocumentName
     *
     * @return string
     */
    public function getSEzsigndocumentName()
    {
        return $this->container['sEzsigndocumentName'];
    }

    /**
     * Sets sEzsigndocumentName
     *
     * @param string $sEzsigndocumentName The name of the document that will be presented to Ezsignfoldersignerassociations
     *
     * @return self
     */
    public function setSEzsigndocumentName($sEzsigndocumentName)
    {
        $this->container['sEzsigndocumentName'] = $sEzsigndocumentName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


