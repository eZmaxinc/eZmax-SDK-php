<?php
/**
 * EzsignimportfolderListElement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * EzsignimportfolderListElement Class Doc Comment
 *
 * @category Class
 * @description A Ezsignimportfolder List Element
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EzsignimportfolderListElement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ezsignimportfolder-ListElement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pkiEzsignimportfolderID' => 'int',
        'sEzsignimportfolderName' => 'string',
        'dtCreatedDate' => 'string',
        'dtModifiedDate' => 'string',
        'iTotalEzsignimportdocument' => 'int',
        'iTotalEzsignimportdocumentNotImported' => 'int',
        'eEzsignimportfolderStatus' => '\eZmaxAPI\Model\ComputedEEzsignimportfolderStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pkiEzsignimportfolderID' => null,
        'sEzsignimportfolderName' => null,
        'dtCreatedDate' => null,
        'dtModifiedDate' => null,
        'iTotalEzsignimportdocument' => null,
        'iTotalEzsignimportdocumentNotImported' => null,
        'eEzsignimportfolderStatus' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pkiEzsignimportfolderID' => false,
		'sEzsignimportfolderName' => false,
		'dtCreatedDate' => false,
		'dtModifiedDate' => false,
		'iTotalEzsignimportdocument' => false,
		'iTotalEzsignimportdocumentNotImported' => false,
		'eEzsignimportfolderStatus' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pkiEzsignimportfolderID' => 'pkiEzsignimportfolderID',
        'sEzsignimportfolderName' => 'sEzsignimportfolderName',
        'dtCreatedDate' => 'dtCreatedDate',
        'dtModifiedDate' => 'dtModifiedDate',
        'iTotalEzsignimportdocument' => 'iTotalEzsignimportdocument',
        'iTotalEzsignimportdocumentNotImported' => 'iTotalEzsignimportdocumentNotImported',
        'eEzsignimportfolderStatus' => 'eEzsignimportfolderStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pkiEzsignimportfolderID' => 'setPkiEzsignimportfolderID',
        'sEzsignimportfolderName' => 'setSEzsignimportfolderName',
        'dtCreatedDate' => 'setDtCreatedDate',
        'dtModifiedDate' => 'setDtModifiedDate',
        'iTotalEzsignimportdocument' => 'setITotalEzsignimportdocument',
        'iTotalEzsignimportdocumentNotImported' => 'setITotalEzsignimportdocumentNotImported',
        'eEzsignimportfolderStatus' => 'setEEzsignimportfolderStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pkiEzsignimportfolderID' => 'getPkiEzsignimportfolderID',
        'sEzsignimportfolderName' => 'getSEzsignimportfolderName',
        'dtCreatedDate' => 'getDtCreatedDate',
        'dtModifiedDate' => 'getDtModifiedDate',
        'iTotalEzsignimportdocument' => 'getITotalEzsignimportdocument',
        'iTotalEzsignimportdocumentNotImported' => 'getITotalEzsignimportdocumentNotImported',
        'eEzsignimportfolderStatus' => 'getEEzsignimportfolderStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pkiEzsignimportfolderID', $data ?? [], null);
        $this->setIfExists('sEzsignimportfolderName', $data ?? [], null);
        $this->setIfExists('dtCreatedDate', $data ?? [], null);
        $this->setIfExists('dtModifiedDate', $data ?? [], null);
        $this->setIfExists('iTotalEzsignimportdocument', $data ?? [], null);
        $this->setIfExists('iTotalEzsignimportdocumentNotImported', $data ?? [], null);
        $this->setIfExists('eEzsignimportfolderStatus', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pkiEzsignimportfolderID'] === null) {
            $invalidProperties[] = "'pkiEzsignimportfolderID' can't be null";
        }
        if (($this->container['pkiEzsignimportfolderID'] > 16777215)) {
            $invalidProperties[] = "invalid value for 'pkiEzsignimportfolderID', must be smaller than or equal to 16777215.";
        }

        if (($this->container['pkiEzsignimportfolderID'] < 0)) {
            $invalidProperties[] = "invalid value for 'pkiEzsignimportfolderID', must be bigger than or equal to 0.";
        }

        if ($this->container['sEzsignimportfolderName'] === null) {
            $invalidProperties[] = "'sEzsignimportfolderName' can't be null";
        }
	//if (!preg_match("/^.{0,150}$/", $this->container['sEzsignimportfolderName'])) {
        if (!is_null($this->container['sEzsignimportfolderName']) && !preg_match("/(*UTF8)^.{0,150}$/", $this->container['sEzsignimportfolderName'])) {
            $invalidProperties[] = "invalid value for 'sEzsignimportfolderName', must be conform to the pattern /^.{0,150}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pkiEzsignimportfolderID
     *
     * @return int
     */
    public function getPkiEzsignimportfolderID()
    {
	//return $this->container['pkiEzsignimportfolderID'];
        return $this->container['pkiEzsignimportfolderID'];
    }

    /**
     * Sets pkiEzsignimportfolderID
     *
     * @param int $pkiEzsignimportfolderID The unique ID of the Ezsignimportfolder
     *
     * @return self
     */
    public function setPkiEzsignimportfolderID($pkiEzsignimportfolderID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($pkiEzsignimportfolderID)) {
            //throw new \InvalidArgumentException('non-nullable pkiEzsignimportfolderID cannot be null');
        //}

	//if (($pkiEzsignimportfolderID > 16777215)) {
        if (($pkiEzsignimportfolderID > 16777215)) {
	    //throw new \InvalidArgumentException('invalid value for $pkiEzsignimportfolderID when calling EzsignimportfolderListElement., must be smaller than or equal to 16777215.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsignimportfolderID)?'null':'"'.$pkiEzsignimportfolderID.'"').' for pkiEzsignimportfolderID when calling EzsignimportfolderListElement., must be smaller than or equal to 16777215.');
        }
	//if (($pkiEzsignimportfolderID < 0)) {
        if (($pkiEzsignimportfolderID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $pkiEzsignimportfolderID when calling EzsignimportfolderListElement., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsignimportfolderID)?'null':'"'.$pkiEzsignimportfolderID.'"').' for pkiEzsignimportfolderID when calling EzsignimportfolderListElement., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['pkiEzsignimportfolderID'] = $pkiEzsignimportfolderID;
        $this->container['pkiEzsignimportfolderID'] = (is_null($pkiEzsignimportfolderID) ? null : (int) $pkiEzsignimportfolderID);

        return $this;
    }

    /**
     * Gets sEzsignimportfolderName
     *
     * @return string
     */
    public function getSEzsignimportfolderName()
    {
	//return $this->container['sEzsignimportfolderName'];
        return is_null($this->container['sEzsignimportfolderName']) ? null : trim($this->container['sEzsignimportfolderName']);
    }

    /**
     * Sets sEzsignimportfolderName
     *
     * @param string $sEzsignimportfolderName The name of the Ezsignimportfolder
     *
     * @return self
     */
    public function setSEzsignimportfolderName($sEzsignimportfolderName)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sEzsignimportfolderName)) {
            //throw new \InvalidArgumentException('non-nullable sEzsignimportfolderName cannot be null');
        //}

	//if ((!preg_match("/^.{0,150}$/", ObjectSerializer::toString($sEzsignimportfolderName)))) {
        if (!is_null($sEzsignimportfolderName) && (!preg_match("/(*UTF8)^.{0,150}$/", ObjectSerializer::toString($sEzsignimportfolderName)))) {
	    //throw new \InvalidArgumentException("invalid value for \$sEzsignimportfolderName when calling EzsignimportfolderListElement., must conform to the pattern /^.{0,150}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($sEzsignimportfolderName)?'null':'"'.$sEzsignimportfolderName.'"')." for sEzsignimportfolderName when calling EzsignimportfolderListElement., must conform to the pattern /^.{0,150}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sEzsignimportfolderName'] = $sEzsignimportfolderName;
        $this->container['sEzsignimportfolderName'] = (is_null($sEzsignimportfolderName) ? null : trim((string) $sEzsignimportfolderName));

        return $this;
    }

    /**
     * Gets dtCreatedDate
     *
     * @return string|null
     */
    public function getDtCreatedDate()
    {
	//return $this->container['dtCreatedDate'];
        return is_null($this->container['dtCreatedDate']) ? null : trim($this->container['dtCreatedDate']);
    }

    /**
     * Sets dtCreatedDate
     *
     * @param string|null $dtCreatedDate The date and time at which the object was created
     *
     * @return self
     */
    public function setDtCreatedDate($dtCreatedDate)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtCreatedDate)) {
            //throw new \InvalidArgumentException('non-nullable dtCreatedDate cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtCreatedDate'] = $dtCreatedDate;
        $this->container['dtCreatedDate'] = (is_null($dtCreatedDate) ? null : trim((string) $dtCreatedDate));

        return $this;
    }

    /**
     * Gets dtModifiedDate
     *
     * @return string|null
     */
    public function getDtModifiedDate()
    {
	//return $this->container['dtModifiedDate'];
        return is_null($this->container['dtModifiedDate']) ? null : trim($this->container['dtModifiedDate']);
    }

    /**
     * Sets dtModifiedDate
     *
     * @param string|null $dtModifiedDate The date and time at which the object was last modified
     *
     * @return self
     */
    public function setDtModifiedDate($dtModifiedDate)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtModifiedDate)) {
            //throw new \InvalidArgumentException('non-nullable dtModifiedDate cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtModifiedDate'] = $dtModifiedDate;
        $this->container['dtModifiedDate'] = (is_null($dtModifiedDate) ? null : trim((string) $dtModifiedDate));

        return $this;
    }

    /**
     * Gets iTotalEzsignimportdocument
     *
     * @return int|null
     */
    public function getITotalEzsignimportdocument()
    {
	//return $this->container['iTotalEzsignimportdocument'];
        return $this->container['iTotalEzsignimportdocument'];
    }

    /**
     * Sets iTotalEzsignimportdocument
     *
     * @param int|null $iTotalEzsignimportdocument The count of Ezsignimportdocument.
     *
     * @return self
     */
    public function setITotalEzsignimportdocument($iTotalEzsignimportdocument)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iTotalEzsignimportdocument)) {
            //throw new \InvalidArgumentException('non-nullable iTotalEzsignimportdocument cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iTotalEzsignimportdocument'] = $iTotalEzsignimportdocument;
        $this->container['iTotalEzsignimportdocument'] = (is_null($iTotalEzsignimportdocument) ? null : (int) $iTotalEzsignimportdocument);

        return $this;
    }

    /**
     * Gets iTotalEzsignimportdocumentNotImported
     *
     * @return int|null
     */
    public function getITotalEzsignimportdocumentNotImported()
    {
	//return $this->container['iTotalEzsignimportdocumentNotImported'];
        return $this->container['iTotalEzsignimportdocumentNotImported'];
    }

    /**
     * Sets iTotalEzsignimportdocumentNotImported
     *
     * @param int|null $iTotalEzsignimportdocumentNotImported The count of Ezsignimportdocument not imported in an Ezsignfolder.
     *
     * @return self
     */
    public function setITotalEzsignimportdocumentNotImported($iTotalEzsignimportdocumentNotImported)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iTotalEzsignimportdocumentNotImported)) {
            //throw new \InvalidArgumentException('non-nullable iTotalEzsignimportdocumentNotImported cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iTotalEzsignimportdocumentNotImported'] = $iTotalEzsignimportdocumentNotImported;
        $this->container['iTotalEzsignimportdocumentNotImported'] = (is_null($iTotalEzsignimportdocumentNotImported) ? null : (int) $iTotalEzsignimportdocumentNotImported);

        return $this;
    }

    /**
     * Gets eEzsignimportfolderStatus
     *
     * @return \eZmaxAPI\Model\ComputedEEzsignimportfolderStatus|null
     */
    public function getEEzsignimportfolderStatus()
    {
	//return $this->container['eEzsignimportfolderStatus'];
        return $this->container['eEzsignimportfolderStatus'];
    }

    /**
     * Sets eEzsignimportfolderStatus
     *
     * @param \eZmaxAPI\Model\ComputedEEzsignimportfolderStatus|null $eEzsignimportfolderStatus eEzsignimportfolderStatus
     *
     * @return self
     */
    public function setEEzsignimportfolderStatus($eEzsignimportfolderStatus)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eEzsignimportfolderStatus)) {
            //throw new \InvalidArgumentException('non-nullable eEzsignimportfolderStatus cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eEzsignimportfolderStatus'] = $eEzsignimportfolderStatus;
        $this->container['eEzsignimportfolderStatus'] = $eEzsignimportfolderStatus;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


