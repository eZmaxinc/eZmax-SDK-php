<?php
/**
 * CustomerRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * CustomerRequest Class Doc Comment
 *
 * @category Class
 * @description A Customer Object
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'customer-Request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pkiCustomerID' => 'int',
        'fkiCompanyID' => 'int',
        'fkiCustomergroupID' => 'int',
        'sCustomerName' => 'string',
        'fkiContactinformationsID' => 'int',
        'fkiContactcontainerID' => 'int',
        'fkiImageID' => 'int',
        'fkiGlaccountcontainerID' => 'int',
        'fkiLanguageID' => 'int',
        'fkiDepartmentID' => 'int',
        'fkiPaymentmethodID' => 'int',
        'fkiElectronicfundstransferbankaccountID' => 'int',
        'fkiElectronicfundstransferbankaccountIDDirectdebit' => 'int',
        'fkiSendingmethodID' => 'int',
        'fkiTaxassignmentID' => 'int',
        'fkiAttendancestatusID' => 'int',
        'fkiAgentIDVariableexpensechargeto' => 'int',
        'fkiBrokerIDVariableexpensechargeto' => 'int',
        'fkiCustomerIDVariableexpensechargeto' => 'int',
        'fkiGlaccountcontainerIDVariableexpensechargeto' => 'int',
        'fkiAgentIDSupplychargechargeto' => 'int',
        'fkiBrokerIDSupplychargechargeto' => 'int',
        'fkiCustomerIDSupplychargechargeto' => 'int',
        'fkiGlaccountcontainerIDSupplychargechargeto' => 'int',
        'fkiInvoicealternatelogoID' => 'int',
        'fkiSynchronizationlinkserverID' => 'int',
        'efkiUserID' => 'int',
        'efksCustomerCode' => 'string',
        'sCustomerCode' => 'string',
        'dCustomerFulltimeequivalent' => 'string',
        'iCustomerPhotocopiercode' => 'int',
        'iCustomerLongdistancecode' => 'int',
        'iCustomerTimewindowstart' => 'int',
        'iCustomerTimewindowend' => 'int',
        'dCustomerMinimumchargeableinterests' => 'string',
        'dtCustomerBirthdate' => 'string',
        'dtCustomerTransfer' => 'string',
        'dtCustomerTransferappointment' => 'string',
        'dtCustomerTransfersurvey' => 'string',
        'bCustomerIsactive' => 'bool',
        'bCustomerVariableexpensefinanced' => 'bool',
        'bCustomerVariableexpensefinancedtaxes' => 'bool',
        'bCustomerSupplychargefinanced' => 'bool',
        'bCustomerSupplychargefinancedtaxes' => 'bool',
        'bCustomerAttendance' => 'bool',
        'eCustomerType' => '\eZmaxAPI\Model\FieldECustomerType',
        'eCustomerMarketingcorrespondence' => '\eZmaxAPI\Model\FieldECustomerMarketingcorrespondence',
        'bCustomerBlackcopycarbon' => 'bool',
        'bCustomerUnsubscribeinfo' => 'bool',
        'tCustomerComment' => 'string',
        'iMPORTID' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pkiCustomerID' => null,
        'fkiCompanyID' => null,
        'fkiCustomergroupID' => null,
        'sCustomerName' => null,
        'fkiContactinformationsID' => null,
        'fkiContactcontainerID' => null,
        'fkiImageID' => null,
        'fkiGlaccountcontainerID' => null,
        'fkiLanguageID' => null,
        'fkiDepartmentID' => null,
        'fkiPaymentmethodID' => null,
        'fkiElectronicfundstransferbankaccountID' => null,
        'fkiElectronicfundstransferbankaccountIDDirectdebit' => null,
        'fkiSendingmethodID' => null,
        'fkiTaxassignmentID' => null,
        'fkiAttendancestatusID' => null,
        'fkiAgentIDVariableexpensechargeto' => null,
        'fkiBrokerIDVariableexpensechargeto' => null,
        'fkiCustomerIDVariableexpensechargeto' => null,
        'fkiGlaccountcontainerIDVariableexpensechargeto' => null,
        'fkiAgentIDSupplychargechargeto' => null,
        'fkiBrokerIDSupplychargechargeto' => null,
        'fkiCustomerIDSupplychargechargeto' => null,
        'fkiGlaccountcontainerIDSupplychargechargeto' => null,
        'fkiInvoicealternatelogoID' => null,
        'fkiSynchronizationlinkserverID' => null,
        'efkiUserID' => null,
        'efksCustomerCode' => null,
        'sCustomerCode' => null,
        'dCustomerFulltimeequivalent' => null,
        'iCustomerPhotocopiercode' => null,
        'iCustomerLongdistancecode' => null,
        'iCustomerTimewindowstart' => null,
        'iCustomerTimewindowend' => null,
        'dCustomerMinimumchargeableinterests' => null,
        'dtCustomerBirthdate' => null,
        'dtCustomerTransfer' => null,
        'dtCustomerTransferappointment' => null,
        'dtCustomerTransfersurvey' => null,
        'bCustomerIsactive' => null,
        'bCustomerVariableexpensefinanced' => null,
        'bCustomerVariableexpensefinancedtaxes' => null,
        'bCustomerSupplychargefinanced' => null,
        'bCustomerSupplychargefinancedtaxes' => null,
        'bCustomerAttendance' => null,
        'eCustomerType' => null,
        'eCustomerMarketingcorrespondence' => null,
        'bCustomerBlackcopycarbon' => null,
        'bCustomerUnsubscribeinfo' => null,
        'tCustomerComment' => null,
        'iMPORTID' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pkiCustomerID' => false,
		'fkiCompanyID' => false,
		'fkiCustomergroupID' => false,
		'sCustomerName' => false,
		'fkiContactinformationsID' => false,
		'fkiContactcontainerID' => false,
		'fkiImageID' => false,
		'fkiGlaccountcontainerID' => false,
		'fkiLanguageID' => false,
		'fkiDepartmentID' => false,
		'fkiPaymentmethodID' => false,
		'fkiElectronicfundstransferbankaccountID' => false,
		'fkiElectronicfundstransferbankaccountIDDirectdebit' => false,
		'fkiSendingmethodID' => false,
		'fkiTaxassignmentID' => false,
		'fkiAttendancestatusID' => false,
		'fkiAgentIDVariableexpensechargeto' => false,
		'fkiBrokerIDVariableexpensechargeto' => false,
		'fkiCustomerIDVariableexpensechargeto' => false,
		'fkiGlaccountcontainerIDVariableexpensechargeto' => false,
		'fkiAgentIDSupplychargechargeto' => false,
		'fkiBrokerIDSupplychargechargeto' => false,
		'fkiCustomerIDSupplychargechargeto' => false,
		'fkiGlaccountcontainerIDSupplychargechargeto' => false,
		'fkiInvoicealternatelogoID' => false,
		'fkiSynchronizationlinkserverID' => false,
		'efkiUserID' => false,
		'efksCustomerCode' => false,
		'sCustomerCode' => false,
		'dCustomerFulltimeequivalent' => false,
		'iCustomerPhotocopiercode' => false,
		'iCustomerLongdistancecode' => false,
		'iCustomerTimewindowstart' => false,
		'iCustomerTimewindowend' => false,
		'dCustomerMinimumchargeableinterests' => false,
		'dtCustomerBirthdate' => false,
		'dtCustomerTransfer' => false,
		'dtCustomerTransferappointment' => false,
		'dtCustomerTransfersurvey' => false,
		'bCustomerIsactive' => false,
		'bCustomerVariableexpensefinanced' => false,
		'bCustomerVariableexpensefinancedtaxes' => false,
		'bCustomerSupplychargefinanced' => false,
		'bCustomerSupplychargefinancedtaxes' => false,
		'bCustomerAttendance' => false,
		'eCustomerType' => false,
		'eCustomerMarketingcorrespondence' => false,
		'bCustomerBlackcopycarbon' => false,
		'bCustomerUnsubscribeinfo' => false,
		'tCustomerComment' => false,
		'iMPORTID' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pkiCustomerID' => 'pkiCustomerID',
        'fkiCompanyID' => 'fkiCompanyID',
        'fkiCustomergroupID' => 'fkiCustomergroupID',
        'sCustomerName' => 'sCustomerName',
        'fkiContactinformationsID' => 'fkiContactinformationsID',
        'fkiContactcontainerID' => 'fkiContactcontainerID',
        'fkiImageID' => 'fkiImageID',
        'fkiGlaccountcontainerID' => 'fkiGlaccountcontainerID',
        'fkiLanguageID' => 'fkiLanguageID',
        'fkiDepartmentID' => 'fkiDepartmentID',
        'fkiPaymentmethodID' => 'fkiPaymentmethodID',
        'fkiElectronicfundstransferbankaccountID' => 'fkiElectronicfundstransferbankaccountID',
        'fkiElectronicfundstransferbankaccountIDDirectdebit' => 'fkiElectronicfundstransferbankaccountIDDirectdebit',
        'fkiSendingmethodID' => 'fkiSendingmethodID',
        'fkiTaxassignmentID' => 'fkiTaxassignmentID',
        'fkiAttendancestatusID' => 'fkiAttendancestatusID',
        'fkiAgentIDVariableexpensechargeto' => 'fkiAgentIDVariableexpensechargeto',
        'fkiBrokerIDVariableexpensechargeto' => 'fkiBrokerIDVariableexpensechargeto',
        'fkiCustomerIDVariableexpensechargeto' => 'fkiCustomerIDVariableexpensechargeto',
        'fkiGlaccountcontainerIDVariableexpensechargeto' => 'fkiGlaccountcontainerIDVariableexpensechargeto',
        'fkiAgentIDSupplychargechargeto' => 'fkiAgentIDSupplychargechargeto',
        'fkiBrokerIDSupplychargechargeto' => 'fkiBrokerIDSupplychargechargeto',
        'fkiCustomerIDSupplychargechargeto' => 'fkiCustomerIDSupplychargechargeto',
        'fkiGlaccountcontainerIDSupplychargechargeto' => 'fkiGlaccountcontainerIDSupplychargechargeto',
        'fkiInvoicealternatelogoID' => 'fkiInvoicealternatelogoID',
        'fkiSynchronizationlinkserverID' => 'fkiSynchronizationlinkserverID',
        'efkiUserID' => 'efkiUserID',
        'efksCustomerCode' => 'efksCustomerCode',
        'sCustomerCode' => 'sCustomerCode',
        'dCustomerFulltimeequivalent' => 'dCustomerFulltimeequivalent',
        'iCustomerPhotocopiercode' => 'iCustomerPhotocopiercode',
        'iCustomerLongdistancecode' => 'iCustomerLongdistancecode',
        'iCustomerTimewindowstart' => 'iCustomerTimewindowstart',
        'iCustomerTimewindowend' => 'iCustomerTimewindowend',
        'dCustomerMinimumchargeableinterests' => 'dCustomerMinimumchargeableinterests',
        'dtCustomerBirthdate' => 'dtCustomerBirthdate',
        'dtCustomerTransfer' => 'dtCustomerTransfer',
        'dtCustomerTransferappointment' => 'dtCustomerTransferappointment',
        'dtCustomerTransfersurvey' => 'dtCustomerTransfersurvey',
        'bCustomerIsactive' => 'bCustomerIsactive',
        'bCustomerVariableexpensefinanced' => 'bCustomerVariableexpensefinanced',
        'bCustomerVariableexpensefinancedtaxes' => 'bCustomerVariableexpensefinancedtaxes',
        'bCustomerSupplychargefinanced' => 'bCustomerSupplychargefinanced',
        'bCustomerSupplychargefinancedtaxes' => 'bCustomerSupplychargefinancedtaxes',
        'bCustomerAttendance' => 'bCustomerAttendance',
        'eCustomerType' => 'eCustomerType',
        'eCustomerMarketingcorrespondence' => 'eCustomerMarketingcorrespondence',
        'bCustomerBlackcopycarbon' => 'bCustomerBlackcopycarbon',
        'bCustomerUnsubscribeinfo' => 'bCustomerUnsubscribeinfo',
        'tCustomerComment' => 'tCustomerComment',
        'iMPORTID' => 'IMPORTID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pkiCustomerID' => 'setPkiCustomerID',
        'fkiCompanyID' => 'setFkiCompanyID',
        'fkiCustomergroupID' => 'setFkiCustomergroupID',
        'sCustomerName' => 'setSCustomerName',
        'fkiContactinformationsID' => 'setFkiContactinformationsID',
        'fkiContactcontainerID' => 'setFkiContactcontainerID',
        'fkiImageID' => 'setFkiImageID',
        'fkiGlaccountcontainerID' => 'setFkiGlaccountcontainerID',
        'fkiLanguageID' => 'setFkiLanguageID',
        'fkiDepartmentID' => 'setFkiDepartmentID',
        'fkiPaymentmethodID' => 'setFkiPaymentmethodID',
        'fkiElectronicfundstransferbankaccountID' => 'setFkiElectronicfundstransferbankaccountID',
        'fkiElectronicfundstransferbankaccountIDDirectdebit' => 'setFkiElectronicfundstransferbankaccountIDDirectdebit',
        'fkiSendingmethodID' => 'setFkiSendingmethodID',
        'fkiTaxassignmentID' => 'setFkiTaxassignmentID',
        'fkiAttendancestatusID' => 'setFkiAttendancestatusID',
        'fkiAgentIDVariableexpensechargeto' => 'setFkiAgentIDVariableexpensechargeto',
        'fkiBrokerIDVariableexpensechargeto' => 'setFkiBrokerIDVariableexpensechargeto',
        'fkiCustomerIDVariableexpensechargeto' => 'setFkiCustomerIDVariableexpensechargeto',
        'fkiGlaccountcontainerIDVariableexpensechargeto' => 'setFkiGlaccountcontainerIDVariableexpensechargeto',
        'fkiAgentIDSupplychargechargeto' => 'setFkiAgentIDSupplychargechargeto',
        'fkiBrokerIDSupplychargechargeto' => 'setFkiBrokerIDSupplychargechargeto',
        'fkiCustomerIDSupplychargechargeto' => 'setFkiCustomerIDSupplychargechargeto',
        'fkiGlaccountcontainerIDSupplychargechargeto' => 'setFkiGlaccountcontainerIDSupplychargechargeto',
        'fkiInvoicealternatelogoID' => 'setFkiInvoicealternatelogoID',
        'fkiSynchronizationlinkserverID' => 'setFkiSynchronizationlinkserverID',
        'efkiUserID' => 'setEfkiUserID',
        'efksCustomerCode' => 'setEfksCustomerCode',
        'sCustomerCode' => 'setSCustomerCode',
        'dCustomerFulltimeequivalent' => 'setDCustomerFulltimeequivalent',
        'iCustomerPhotocopiercode' => 'setICustomerPhotocopiercode',
        'iCustomerLongdistancecode' => 'setICustomerLongdistancecode',
        'iCustomerTimewindowstart' => 'setICustomerTimewindowstart',
        'iCustomerTimewindowend' => 'setICustomerTimewindowend',
        'dCustomerMinimumchargeableinterests' => 'setDCustomerMinimumchargeableinterests',
        'dtCustomerBirthdate' => 'setDtCustomerBirthdate',
        'dtCustomerTransfer' => 'setDtCustomerTransfer',
        'dtCustomerTransferappointment' => 'setDtCustomerTransferappointment',
        'dtCustomerTransfersurvey' => 'setDtCustomerTransfersurvey',
        'bCustomerIsactive' => 'setBCustomerIsactive',
        'bCustomerVariableexpensefinanced' => 'setBCustomerVariableexpensefinanced',
        'bCustomerVariableexpensefinancedtaxes' => 'setBCustomerVariableexpensefinancedtaxes',
        'bCustomerSupplychargefinanced' => 'setBCustomerSupplychargefinanced',
        'bCustomerSupplychargefinancedtaxes' => 'setBCustomerSupplychargefinancedtaxes',
        'bCustomerAttendance' => 'setBCustomerAttendance',
        'eCustomerType' => 'setECustomerType',
        'eCustomerMarketingcorrespondence' => 'setECustomerMarketingcorrespondence',
        'bCustomerBlackcopycarbon' => 'setBCustomerBlackcopycarbon',
        'bCustomerUnsubscribeinfo' => 'setBCustomerUnsubscribeinfo',
        'tCustomerComment' => 'setTCustomerComment',
        'iMPORTID' => 'setIMPORTID'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pkiCustomerID' => 'getPkiCustomerID',
        'fkiCompanyID' => 'getFkiCompanyID',
        'fkiCustomergroupID' => 'getFkiCustomergroupID',
        'sCustomerName' => 'getSCustomerName',
        'fkiContactinformationsID' => 'getFkiContactinformationsID',
        'fkiContactcontainerID' => 'getFkiContactcontainerID',
        'fkiImageID' => 'getFkiImageID',
        'fkiGlaccountcontainerID' => 'getFkiGlaccountcontainerID',
        'fkiLanguageID' => 'getFkiLanguageID',
        'fkiDepartmentID' => 'getFkiDepartmentID',
        'fkiPaymentmethodID' => 'getFkiPaymentmethodID',
        'fkiElectronicfundstransferbankaccountID' => 'getFkiElectronicfundstransferbankaccountID',
        'fkiElectronicfundstransferbankaccountIDDirectdebit' => 'getFkiElectronicfundstransferbankaccountIDDirectdebit',
        'fkiSendingmethodID' => 'getFkiSendingmethodID',
        'fkiTaxassignmentID' => 'getFkiTaxassignmentID',
        'fkiAttendancestatusID' => 'getFkiAttendancestatusID',
        'fkiAgentIDVariableexpensechargeto' => 'getFkiAgentIDVariableexpensechargeto',
        'fkiBrokerIDVariableexpensechargeto' => 'getFkiBrokerIDVariableexpensechargeto',
        'fkiCustomerIDVariableexpensechargeto' => 'getFkiCustomerIDVariableexpensechargeto',
        'fkiGlaccountcontainerIDVariableexpensechargeto' => 'getFkiGlaccountcontainerIDVariableexpensechargeto',
        'fkiAgentIDSupplychargechargeto' => 'getFkiAgentIDSupplychargechargeto',
        'fkiBrokerIDSupplychargechargeto' => 'getFkiBrokerIDSupplychargechargeto',
        'fkiCustomerIDSupplychargechargeto' => 'getFkiCustomerIDSupplychargechargeto',
        'fkiGlaccountcontainerIDSupplychargechargeto' => 'getFkiGlaccountcontainerIDSupplychargechargeto',
        'fkiInvoicealternatelogoID' => 'getFkiInvoicealternatelogoID',
        'fkiSynchronizationlinkserverID' => 'getFkiSynchronizationlinkserverID',
        'efkiUserID' => 'getEfkiUserID',
        'efksCustomerCode' => 'getEfksCustomerCode',
        'sCustomerCode' => 'getSCustomerCode',
        'dCustomerFulltimeequivalent' => 'getDCustomerFulltimeequivalent',
        'iCustomerPhotocopiercode' => 'getICustomerPhotocopiercode',
        'iCustomerLongdistancecode' => 'getICustomerLongdistancecode',
        'iCustomerTimewindowstart' => 'getICustomerTimewindowstart',
        'iCustomerTimewindowend' => 'getICustomerTimewindowend',
        'dCustomerMinimumchargeableinterests' => 'getDCustomerMinimumchargeableinterests',
        'dtCustomerBirthdate' => 'getDtCustomerBirthdate',
        'dtCustomerTransfer' => 'getDtCustomerTransfer',
        'dtCustomerTransferappointment' => 'getDtCustomerTransferappointment',
        'dtCustomerTransfersurvey' => 'getDtCustomerTransfersurvey',
        'bCustomerIsactive' => 'getBCustomerIsactive',
        'bCustomerVariableexpensefinanced' => 'getBCustomerVariableexpensefinanced',
        'bCustomerVariableexpensefinancedtaxes' => 'getBCustomerVariableexpensefinancedtaxes',
        'bCustomerSupplychargefinanced' => 'getBCustomerSupplychargefinanced',
        'bCustomerSupplychargefinancedtaxes' => 'getBCustomerSupplychargefinancedtaxes',
        'bCustomerAttendance' => 'getBCustomerAttendance',
        'eCustomerType' => 'getECustomerType',
        'eCustomerMarketingcorrespondence' => 'getECustomerMarketingcorrespondence',
        'bCustomerBlackcopycarbon' => 'getBCustomerBlackcopycarbon',
        'bCustomerUnsubscribeinfo' => 'getBCustomerUnsubscribeinfo',
        'tCustomerComment' => 'getTCustomerComment',
        'iMPORTID' => 'getIMPORTID'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pkiCustomerID', $data ?? [], null);
        $this->setIfExists('fkiCompanyID', $data ?? [], null);
        $this->setIfExists('fkiCustomergroupID', $data ?? [], null);
        $this->setIfExists('sCustomerName', $data ?? [], null);
        $this->setIfExists('fkiContactinformationsID', $data ?? [], null);
        $this->setIfExists('fkiContactcontainerID', $data ?? [], null);
        $this->setIfExists('fkiImageID', $data ?? [], null);
        $this->setIfExists('fkiGlaccountcontainerID', $data ?? [], null);
        $this->setIfExists('fkiLanguageID', $data ?? [], null);
        $this->setIfExists('fkiDepartmentID', $data ?? [], null);
        $this->setIfExists('fkiPaymentmethodID', $data ?? [], null);
        $this->setIfExists('fkiElectronicfundstransferbankaccountID', $data ?? [], null);
        $this->setIfExists('fkiElectronicfundstransferbankaccountIDDirectdebit', $data ?? [], null);
        $this->setIfExists('fkiSendingmethodID', $data ?? [], null);
        $this->setIfExists('fkiTaxassignmentID', $data ?? [], null);
        $this->setIfExists('fkiAttendancestatusID', $data ?? [], null);
        $this->setIfExists('fkiAgentIDVariableexpensechargeto', $data ?? [], null);
        $this->setIfExists('fkiBrokerIDVariableexpensechargeto', $data ?? [], null);
        $this->setIfExists('fkiCustomerIDVariableexpensechargeto', $data ?? [], null);
        $this->setIfExists('fkiGlaccountcontainerIDVariableexpensechargeto', $data ?? [], null);
        $this->setIfExists('fkiAgentIDSupplychargechargeto', $data ?? [], null);
        $this->setIfExists('fkiBrokerIDSupplychargechargeto', $data ?? [], null);
        $this->setIfExists('fkiCustomerIDSupplychargechargeto', $data ?? [], null);
        $this->setIfExists('fkiGlaccountcontainerIDSupplychargechargeto', $data ?? [], null);
        $this->setIfExists('fkiInvoicealternatelogoID', $data ?? [], null);
        $this->setIfExists('fkiSynchronizationlinkserverID', $data ?? [], null);
        $this->setIfExists('efkiUserID', $data ?? [], null);
        $this->setIfExists('efksCustomerCode', $data ?? [], null);
        $this->setIfExists('sCustomerCode', $data ?? [], null);
        $this->setIfExists('dCustomerFulltimeequivalent', $data ?? [], null);
        $this->setIfExists('iCustomerPhotocopiercode', $data ?? [], null);
        $this->setIfExists('iCustomerLongdistancecode', $data ?? [], null);
        $this->setIfExists('iCustomerTimewindowstart', $data ?? [], null);
        $this->setIfExists('iCustomerTimewindowend', $data ?? [], null);
        $this->setIfExists('dCustomerMinimumchargeableinterests', $data ?? [], null);
        $this->setIfExists('dtCustomerBirthdate', $data ?? [], null);
        $this->setIfExists('dtCustomerTransfer', $data ?? [], null);
        $this->setIfExists('dtCustomerTransferappointment', $data ?? [], null);
        $this->setIfExists('dtCustomerTransfersurvey', $data ?? [], null);
        $this->setIfExists('bCustomerIsactive', $data ?? [], null);
        $this->setIfExists('bCustomerVariableexpensefinanced', $data ?? [], null);
        $this->setIfExists('bCustomerVariableexpensefinancedtaxes', $data ?? [], null);
        $this->setIfExists('bCustomerSupplychargefinanced', $data ?? [], null);
        $this->setIfExists('bCustomerSupplychargefinancedtaxes', $data ?? [], null);
        $this->setIfExists('bCustomerAttendance', $data ?? [], null);
        $this->setIfExists('eCustomerType', $data ?? [], null);
        $this->setIfExists('eCustomerMarketingcorrespondence', $data ?? [], null);
        $this->setIfExists('bCustomerBlackcopycarbon', $data ?? [], null);
        $this->setIfExists('bCustomerUnsubscribeinfo', $data ?? [], null);
        $this->setIfExists('tCustomerComment', $data ?? [], null);
        $this->setIfExists('iMPORTID', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['pkiCustomerID']) && ($this->container['pkiCustomerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'pkiCustomerID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiCompanyID'] === null) {
            $invalidProperties[] = "'fkiCompanyID' can't be null";
        }
        if (($this->container['fkiCompanyID'] > 255)) {
            $invalidProperties[] = "invalid value for 'fkiCompanyID', must be smaller than or equal to 255.";
        }

        if (($this->container['fkiCompanyID'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiCompanyID', must be bigger than or equal to 1.";
        }

        if ($this->container['fkiCustomergroupID'] === null) {
            $invalidProperties[] = "'fkiCustomergroupID' can't be null";
        }
        if (($this->container['fkiCustomergroupID'] > 255)) {
            $invalidProperties[] = "invalid value for 'fkiCustomergroupID', must be smaller than or equal to 255.";
        }

        if (($this->container['fkiCustomergroupID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiCustomergroupID', must be bigger than or equal to 0.";
        }

        if ($this->container['sCustomerName'] === null) {
            $invalidProperties[] = "'sCustomerName' can't be null";
        }
	//if (!preg_match("/^.{0,50}$/", $this->container['sCustomerName'])) {
        if (!is_null($this->container['sCustomerName']) && !preg_match("/(*UTF8)^.{0,50}$/", $this->container['sCustomerName'])) {
            $invalidProperties[] = "invalid value for 'sCustomerName', must be conform to the pattern /^.{0,50}$/.";
        }

        if ($this->container['fkiContactinformationsID'] === null) {
            $invalidProperties[] = "'fkiContactinformationsID' can't be null";
        }
        if (($this->container['fkiContactinformationsID'] > 16777215)) {
            $invalidProperties[] = "invalid value for 'fkiContactinformationsID', must be smaller than or equal to 16777215.";
        }

        if (($this->container['fkiContactinformationsID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiContactinformationsID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiContactcontainerID'] === null) {
            $invalidProperties[] = "'fkiContactcontainerID' can't be null";
        }
        if (($this->container['fkiContactcontainerID'] > 16777215)) {
            $invalidProperties[] = "invalid value for 'fkiContactcontainerID', must be smaller than or equal to 16777215.";
        }

        if (($this->container['fkiContactcontainerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiContactcontainerID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiImageID'] === null) {
            $invalidProperties[] = "'fkiImageID' can't be null";
        }
        if ($this->container['fkiGlaccountcontainerID'] === null) {
            $invalidProperties[] = "'fkiGlaccountcontainerID' can't be null";
        }
        if (($this->container['fkiGlaccountcontainerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiGlaccountcontainerID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiLanguageID'] === null) {
            $invalidProperties[] = "'fkiLanguageID' can't be null";
        }
        if (($this->container['fkiLanguageID'] > 2)) {
            $invalidProperties[] = "invalid value for 'fkiLanguageID', must be smaller than or equal to 2.";
        }

        if (($this->container['fkiLanguageID'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiLanguageID', must be bigger than or equal to 1.";
        }

        if ($this->container['fkiDepartmentID'] === null) {
            $invalidProperties[] = "'fkiDepartmentID' can't be null";
        }
        if (($this->container['fkiDepartmentID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiDepartmentID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiPaymentmethodID'] === null) {
            $invalidProperties[] = "'fkiPaymentmethodID' can't be null";
        }
        if (($this->container['fkiPaymentmethodID'] > 255)) {
            $invalidProperties[] = "invalid value for 'fkiPaymentmethodID', must be smaller than or equal to 255.";
        }

        if (($this->container['fkiPaymentmethodID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiPaymentmethodID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiElectronicfundstransferbankaccountID'] === null) {
            $invalidProperties[] = "'fkiElectronicfundstransferbankaccountID' can't be null";
        }
        if (($this->container['fkiElectronicfundstransferbankaccountID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiElectronicfundstransferbankaccountID', must be smaller than or equal to 65535.";
        }

        if (($this->container['fkiElectronicfundstransferbankaccountID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiElectronicfundstransferbankaccountID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiElectronicfundstransferbankaccountIDDirectdebit'] === null) {
            $invalidProperties[] = "'fkiElectronicfundstransferbankaccountIDDirectdebit' can't be null";
        }
        if (($this->container['fkiElectronicfundstransferbankaccountIDDirectdebit'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiElectronicfundstransferbankaccountIDDirectdebit', must be smaller than or equal to 65535.";
        }

        if (($this->container['fkiElectronicfundstransferbankaccountIDDirectdebit'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiElectronicfundstransferbankaccountIDDirectdebit', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiSendingmethodID'] === null) {
            $invalidProperties[] = "'fkiSendingmethodID' can't be null";
        }
        if (($this->container['fkiSendingmethodID'] > 255)) {
            $invalidProperties[] = "invalid value for 'fkiSendingmethodID', must be smaller than or equal to 255.";
        }

        if (($this->container['fkiSendingmethodID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiSendingmethodID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiTaxassignmentID'] === null) {
            $invalidProperties[] = "'fkiTaxassignmentID' can't be null";
        }
        if (($this->container['fkiTaxassignmentID'] > 15)) {
            $invalidProperties[] = "invalid value for 'fkiTaxassignmentID', must be smaller than or equal to 15.";
        }

        if (($this->container['fkiTaxassignmentID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiTaxassignmentID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiAttendancestatusID'] === null) {
            $invalidProperties[] = "'fkiAttendancestatusID' can't be null";
        }
        if (($this->container['fkiAttendancestatusID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiAttendancestatusID', must be smaller than or equal to 65535.";
        }

        if (($this->container['fkiAttendancestatusID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiAttendancestatusID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiAgentIDVariableexpensechargeto'] === null) {
            $invalidProperties[] = "'fkiAgentIDVariableexpensechargeto' can't be null";
        }
        if (($this->container['fkiAgentIDVariableexpensechargeto'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiAgentIDVariableexpensechargeto', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiBrokerIDVariableexpensechargeto'] === null) {
            $invalidProperties[] = "'fkiBrokerIDVariableexpensechargeto' can't be null";
        }
        if (($this->container['fkiBrokerIDVariableexpensechargeto'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiBrokerIDVariableexpensechargeto', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiCustomerIDVariableexpensechargeto'] === null) {
            $invalidProperties[] = "'fkiCustomerIDVariableexpensechargeto' can't be null";
        }
        if (($this->container['fkiCustomerIDVariableexpensechargeto'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiCustomerIDVariableexpensechargeto', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiGlaccountcontainerIDVariableexpensechargeto'] === null) {
            $invalidProperties[] = "'fkiGlaccountcontainerIDVariableexpensechargeto' can't be null";
        }
        if (($this->container['fkiGlaccountcontainerIDVariableexpensechargeto'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiGlaccountcontainerIDVariableexpensechargeto', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiAgentIDSupplychargechargeto'] === null) {
            $invalidProperties[] = "'fkiAgentIDSupplychargechargeto' can't be null";
        }
        if (($this->container['fkiAgentIDSupplychargechargeto'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiAgentIDSupplychargechargeto', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiBrokerIDSupplychargechargeto'] === null) {
            $invalidProperties[] = "'fkiBrokerIDSupplychargechargeto' can't be null";
        }
        if (($this->container['fkiBrokerIDSupplychargechargeto'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiBrokerIDSupplychargechargeto', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiCustomerIDSupplychargechargeto'] === null) {
            $invalidProperties[] = "'fkiCustomerIDSupplychargechargeto' can't be null";
        }
        if (($this->container['fkiCustomerIDSupplychargechargeto'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiCustomerIDSupplychargechargeto', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiGlaccountcontainerIDSupplychargechargeto'] === null) {
            $invalidProperties[] = "'fkiGlaccountcontainerIDSupplychargechargeto' can't be null";
        }
        if (($this->container['fkiGlaccountcontainerIDSupplychargechargeto'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiGlaccountcontainerIDSupplychargechargeto', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiInvoicealternatelogoID'] === null) {
            $invalidProperties[] = "'fkiInvoicealternatelogoID' can't be null";
        }
        if (($this->container['fkiInvoicealternatelogoID'] > 255)) {
            $invalidProperties[] = "invalid value for 'fkiInvoicealternatelogoID', must be smaller than or equal to 255.";
        }

        if (($this->container['fkiInvoicealternatelogoID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiInvoicealternatelogoID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiSynchronizationlinkserverID'] === null) {
            $invalidProperties[] = "'fkiSynchronizationlinkserverID' can't be null";
        }
        if (($this->container['fkiSynchronizationlinkserverID'] > 255)) {
            $invalidProperties[] = "invalid value for 'fkiSynchronizationlinkserverID', must be smaller than or equal to 255.";
        }

        if (($this->container['fkiSynchronizationlinkserverID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiSynchronizationlinkserverID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['efkiUserID']) && ($this->container['efkiUserID'] < 0)) {
            $invalidProperties[] = "invalid value for 'efkiUserID', must be bigger than or equal to 0.";
        }

	//if (!is_null($this->container['efksCustomerCode']) && !preg_match("/^.{0,6}$/", $this->container['efksCustomerCode'])) {
        if (!is_null($this->container['efksCustomerCode']) && !preg_match("/(*UTF8)^.{0,6}$/", $this->container['efksCustomerCode'])) {
            $invalidProperties[] = "invalid value for 'efksCustomerCode', must be conform to the pattern /^.{0,6}$/.";
        }

        if ($this->container['sCustomerCode'] === null) {
            $invalidProperties[] = "'sCustomerCode' can't be null";
        }
	//if (!preg_match("/^.{0,6}$/", $this->container['sCustomerCode'])) {
        if (!is_null($this->container['sCustomerCode']) && !preg_match("/(*UTF8)^.{0,6}$/", $this->container['sCustomerCode'])) {
            $invalidProperties[] = "invalid value for 'sCustomerCode', must be conform to the pattern /^.{0,6}$/.";
        }

        if ($this->container['dCustomerFulltimeequivalent'] === null) {
            $invalidProperties[] = "'dCustomerFulltimeequivalent' can't be null";
        }
	//if (!preg_match("/^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/", $this->container['dCustomerFulltimeequivalent'])) {
        if (!is_null($this->container['dCustomerFulltimeequivalent']) && !preg_match("/(*UTF8)^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/", $this->container['dCustomerFulltimeequivalent'])) {
            $invalidProperties[] = "invalid value for 'dCustomerFulltimeequivalent', must be conform to the pattern /^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/.";
        }

        if ($this->container['iCustomerPhotocopiercode'] === null) {
            $invalidProperties[] = "'iCustomerPhotocopiercode' can't be null";
        }
        if (($this->container['iCustomerPhotocopiercode'] > 16777215)) {
            $invalidProperties[] = "invalid value for 'iCustomerPhotocopiercode', must be smaller than or equal to 16777215.";
        }

        if (($this->container['iCustomerPhotocopiercode'] < 0)) {
            $invalidProperties[] = "invalid value for 'iCustomerPhotocopiercode', must be bigger than or equal to 0.";
        }

        if ($this->container['iCustomerLongdistancecode'] === null) {
            $invalidProperties[] = "'iCustomerLongdistancecode' can't be null";
        }
        if (($this->container['iCustomerLongdistancecode'] > 16777215)) {
            $invalidProperties[] = "invalid value for 'iCustomerLongdistancecode', must be smaller than or equal to 16777215.";
        }

        if (($this->container['iCustomerLongdistancecode'] < 0)) {
            $invalidProperties[] = "invalid value for 'iCustomerLongdistancecode', must be bigger than or equal to 0.";
        }

        if ($this->container['iCustomerTimewindowstart'] === null) {
            $invalidProperties[] = "'iCustomerTimewindowstart' can't be null";
        }
        if (($this->container['iCustomerTimewindowstart'] > 255)) {
            $invalidProperties[] = "invalid value for 'iCustomerTimewindowstart', must be smaller than or equal to 255.";
        }

        if (($this->container['iCustomerTimewindowstart'] < 0)) {
            $invalidProperties[] = "invalid value for 'iCustomerTimewindowstart', must be bigger than or equal to 0.";
        }

        if ($this->container['iCustomerTimewindowend'] === null) {
            $invalidProperties[] = "'iCustomerTimewindowend' can't be null";
        }
        if (($this->container['iCustomerTimewindowend'] > 255)) {
            $invalidProperties[] = "invalid value for 'iCustomerTimewindowend', must be smaller than or equal to 255.";
        }

        if (($this->container['iCustomerTimewindowend'] < 0)) {
            $invalidProperties[] = "invalid value for 'iCustomerTimewindowend', must be bigger than or equal to 0.";
        }

        if ($this->container['dCustomerMinimumchargeableinterests'] === null) {
            $invalidProperties[] = "'dCustomerMinimumchargeableinterests' can't be null";
        }
	//if (!preg_match("/^-{0,1}[\\d]{1,9}?\\.[\\d]{2}$/", $this->container['dCustomerMinimumchargeableinterests'])) {
        if (!is_null($this->container['dCustomerMinimumchargeableinterests']) && !preg_match("/(*UTF8)^-{0,1}[\\d]{1,9}?\\.[\\d]{2}$/", $this->container['dCustomerMinimumchargeableinterests'])) {
            $invalidProperties[] = "invalid value for 'dCustomerMinimumchargeableinterests', must be conform to the pattern /^-{0,1}[\\d]{1,9}?\\.[\\d]{2}$/.";
        }

        if ($this->container['dtCustomerBirthdate'] === null) {
            $invalidProperties[] = "'dtCustomerBirthdate' can't be null";
        }
	//if (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", $this->container['dtCustomerBirthdate'])) {
        if (!is_null($this->container['dtCustomerBirthdate']) && !preg_match("/(*UTF8)^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", $this->container['dtCustomerBirthdate'])) {
            $invalidProperties[] = "invalid value for 'dtCustomerBirthdate', must be conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/.";
        }

        if ($this->container['dtCustomerTransfer'] === null) {
            $invalidProperties[] = "'dtCustomerTransfer' can't be null";
        }
	//if (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", $this->container['dtCustomerTransfer'])) {
        if (!is_null($this->container['dtCustomerTransfer']) && !preg_match("/(*UTF8)^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", $this->container['dtCustomerTransfer'])) {
            $invalidProperties[] = "invalid value for 'dtCustomerTransfer', must be conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/.";
        }

        if ($this->container['dtCustomerTransferappointment'] === null) {
            $invalidProperties[] = "'dtCustomerTransferappointment' can't be null";
        }
	//if (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", $this->container['dtCustomerTransferappointment'])) {
        if (!is_null($this->container['dtCustomerTransferappointment']) && !preg_match("/(*UTF8)^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", $this->container['dtCustomerTransferappointment'])) {
            $invalidProperties[] = "invalid value for 'dtCustomerTransferappointment', must be conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/.";
        }

        if ($this->container['dtCustomerTransfersurvey'] === null) {
            $invalidProperties[] = "'dtCustomerTransfersurvey' can't be null";
        }
	//if (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", $this->container['dtCustomerTransfersurvey'])) {
        if (!is_null($this->container['dtCustomerTransfersurvey']) && !preg_match("/(*UTF8)^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", $this->container['dtCustomerTransfersurvey'])) {
            $invalidProperties[] = "invalid value for 'dtCustomerTransfersurvey', must be conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/.";
        }

        if ($this->container['bCustomerIsactive'] === null) {
            $invalidProperties[] = "'bCustomerIsactive' can't be null";
        }
        if ($this->container['bCustomerVariableexpensefinanced'] === null) {
            $invalidProperties[] = "'bCustomerVariableexpensefinanced' can't be null";
        }
        if ($this->container['bCustomerVariableexpensefinancedtaxes'] === null) {
            $invalidProperties[] = "'bCustomerVariableexpensefinancedtaxes' can't be null";
        }
        if ($this->container['bCustomerSupplychargefinanced'] === null) {
            $invalidProperties[] = "'bCustomerSupplychargefinanced' can't be null";
        }
        if ($this->container['bCustomerSupplychargefinancedtaxes'] === null) {
            $invalidProperties[] = "'bCustomerSupplychargefinancedtaxes' can't be null";
        }
        if ($this->container['bCustomerAttendance'] === null) {
            $invalidProperties[] = "'bCustomerAttendance' can't be null";
        }
        if ($this->container['eCustomerType'] === null) {
            $invalidProperties[] = "'eCustomerType' can't be null";
        }
        if ($this->container['eCustomerMarketingcorrespondence'] === null) {
            $invalidProperties[] = "'eCustomerMarketingcorrespondence' can't be null";
        }
        if ($this->container['bCustomerBlackcopycarbon'] === null) {
            $invalidProperties[] = "'bCustomerBlackcopycarbon' can't be null";
        }
        if ($this->container['bCustomerUnsubscribeinfo'] === null) {
            $invalidProperties[] = "'bCustomerUnsubscribeinfo' can't be null";
        }
        if ($this->container['tCustomerComment'] === null) {
            $invalidProperties[] = "'tCustomerComment' can't be null";
        }
	//if (!preg_match("/^.{0,16777215}$/", $this->container['tCustomerComment'])) {
        if (!is_null($this->container['tCustomerComment']) && !preg_match("/(*UTF8)^.{0,16777215}$/", $this->container['tCustomerComment'])) {
            $invalidProperties[] = "invalid value for 'tCustomerComment', must be conform to the pattern /^.{0,16777215}$/.";
        }

	//if (!is_null($this->container['iMPORTID']) && !preg_match("/^.{0,15}$/", $this->container['iMPORTID'])) {
        if (!is_null($this->container['iMPORTID']) && !preg_match("/(*UTF8)^.{0,15}$/", $this->container['iMPORTID'])) {
            $invalidProperties[] = "invalid value for 'iMPORTID', must be conform to the pattern /^.{0,15}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pkiCustomerID
     *
     * @return int|null
     */
    public function getPkiCustomerID()
    {
	//return $this->container['pkiCustomerID'];
        return $this->container['pkiCustomerID'];
    }

    /**
     * Sets pkiCustomerID
     *
     * @param int|null $pkiCustomerID The unique ID of the Customer.
     *
     * @return self
     */
    public function setPkiCustomerID($pkiCustomerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($pkiCustomerID)) {
            //throw new \InvalidArgumentException('non-nullable pkiCustomerID cannot be null');
        //}

	//if (($pkiCustomerID < 0)) {
        if (!is_null($pkiCustomerID) && ($pkiCustomerID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $pkiCustomerID when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiCustomerID)?'null':'"'.$pkiCustomerID.'"').' for pkiCustomerID when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['pkiCustomerID'] = $pkiCustomerID;
        $this->container['pkiCustomerID'] = (is_null($pkiCustomerID) ? null : (int) $pkiCustomerID);

        return $this;
    }

    /**
     * Gets fkiCompanyID
     *
     * @return int
     */
    public function getFkiCompanyID()
    {
	//return $this->container['fkiCompanyID'];
        return $this->container['fkiCompanyID'];
    }

    /**
     * Sets fkiCompanyID
     *
     * @param int $fkiCompanyID The unique ID of the Company
     *
     * @return self
     */
    public function setFkiCompanyID($fkiCompanyID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiCompanyID)) {
            //throw new \InvalidArgumentException('non-nullable fkiCompanyID cannot be null');
        //}

	//if (($fkiCompanyID > 255)) {
        if (($fkiCompanyID > 255)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiCompanyID when calling CustomerRequest., must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiCompanyID)?'null':'"'.$fkiCompanyID.'"').' for fkiCompanyID when calling CustomerRequest., must be smaller than or equal to 255.');
        }
	//if (($fkiCompanyID < 1)) {
        if (($fkiCompanyID < 1)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiCompanyID when calling CustomerRequest., must be bigger than or equal to 1.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiCompanyID)?'null':'"'.$fkiCompanyID.'"').' for fkiCompanyID when calling CustomerRequest., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiCompanyID'] = $fkiCompanyID;
        $this->container['fkiCompanyID'] = (is_null($fkiCompanyID) ? null : (int) $fkiCompanyID);

        return $this;
    }

    /**
     * Gets fkiCustomergroupID
     *
     * @return int
     */
    public function getFkiCustomergroupID()
    {
	//return $this->container['fkiCustomergroupID'];
        return $this->container['fkiCustomergroupID'];
    }

    /**
     * Sets fkiCustomergroupID
     *
     * @param int $fkiCustomergroupID The unique ID of the Customergroup
     *
     * @return self
     */
    public function setFkiCustomergroupID($fkiCustomergroupID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiCustomergroupID)) {
            //throw new \InvalidArgumentException('non-nullable fkiCustomergroupID cannot be null');
        //}

	//if (($fkiCustomergroupID > 255)) {
        if (($fkiCustomergroupID > 255)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiCustomergroupID when calling CustomerRequest., must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiCustomergroupID)?'null':'"'.$fkiCustomergroupID.'"').' for fkiCustomergroupID when calling CustomerRequest., must be smaller than or equal to 255.');
        }
	//if (($fkiCustomergroupID < 0)) {
        if (($fkiCustomergroupID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiCustomergroupID when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiCustomergroupID)?'null':'"'.$fkiCustomergroupID.'"').' for fkiCustomergroupID when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiCustomergroupID'] = $fkiCustomergroupID;
        $this->container['fkiCustomergroupID'] = (is_null($fkiCustomergroupID) ? null : (int) $fkiCustomergroupID);

        return $this;
    }

    /**
     * Gets sCustomerName
     *
     * @return string
     */
    public function getSCustomerName()
    {
	//return $this->container['sCustomerName'];
        return is_null($this->container['sCustomerName']) ? null : trim($this->container['sCustomerName']);
    }

    /**
     * Sets sCustomerName
     *
     * @param string $sCustomerName The name of the Customer
     *
     * @return self
     */
    public function setSCustomerName($sCustomerName)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sCustomerName)) {
            //throw new \InvalidArgumentException('non-nullable sCustomerName cannot be null');
        //}

	//if ((!preg_match("/^.{0,50}$/", ObjectSerializer::toString($sCustomerName)))) {
        if (!is_null($sCustomerName) && (!preg_match("/(*UTF8)^.{0,50}$/", ObjectSerializer::toString($sCustomerName)))) {
	    //throw new \InvalidArgumentException("invalid value for \$sCustomerName when calling CustomerRequest., must conform to the pattern /^.{0,50}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($sCustomerName)?'null':'"'.$sCustomerName.'"')." for sCustomerName when calling CustomerRequest., must conform to the pattern /^.{0,50}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sCustomerName'] = $sCustomerName;
        $this->container['sCustomerName'] = (is_null($sCustomerName) ? null : trim((string) $sCustomerName));

        return $this;
    }

    /**
     * Gets fkiContactinformationsID
     *
     * @return int
     */
    public function getFkiContactinformationsID()
    {
	//return $this->container['fkiContactinformationsID'];
        return $this->container['fkiContactinformationsID'];
    }

    /**
     * Sets fkiContactinformationsID
     *
     * @param int $fkiContactinformationsID The unique ID of the Contactinformations
     *
     * @return self
     */
    public function setFkiContactinformationsID($fkiContactinformationsID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiContactinformationsID)) {
            //throw new \InvalidArgumentException('non-nullable fkiContactinformationsID cannot be null');
        //}

	//if (($fkiContactinformationsID > 16777215)) {
        if (($fkiContactinformationsID > 16777215)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiContactinformationsID when calling CustomerRequest., must be smaller than or equal to 16777215.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiContactinformationsID)?'null':'"'.$fkiContactinformationsID.'"').' for fkiContactinformationsID when calling CustomerRequest., must be smaller than or equal to 16777215.');
        }
	//if (($fkiContactinformationsID < 0)) {
        if (($fkiContactinformationsID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiContactinformationsID when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiContactinformationsID)?'null':'"'.$fkiContactinformationsID.'"').' for fkiContactinformationsID when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiContactinformationsID'] = $fkiContactinformationsID;
        $this->container['fkiContactinformationsID'] = (is_null($fkiContactinformationsID) ? null : (int) $fkiContactinformationsID);

        return $this;
    }

    /**
     * Gets fkiContactcontainerID
     *
     * @return int
     */
    public function getFkiContactcontainerID()
    {
	//return $this->container['fkiContactcontainerID'];
        return $this->container['fkiContactcontainerID'];
    }

    /**
     * Sets fkiContactcontainerID
     *
     * @param int $fkiContactcontainerID The unique ID of the Contactcontainer
     *
     * @return self
     */
    public function setFkiContactcontainerID($fkiContactcontainerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiContactcontainerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiContactcontainerID cannot be null');
        //}

	//if (($fkiContactcontainerID > 16777215)) {
        if (($fkiContactcontainerID > 16777215)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiContactcontainerID when calling CustomerRequest., must be smaller than or equal to 16777215.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiContactcontainerID)?'null':'"'.$fkiContactcontainerID.'"').' for fkiContactcontainerID when calling CustomerRequest., must be smaller than or equal to 16777215.');
        }
	//if (($fkiContactcontainerID < 0)) {
        if (($fkiContactcontainerID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiContactcontainerID when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiContactcontainerID)?'null':'"'.$fkiContactcontainerID.'"').' for fkiContactcontainerID when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiContactcontainerID'] = $fkiContactcontainerID;
        $this->container['fkiContactcontainerID'] = (is_null($fkiContactcontainerID) ? null : (int) $fkiContactcontainerID);

        return $this;
    }

    /**
     * Gets fkiImageID
     *
     * @return int
     */
    public function getFkiImageID()
    {
	//return $this->container['fkiImageID'];
        return $this->container['fkiImageID'];
    }

    /**
     * Sets fkiImageID
     *
     * @param int $fkiImageID The unique ID of the Image
     *
     * @return self
     */
    public function setFkiImageID($fkiImageID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiImageID)) {
            //throw new \InvalidArgumentException('non-nullable fkiImageID cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiImageID'] = $fkiImageID;
        $this->container['fkiImageID'] = (is_null($fkiImageID) ? null : (int) $fkiImageID);

        return $this;
    }

    /**
     * Gets fkiGlaccountcontainerID
     *
     * @return int
     */
    public function getFkiGlaccountcontainerID()
    {
	//return $this->container['fkiGlaccountcontainerID'];
        return $this->container['fkiGlaccountcontainerID'];
    }

    /**
     * Sets fkiGlaccountcontainerID
     *
     * @param int $fkiGlaccountcontainerID The unique ID of the Glaccountcontainer
     *
     * @return self
     */
    public function setFkiGlaccountcontainerID($fkiGlaccountcontainerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiGlaccountcontainerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiGlaccountcontainerID cannot be null');
        //}

	//if (($fkiGlaccountcontainerID < 0)) {
        if (($fkiGlaccountcontainerID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiGlaccountcontainerID when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiGlaccountcontainerID)?'null':'"'.$fkiGlaccountcontainerID.'"').' for fkiGlaccountcontainerID when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiGlaccountcontainerID'] = $fkiGlaccountcontainerID;
        $this->container['fkiGlaccountcontainerID'] = (is_null($fkiGlaccountcontainerID) ? null : (int) $fkiGlaccountcontainerID);

        return $this;
    }

    /**
     * Gets fkiLanguageID
     *
     * @return int
     */
    public function getFkiLanguageID()
    {
	//return $this->container['fkiLanguageID'];
        return $this->container['fkiLanguageID'];
    }

    /**
     * Sets fkiLanguageID
     *
     * @param int $fkiLanguageID The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
     *
     * @return self
     */
    public function setFkiLanguageID($fkiLanguageID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiLanguageID)) {
            //throw new \InvalidArgumentException('non-nullable fkiLanguageID cannot be null');
        //}

	//if (($fkiLanguageID > 2)) {
        if (($fkiLanguageID > 2)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiLanguageID when calling CustomerRequest., must be smaller than or equal to 2.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiLanguageID)?'null':'"'.$fkiLanguageID.'"').' for fkiLanguageID when calling CustomerRequest., must be smaller than or equal to 2.');
        }
	//if (($fkiLanguageID < 1)) {
        if (($fkiLanguageID < 1)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiLanguageID when calling CustomerRequest., must be bigger than or equal to 1.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiLanguageID)?'null':'"'.$fkiLanguageID.'"').' for fkiLanguageID when calling CustomerRequest., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiLanguageID'] = $fkiLanguageID;
        $this->container['fkiLanguageID'] = (is_null($fkiLanguageID) ? null : (int) $fkiLanguageID);

        return $this;
    }

    /**
     * Gets fkiDepartmentID
     *
     * @return int
     */
    public function getFkiDepartmentID()
    {
	//return $this->container['fkiDepartmentID'];
        return $this->container['fkiDepartmentID'];
    }

    /**
     * Sets fkiDepartmentID
     *
     * @param int $fkiDepartmentID The unique ID of the Department
     *
     * @return self
     */
    public function setFkiDepartmentID($fkiDepartmentID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiDepartmentID)) {
            //throw new \InvalidArgumentException('non-nullable fkiDepartmentID cannot be null');
        //}

	//if (($fkiDepartmentID < 0)) {
        if (($fkiDepartmentID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiDepartmentID when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiDepartmentID)?'null':'"'.$fkiDepartmentID.'"').' for fkiDepartmentID when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiDepartmentID'] = $fkiDepartmentID;
        $this->container['fkiDepartmentID'] = (is_null($fkiDepartmentID) ? null : (int) $fkiDepartmentID);

        return $this;
    }

    /**
     * Gets fkiPaymentmethodID
     *
     * @return int
     */
    public function getFkiPaymentmethodID()
    {
	//return $this->container['fkiPaymentmethodID'];
        return $this->container['fkiPaymentmethodID'];
    }

    /**
     * Sets fkiPaymentmethodID
     *
     * @param int $fkiPaymentmethodID The unique ID of the Paymentmethod
     *
     * @return self
     */
    public function setFkiPaymentmethodID($fkiPaymentmethodID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiPaymentmethodID)) {
            //throw new \InvalidArgumentException('non-nullable fkiPaymentmethodID cannot be null');
        //}

	//if (($fkiPaymentmethodID > 255)) {
        if (($fkiPaymentmethodID > 255)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiPaymentmethodID when calling CustomerRequest., must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiPaymentmethodID)?'null':'"'.$fkiPaymentmethodID.'"').' for fkiPaymentmethodID when calling CustomerRequest., must be smaller than or equal to 255.');
        }
	//if (($fkiPaymentmethodID < 0)) {
        if (($fkiPaymentmethodID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiPaymentmethodID when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiPaymentmethodID)?'null':'"'.$fkiPaymentmethodID.'"').' for fkiPaymentmethodID when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiPaymentmethodID'] = $fkiPaymentmethodID;
        $this->container['fkiPaymentmethodID'] = (is_null($fkiPaymentmethodID) ? null : (int) $fkiPaymentmethodID);

        return $this;
    }

    /**
     * Gets fkiElectronicfundstransferbankaccountID
     *
     * @return int
     */
    public function getFkiElectronicfundstransferbankaccountID()
    {
	//return $this->container['fkiElectronicfundstransferbankaccountID'];
        return $this->container['fkiElectronicfundstransferbankaccountID'];
    }

    /**
     * Sets fkiElectronicfundstransferbankaccountID
     *
     * @param int $fkiElectronicfundstransferbankaccountID The unique ID of the Electronicfundstransferbankaccount
     *
     * @return self
     */
    public function setFkiElectronicfundstransferbankaccountID($fkiElectronicfundstransferbankaccountID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiElectronicfundstransferbankaccountID)) {
            //throw new \InvalidArgumentException('non-nullable fkiElectronicfundstransferbankaccountID cannot be null');
        //}

	//if (($fkiElectronicfundstransferbankaccountID > 65535)) {
        if (($fkiElectronicfundstransferbankaccountID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiElectronicfundstransferbankaccountID when calling CustomerRequest., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiElectronicfundstransferbankaccountID)?'null':'"'.$fkiElectronicfundstransferbankaccountID.'"').' for fkiElectronicfundstransferbankaccountID when calling CustomerRequest., must be smaller than or equal to 65535.');
        }
	//if (($fkiElectronicfundstransferbankaccountID < 0)) {
        if (($fkiElectronicfundstransferbankaccountID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiElectronicfundstransferbankaccountID when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiElectronicfundstransferbankaccountID)?'null':'"'.$fkiElectronicfundstransferbankaccountID.'"').' for fkiElectronicfundstransferbankaccountID when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiElectronicfundstransferbankaccountID'] = $fkiElectronicfundstransferbankaccountID;
        $this->container['fkiElectronicfundstransferbankaccountID'] = (is_null($fkiElectronicfundstransferbankaccountID) ? null : (int) $fkiElectronicfundstransferbankaccountID);

        return $this;
    }

    /**
     * Gets fkiElectronicfundstransferbankaccountIDDirectdebit
     *
     * @return int
     */
    public function getFkiElectronicfundstransferbankaccountIDDirectdebit()
    {
	//return $this->container['fkiElectronicfundstransferbankaccountIDDirectdebit'];
        return $this->container['fkiElectronicfundstransferbankaccountIDDirectdebit'];
    }

    /**
     * Sets fkiElectronicfundstransferbankaccountIDDirectdebit
     *
     * @param int $fkiElectronicfundstransferbankaccountIDDirectdebit The unique ID of the Electronicfundstransferbankaccount
     *
     * @return self
     */
    public function setFkiElectronicfundstransferbankaccountIDDirectdebit($fkiElectronicfundstransferbankaccountIDDirectdebit)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiElectronicfundstransferbankaccountIDDirectdebit)) {
            //throw new \InvalidArgumentException('non-nullable fkiElectronicfundstransferbankaccountIDDirectdebit cannot be null');
        //}

	//if (($fkiElectronicfundstransferbankaccountIDDirectdebit > 65535)) {
        if (($fkiElectronicfundstransferbankaccountIDDirectdebit > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiElectronicfundstransferbankaccountIDDirectdebit when calling CustomerRequest., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiElectronicfundstransferbankaccountIDDirectdebit)?'null':'"'.$fkiElectronicfundstransferbankaccountIDDirectdebit.'"').' for fkiElectronicfundstransferbankaccountIDDirectdebit when calling CustomerRequest., must be smaller than or equal to 65535.');
        }
	//if (($fkiElectronicfundstransferbankaccountIDDirectdebit < 0)) {
        if (($fkiElectronicfundstransferbankaccountIDDirectdebit < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiElectronicfundstransferbankaccountIDDirectdebit when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiElectronicfundstransferbankaccountIDDirectdebit)?'null':'"'.$fkiElectronicfundstransferbankaccountIDDirectdebit.'"').' for fkiElectronicfundstransferbankaccountIDDirectdebit when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiElectronicfundstransferbankaccountIDDirectdebit'] = $fkiElectronicfundstransferbankaccountIDDirectdebit;
        $this->container['fkiElectronicfundstransferbankaccountIDDirectdebit'] = (is_null($fkiElectronicfundstransferbankaccountIDDirectdebit) ? null : (int) $fkiElectronicfundstransferbankaccountIDDirectdebit);

        return $this;
    }

    /**
     * Gets fkiSendingmethodID
     *
     * @return int
     */
    public function getFkiSendingmethodID()
    {
	//return $this->container['fkiSendingmethodID'];
        return $this->container['fkiSendingmethodID'];
    }

    /**
     * Sets fkiSendingmethodID
     *
     * @param int $fkiSendingmethodID The unique ID of the Sendingmethod
     *
     * @return self
     */
    public function setFkiSendingmethodID($fkiSendingmethodID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiSendingmethodID)) {
            //throw new \InvalidArgumentException('non-nullable fkiSendingmethodID cannot be null');
        //}

	//if (($fkiSendingmethodID > 255)) {
        if (($fkiSendingmethodID > 255)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiSendingmethodID when calling CustomerRequest., must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiSendingmethodID)?'null':'"'.$fkiSendingmethodID.'"').' for fkiSendingmethodID when calling CustomerRequest., must be smaller than or equal to 255.');
        }
	//if (($fkiSendingmethodID < 0)) {
        if (($fkiSendingmethodID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiSendingmethodID when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiSendingmethodID)?'null':'"'.$fkiSendingmethodID.'"').' for fkiSendingmethodID when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiSendingmethodID'] = $fkiSendingmethodID;
        $this->container['fkiSendingmethodID'] = (is_null($fkiSendingmethodID) ? null : (int) $fkiSendingmethodID);

        return $this;
    }

    /**
     * Gets fkiTaxassignmentID
     *
     * @return int
     */
    public function getFkiTaxassignmentID()
    {
	//return $this->container['fkiTaxassignmentID'];
        return $this->container['fkiTaxassignmentID'];
    }

    /**
     * Sets fkiTaxassignmentID
     *
     * @param int $fkiTaxassignmentID The unique ID of the Taxassignment.  Valid values:  |Value|Description| |-|-| |1|No tax| |2|GST| |3|HST (ON)| |4|HST (NB)| |5|HST (NS)| |6|HST (NL)| |7|HST (PE)| |8|GST + QST (QC)| |9|GST + QST (QC) Non-Recoverable| |10|GST + PST (BC)| |11|GST + PST (SK)| |12|GST + RST (MB)| |13|GST + PST (BC) Non-Recoverable| |14|GST + PST (SK) Non-Recoverable| |15|GST + RST (MB) Non-Recoverable|
     *
     * @return self
     */
    public function setFkiTaxassignmentID($fkiTaxassignmentID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiTaxassignmentID)) {
            //throw new \InvalidArgumentException('non-nullable fkiTaxassignmentID cannot be null');
        //}

	//if (($fkiTaxassignmentID > 15)) {
        if (($fkiTaxassignmentID > 15)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiTaxassignmentID when calling CustomerRequest., must be smaller than or equal to 15.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiTaxassignmentID)?'null':'"'.$fkiTaxassignmentID.'"').' for fkiTaxassignmentID when calling CustomerRequest., must be smaller than or equal to 15.');
        }
	//if (($fkiTaxassignmentID < 0)) {
        if (($fkiTaxassignmentID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiTaxassignmentID when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiTaxassignmentID)?'null':'"'.$fkiTaxassignmentID.'"').' for fkiTaxassignmentID when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiTaxassignmentID'] = $fkiTaxassignmentID;
        $this->container['fkiTaxassignmentID'] = (is_null($fkiTaxassignmentID) ? null : (int) $fkiTaxassignmentID);

        return $this;
    }

    /**
     * Gets fkiAttendancestatusID
     *
     * @return int
     */
    public function getFkiAttendancestatusID()
    {
	//return $this->container['fkiAttendancestatusID'];
        return $this->container['fkiAttendancestatusID'];
    }

    /**
     * Sets fkiAttendancestatusID
     *
     * @param int $fkiAttendancestatusID The unique ID of the Attendancestatus
     *
     * @return self
     */
    public function setFkiAttendancestatusID($fkiAttendancestatusID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiAttendancestatusID)) {
            //throw new \InvalidArgumentException('non-nullable fkiAttendancestatusID cannot be null');
        //}

	//if (($fkiAttendancestatusID > 65535)) {
        if (($fkiAttendancestatusID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiAttendancestatusID when calling CustomerRequest., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiAttendancestatusID)?'null':'"'.$fkiAttendancestatusID.'"').' for fkiAttendancestatusID when calling CustomerRequest., must be smaller than or equal to 65535.');
        }
	//if (($fkiAttendancestatusID < 0)) {
        if (($fkiAttendancestatusID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiAttendancestatusID when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiAttendancestatusID)?'null':'"'.$fkiAttendancestatusID.'"').' for fkiAttendancestatusID when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiAttendancestatusID'] = $fkiAttendancestatusID;
        $this->container['fkiAttendancestatusID'] = (is_null($fkiAttendancestatusID) ? null : (int) $fkiAttendancestatusID);

        return $this;
    }

    /**
     * Gets fkiAgentIDVariableexpensechargeto
     *
     * @return int
     */
    public function getFkiAgentIDVariableexpensechargeto()
    {
	//return $this->container['fkiAgentIDVariableexpensechargeto'];
        return $this->container['fkiAgentIDVariableexpensechargeto'];
    }

    /**
     * Sets fkiAgentIDVariableexpensechargeto
     *
     * @param int $fkiAgentIDVariableexpensechargeto The unique ID of the Agent.
     *
     * @return self
     */
    public function setFkiAgentIDVariableexpensechargeto($fkiAgentIDVariableexpensechargeto)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiAgentIDVariableexpensechargeto)) {
            //throw new \InvalidArgumentException('non-nullable fkiAgentIDVariableexpensechargeto cannot be null');
        //}

	//if (($fkiAgentIDVariableexpensechargeto < 0)) {
        if (($fkiAgentIDVariableexpensechargeto < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiAgentIDVariableexpensechargeto when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiAgentIDVariableexpensechargeto)?'null':'"'.$fkiAgentIDVariableexpensechargeto.'"').' for fkiAgentIDVariableexpensechargeto when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiAgentIDVariableexpensechargeto'] = $fkiAgentIDVariableexpensechargeto;
        $this->container['fkiAgentIDVariableexpensechargeto'] = (is_null($fkiAgentIDVariableexpensechargeto) ? null : (int) $fkiAgentIDVariableexpensechargeto);

        return $this;
    }

    /**
     * Gets fkiBrokerIDVariableexpensechargeto
     *
     * @return int
     */
    public function getFkiBrokerIDVariableexpensechargeto()
    {
	//return $this->container['fkiBrokerIDVariableexpensechargeto'];
        return $this->container['fkiBrokerIDVariableexpensechargeto'];
    }

    /**
     * Sets fkiBrokerIDVariableexpensechargeto
     *
     * @param int $fkiBrokerIDVariableexpensechargeto The unique ID of the Broker.
     *
     * @return self
     */
    public function setFkiBrokerIDVariableexpensechargeto($fkiBrokerIDVariableexpensechargeto)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiBrokerIDVariableexpensechargeto)) {
            //throw new \InvalidArgumentException('non-nullable fkiBrokerIDVariableexpensechargeto cannot be null');
        //}

	//if (($fkiBrokerIDVariableexpensechargeto < 0)) {
        if (($fkiBrokerIDVariableexpensechargeto < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiBrokerIDVariableexpensechargeto when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiBrokerIDVariableexpensechargeto)?'null':'"'.$fkiBrokerIDVariableexpensechargeto.'"').' for fkiBrokerIDVariableexpensechargeto when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiBrokerIDVariableexpensechargeto'] = $fkiBrokerIDVariableexpensechargeto;
        $this->container['fkiBrokerIDVariableexpensechargeto'] = (is_null($fkiBrokerIDVariableexpensechargeto) ? null : (int) $fkiBrokerIDVariableexpensechargeto);

        return $this;
    }

    /**
     * Gets fkiCustomerIDVariableexpensechargeto
     *
     * @return int
     */
    public function getFkiCustomerIDVariableexpensechargeto()
    {
	//return $this->container['fkiCustomerIDVariableexpensechargeto'];
        return $this->container['fkiCustomerIDVariableexpensechargeto'];
    }

    /**
     * Sets fkiCustomerIDVariableexpensechargeto
     *
     * @param int $fkiCustomerIDVariableexpensechargeto The unique ID of the Customer.
     *
     * @return self
     */
    public function setFkiCustomerIDVariableexpensechargeto($fkiCustomerIDVariableexpensechargeto)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiCustomerIDVariableexpensechargeto)) {
            //throw new \InvalidArgumentException('non-nullable fkiCustomerIDVariableexpensechargeto cannot be null');
        //}

	//if (($fkiCustomerIDVariableexpensechargeto < 0)) {
        if (($fkiCustomerIDVariableexpensechargeto < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiCustomerIDVariableexpensechargeto when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiCustomerIDVariableexpensechargeto)?'null':'"'.$fkiCustomerIDVariableexpensechargeto.'"').' for fkiCustomerIDVariableexpensechargeto when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiCustomerIDVariableexpensechargeto'] = $fkiCustomerIDVariableexpensechargeto;
        $this->container['fkiCustomerIDVariableexpensechargeto'] = (is_null($fkiCustomerIDVariableexpensechargeto) ? null : (int) $fkiCustomerIDVariableexpensechargeto);

        return $this;
    }

    /**
     * Gets fkiGlaccountcontainerIDVariableexpensechargeto
     *
     * @return int
     */
    public function getFkiGlaccountcontainerIDVariableexpensechargeto()
    {
	//return $this->container['fkiGlaccountcontainerIDVariableexpensechargeto'];
        return $this->container['fkiGlaccountcontainerIDVariableexpensechargeto'];
    }

    /**
     * Sets fkiGlaccountcontainerIDVariableexpensechargeto
     *
     * @param int $fkiGlaccountcontainerIDVariableexpensechargeto The unique ID of the Glaccountcontainer
     *
     * @return self
     */
    public function setFkiGlaccountcontainerIDVariableexpensechargeto($fkiGlaccountcontainerIDVariableexpensechargeto)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiGlaccountcontainerIDVariableexpensechargeto)) {
            //throw new \InvalidArgumentException('non-nullable fkiGlaccountcontainerIDVariableexpensechargeto cannot be null');
        //}

	//if (($fkiGlaccountcontainerIDVariableexpensechargeto < 0)) {
        if (($fkiGlaccountcontainerIDVariableexpensechargeto < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiGlaccountcontainerIDVariableexpensechargeto when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiGlaccountcontainerIDVariableexpensechargeto)?'null':'"'.$fkiGlaccountcontainerIDVariableexpensechargeto.'"').' for fkiGlaccountcontainerIDVariableexpensechargeto when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiGlaccountcontainerIDVariableexpensechargeto'] = $fkiGlaccountcontainerIDVariableexpensechargeto;
        $this->container['fkiGlaccountcontainerIDVariableexpensechargeto'] = (is_null($fkiGlaccountcontainerIDVariableexpensechargeto) ? null : (int) $fkiGlaccountcontainerIDVariableexpensechargeto);

        return $this;
    }

    /**
     * Gets fkiAgentIDSupplychargechargeto
     *
     * @return int
     */
    public function getFkiAgentIDSupplychargechargeto()
    {
	//return $this->container['fkiAgentIDSupplychargechargeto'];
        return $this->container['fkiAgentIDSupplychargechargeto'];
    }

    /**
     * Sets fkiAgentIDSupplychargechargeto
     *
     * @param int $fkiAgentIDSupplychargechargeto The unique ID of the Agent.
     *
     * @return self
     */
    public function setFkiAgentIDSupplychargechargeto($fkiAgentIDSupplychargechargeto)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiAgentIDSupplychargechargeto)) {
            //throw new \InvalidArgumentException('non-nullable fkiAgentIDSupplychargechargeto cannot be null');
        //}

	//if (($fkiAgentIDSupplychargechargeto < 0)) {
        if (($fkiAgentIDSupplychargechargeto < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiAgentIDSupplychargechargeto when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiAgentIDSupplychargechargeto)?'null':'"'.$fkiAgentIDSupplychargechargeto.'"').' for fkiAgentIDSupplychargechargeto when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiAgentIDSupplychargechargeto'] = $fkiAgentIDSupplychargechargeto;
        $this->container['fkiAgentIDSupplychargechargeto'] = (is_null($fkiAgentIDSupplychargechargeto) ? null : (int) $fkiAgentIDSupplychargechargeto);

        return $this;
    }

    /**
     * Gets fkiBrokerIDSupplychargechargeto
     *
     * @return int
     */
    public function getFkiBrokerIDSupplychargechargeto()
    {
	//return $this->container['fkiBrokerIDSupplychargechargeto'];
        return $this->container['fkiBrokerIDSupplychargechargeto'];
    }

    /**
     * Sets fkiBrokerIDSupplychargechargeto
     *
     * @param int $fkiBrokerIDSupplychargechargeto The unique ID of the Broker.
     *
     * @return self
     */
    public function setFkiBrokerIDSupplychargechargeto($fkiBrokerIDSupplychargechargeto)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiBrokerIDSupplychargechargeto)) {
            //throw new \InvalidArgumentException('non-nullable fkiBrokerIDSupplychargechargeto cannot be null');
        //}

	//if (($fkiBrokerIDSupplychargechargeto < 0)) {
        if (($fkiBrokerIDSupplychargechargeto < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiBrokerIDSupplychargechargeto when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiBrokerIDSupplychargechargeto)?'null':'"'.$fkiBrokerIDSupplychargechargeto.'"').' for fkiBrokerIDSupplychargechargeto when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiBrokerIDSupplychargechargeto'] = $fkiBrokerIDSupplychargechargeto;
        $this->container['fkiBrokerIDSupplychargechargeto'] = (is_null($fkiBrokerIDSupplychargechargeto) ? null : (int) $fkiBrokerIDSupplychargechargeto);

        return $this;
    }

    /**
     * Gets fkiCustomerIDSupplychargechargeto
     *
     * @return int
     */
    public function getFkiCustomerIDSupplychargechargeto()
    {
	//return $this->container['fkiCustomerIDSupplychargechargeto'];
        return $this->container['fkiCustomerIDSupplychargechargeto'];
    }

    /**
     * Sets fkiCustomerIDSupplychargechargeto
     *
     * @param int $fkiCustomerIDSupplychargechargeto The unique ID of the Customer.
     *
     * @return self
     */
    public function setFkiCustomerIDSupplychargechargeto($fkiCustomerIDSupplychargechargeto)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiCustomerIDSupplychargechargeto)) {
            //throw new \InvalidArgumentException('non-nullable fkiCustomerIDSupplychargechargeto cannot be null');
        //}

	//if (($fkiCustomerIDSupplychargechargeto < 0)) {
        if (($fkiCustomerIDSupplychargechargeto < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiCustomerIDSupplychargechargeto when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiCustomerIDSupplychargechargeto)?'null':'"'.$fkiCustomerIDSupplychargechargeto.'"').' for fkiCustomerIDSupplychargechargeto when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiCustomerIDSupplychargechargeto'] = $fkiCustomerIDSupplychargechargeto;
        $this->container['fkiCustomerIDSupplychargechargeto'] = (is_null($fkiCustomerIDSupplychargechargeto) ? null : (int) $fkiCustomerIDSupplychargechargeto);

        return $this;
    }

    /**
     * Gets fkiGlaccountcontainerIDSupplychargechargeto
     *
     * @return int
     */
    public function getFkiGlaccountcontainerIDSupplychargechargeto()
    {
	//return $this->container['fkiGlaccountcontainerIDSupplychargechargeto'];
        return $this->container['fkiGlaccountcontainerIDSupplychargechargeto'];
    }

    /**
     * Sets fkiGlaccountcontainerIDSupplychargechargeto
     *
     * @param int $fkiGlaccountcontainerIDSupplychargechargeto The unique ID of the Glaccountcontainer
     *
     * @return self
     */
    public function setFkiGlaccountcontainerIDSupplychargechargeto($fkiGlaccountcontainerIDSupplychargechargeto)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiGlaccountcontainerIDSupplychargechargeto)) {
            //throw new \InvalidArgumentException('non-nullable fkiGlaccountcontainerIDSupplychargechargeto cannot be null');
        //}

	//if (($fkiGlaccountcontainerIDSupplychargechargeto < 0)) {
        if (($fkiGlaccountcontainerIDSupplychargechargeto < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiGlaccountcontainerIDSupplychargechargeto when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiGlaccountcontainerIDSupplychargechargeto)?'null':'"'.$fkiGlaccountcontainerIDSupplychargechargeto.'"').' for fkiGlaccountcontainerIDSupplychargechargeto when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiGlaccountcontainerIDSupplychargechargeto'] = $fkiGlaccountcontainerIDSupplychargechargeto;
        $this->container['fkiGlaccountcontainerIDSupplychargechargeto'] = (is_null($fkiGlaccountcontainerIDSupplychargechargeto) ? null : (int) $fkiGlaccountcontainerIDSupplychargechargeto);

        return $this;
    }

    /**
     * Gets fkiInvoicealternatelogoID
     *
     * @return int
     */
    public function getFkiInvoicealternatelogoID()
    {
	//return $this->container['fkiInvoicealternatelogoID'];
        return $this->container['fkiInvoicealternatelogoID'];
    }

    /**
     * Sets fkiInvoicealternatelogoID
     *
     * @param int $fkiInvoicealternatelogoID The unique ID of the Invoicealternatelogo
     *
     * @return self
     */
    public function setFkiInvoicealternatelogoID($fkiInvoicealternatelogoID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiInvoicealternatelogoID)) {
            //throw new \InvalidArgumentException('non-nullable fkiInvoicealternatelogoID cannot be null');
        //}

	//if (($fkiInvoicealternatelogoID > 255)) {
        if (($fkiInvoicealternatelogoID > 255)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiInvoicealternatelogoID when calling CustomerRequest., must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiInvoicealternatelogoID)?'null':'"'.$fkiInvoicealternatelogoID.'"').' for fkiInvoicealternatelogoID when calling CustomerRequest., must be smaller than or equal to 255.');
        }
	//if (($fkiInvoicealternatelogoID < 0)) {
        if (($fkiInvoicealternatelogoID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiInvoicealternatelogoID when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiInvoicealternatelogoID)?'null':'"'.$fkiInvoicealternatelogoID.'"').' for fkiInvoicealternatelogoID when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiInvoicealternatelogoID'] = $fkiInvoicealternatelogoID;
        $this->container['fkiInvoicealternatelogoID'] = (is_null($fkiInvoicealternatelogoID) ? null : (int) $fkiInvoicealternatelogoID);

        return $this;
    }

    /**
     * Gets fkiSynchronizationlinkserverID
     *
     * @return int
     */
    public function getFkiSynchronizationlinkserverID()
    {
	//return $this->container['fkiSynchronizationlinkserverID'];
        return $this->container['fkiSynchronizationlinkserverID'];
    }

    /**
     * Sets fkiSynchronizationlinkserverID
     *
     * @param int $fkiSynchronizationlinkserverID The unique ID of the Synchronizationlinkserver
     *
     * @return self
     */
    public function setFkiSynchronizationlinkserverID($fkiSynchronizationlinkserverID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiSynchronizationlinkserverID)) {
            //throw new \InvalidArgumentException('non-nullable fkiSynchronizationlinkserverID cannot be null');
        //}

	//if (($fkiSynchronizationlinkserverID > 255)) {
        if (($fkiSynchronizationlinkserverID > 255)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiSynchronizationlinkserverID when calling CustomerRequest., must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiSynchronizationlinkserverID)?'null':'"'.$fkiSynchronizationlinkserverID.'"').' for fkiSynchronizationlinkserverID when calling CustomerRequest., must be smaller than or equal to 255.');
        }
	//if (($fkiSynchronizationlinkserverID < 0)) {
        if (($fkiSynchronizationlinkserverID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiSynchronizationlinkserverID when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiSynchronizationlinkserverID)?'null':'"'.$fkiSynchronizationlinkserverID.'"').' for fkiSynchronizationlinkserverID when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiSynchronizationlinkserverID'] = $fkiSynchronizationlinkserverID;
        $this->container['fkiSynchronizationlinkserverID'] = (is_null($fkiSynchronizationlinkserverID) ? null : (int) $fkiSynchronizationlinkserverID);

        return $this;
    }

    /**
     * Gets efkiUserID
     *
     * @return int|null
     */
    public function getEfkiUserID()
    {
	//return $this->container['efkiUserID'];
        return $this->container['efkiUserID'];
    }

    /**
     * Sets efkiUserID
     *
     * @param int|null $efkiUserID The unique ID of the User
     *
     * @return self
     */
    public function setEfkiUserID($efkiUserID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($efkiUserID)) {
            //throw new \InvalidArgumentException('non-nullable efkiUserID cannot be null');
        //}

	//if (($efkiUserID < 0)) {
        if (!is_null($efkiUserID) && ($efkiUserID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $efkiUserID when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($efkiUserID)?'null':'"'.$efkiUserID.'"').' for efkiUserID when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['efkiUserID'] = $efkiUserID;
        $this->container['efkiUserID'] = (is_null($efkiUserID) ? null : (int) $efkiUserID);

        return $this;
    }

    /**
     * Gets efksCustomerCode
     *
     * @return string|null
     */
    public function getEfksCustomerCode()
    {
	//return $this->container['efksCustomerCode'];
        return is_null($this->container['efksCustomerCode']) ? null : trim($this->container['efksCustomerCode']);
    }

    /**
     * Sets efksCustomerCode
     *
     * @param string|null $efksCustomerCode The code of the Customer
     *
     * @return self
     */
    public function setEfksCustomerCode($efksCustomerCode)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($efksCustomerCode)) {
            //throw new \InvalidArgumentException('non-nullable efksCustomerCode cannot be null');
        //}

	//if ((!preg_match("/^.{0,6}$/", ObjectSerializer::toString($efksCustomerCode)))) {
        if (!is_null($efksCustomerCode) && (!preg_match("/(*UTF8)^.{0,6}$/", ObjectSerializer::toString($efksCustomerCode)))) {
	    //throw new \InvalidArgumentException("invalid value for \$efksCustomerCode when calling CustomerRequest., must conform to the pattern /^.{0,6}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($efksCustomerCode)?'null':'"'.$efksCustomerCode.'"')." for efksCustomerCode when calling CustomerRequest., must conform to the pattern /^.{0,6}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['efksCustomerCode'] = $efksCustomerCode;
        $this->container['efksCustomerCode'] = (is_null($efksCustomerCode) ? null : trim((string) $efksCustomerCode));

        return $this;
    }

    /**
     * Gets sCustomerCode
     *
     * @return string
     */
    public function getSCustomerCode()
    {
	//return $this->container['sCustomerCode'];
        return is_null($this->container['sCustomerCode']) ? null : trim($this->container['sCustomerCode']);
    }

    /**
     * Sets sCustomerCode
     *
     * @param string $sCustomerCode The code of the Customer
     *
     * @return self
     */
    public function setSCustomerCode($sCustomerCode)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sCustomerCode)) {
            //throw new \InvalidArgumentException('non-nullable sCustomerCode cannot be null');
        //}

	//if ((!preg_match("/^.{0,6}$/", ObjectSerializer::toString($sCustomerCode)))) {
        if (!is_null($sCustomerCode) && (!preg_match("/(*UTF8)^.{0,6}$/", ObjectSerializer::toString($sCustomerCode)))) {
	    //throw new \InvalidArgumentException("invalid value for \$sCustomerCode when calling CustomerRequest., must conform to the pattern /^.{0,6}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($sCustomerCode)?'null':'"'.$sCustomerCode.'"')." for sCustomerCode when calling CustomerRequest., must conform to the pattern /^.{0,6}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sCustomerCode'] = $sCustomerCode;
        $this->container['sCustomerCode'] = (is_null($sCustomerCode) ? null : trim((string) $sCustomerCode));

        return $this;
    }

    /**
     * Gets dCustomerFulltimeequivalent
     *
     * @return string
     */
    public function getDCustomerFulltimeequivalent()
    {
	//return $this->container['dCustomerFulltimeequivalent'];
        return is_null($this->container['dCustomerFulltimeequivalent']) ? null : trim($this->container['dCustomerFulltimeequivalent']);
    }

    /**
     * Sets dCustomerFulltimeequivalent
     *
     * @param string $dCustomerFulltimeequivalent The fulltimeequivalent of the Customer
     *
     * @return self
     */
    public function setDCustomerFulltimeequivalent($dCustomerFulltimeequivalent)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dCustomerFulltimeequivalent)) {
            //throw new \InvalidArgumentException('non-nullable dCustomerFulltimeequivalent cannot be null');
        //}

	//if ((!preg_match("/^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/", ObjectSerializer::toString($dCustomerFulltimeequivalent)))) {
        if (!is_null($dCustomerFulltimeequivalent) && (!preg_match("/(*UTF8)^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/", ObjectSerializer::toString($dCustomerFulltimeequivalent)))) {
	    //throw new \InvalidArgumentException("invalid value for \$dCustomerFulltimeequivalent when calling CustomerRequest., must conform to the pattern /^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($dCustomerFulltimeequivalent)?'null':'"'.$dCustomerFulltimeequivalent.'"')." for dCustomerFulltimeequivalent when calling CustomerRequest., must conform to the pattern /^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dCustomerFulltimeequivalent'] = $dCustomerFulltimeequivalent;
        $this->container['dCustomerFulltimeequivalent'] = (is_null($dCustomerFulltimeequivalent) ? null : trim((string) $dCustomerFulltimeequivalent));

        return $this;
    }

    /**
     * Gets iCustomerPhotocopiercode
     *
     * @return int
     */
    public function getICustomerPhotocopiercode()
    {
	//return $this->container['iCustomerPhotocopiercode'];
        return $this->container['iCustomerPhotocopiercode'];
    }

    /**
     * Sets iCustomerPhotocopiercode
     *
     * @param int $iCustomerPhotocopiercode The photocopiercode of the Customer
     *
     * @return self
     */
    public function setICustomerPhotocopiercode($iCustomerPhotocopiercode)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iCustomerPhotocopiercode)) {
            //throw new \InvalidArgumentException('non-nullable iCustomerPhotocopiercode cannot be null');
        //}

	//if (($iCustomerPhotocopiercode > 16777215)) {
        if (($iCustomerPhotocopiercode > 16777215)) {
	    //throw new \InvalidArgumentException('invalid value for $iCustomerPhotocopiercode when calling CustomerRequest., must be smaller than or equal to 16777215.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iCustomerPhotocopiercode)?'null':'"'.$iCustomerPhotocopiercode.'"').' for iCustomerPhotocopiercode when calling CustomerRequest., must be smaller than or equal to 16777215.');
        }
	//if (($iCustomerPhotocopiercode < 0)) {
        if (($iCustomerPhotocopiercode < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $iCustomerPhotocopiercode when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iCustomerPhotocopiercode)?'null':'"'.$iCustomerPhotocopiercode.'"').' for iCustomerPhotocopiercode when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iCustomerPhotocopiercode'] = $iCustomerPhotocopiercode;
        $this->container['iCustomerPhotocopiercode'] = (is_null($iCustomerPhotocopiercode) ? null : (int) $iCustomerPhotocopiercode);

        return $this;
    }

    /**
     * Gets iCustomerLongdistancecode
     *
     * @return int
     */
    public function getICustomerLongdistancecode()
    {
	//return $this->container['iCustomerLongdistancecode'];
        return $this->container['iCustomerLongdistancecode'];
    }

    /**
     * Sets iCustomerLongdistancecode
     *
     * @param int $iCustomerLongdistancecode The longdistancecode of the Customer
     *
     * @return self
     */
    public function setICustomerLongdistancecode($iCustomerLongdistancecode)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iCustomerLongdistancecode)) {
            //throw new \InvalidArgumentException('non-nullable iCustomerLongdistancecode cannot be null');
        //}

	//if (($iCustomerLongdistancecode > 16777215)) {
        if (($iCustomerLongdistancecode > 16777215)) {
	    //throw new \InvalidArgumentException('invalid value for $iCustomerLongdistancecode when calling CustomerRequest., must be smaller than or equal to 16777215.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iCustomerLongdistancecode)?'null':'"'.$iCustomerLongdistancecode.'"').' for iCustomerLongdistancecode when calling CustomerRequest., must be smaller than or equal to 16777215.');
        }
	//if (($iCustomerLongdistancecode < 0)) {
        if (($iCustomerLongdistancecode < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $iCustomerLongdistancecode when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iCustomerLongdistancecode)?'null':'"'.$iCustomerLongdistancecode.'"').' for iCustomerLongdistancecode when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iCustomerLongdistancecode'] = $iCustomerLongdistancecode;
        $this->container['iCustomerLongdistancecode'] = (is_null($iCustomerLongdistancecode) ? null : (int) $iCustomerLongdistancecode);

        return $this;
    }

    /**
     * Gets iCustomerTimewindowstart
     *
     * @return int
     */
    public function getICustomerTimewindowstart()
    {
	//return $this->container['iCustomerTimewindowstart'];
        return $this->container['iCustomerTimewindowstart'];
    }

    /**
     * Sets iCustomerTimewindowstart
     *
     * @param int $iCustomerTimewindowstart The timewindowstart of the Customer
     *
     * @return self
     */
    public function setICustomerTimewindowstart($iCustomerTimewindowstart)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iCustomerTimewindowstart)) {
            //throw new \InvalidArgumentException('non-nullable iCustomerTimewindowstart cannot be null');
        //}

	//if (($iCustomerTimewindowstart > 255)) {
        if (($iCustomerTimewindowstart > 255)) {
	    //throw new \InvalidArgumentException('invalid value for $iCustomerTimewindowstart when calling CustomerRequest., must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iCustomerTimewindowstart)?'null':'"'.$iCustomerTimewindowstart.'"').' for iCustomerTimewindowstart when calling CustomerRequest., must be smaller than or equal to 255.');
        }
	//if (($iCustomerTimewindowstart < 0)) {
        if (($iCustomerTimewindowstart < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $iCustomerTimewindowstart when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iCustomerTimewindowstart)?'null':'"'.$iCustomerTimewindowstart.'"').' for iCustomerTimewindowstart when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iCustomerTimewindowstart'] = $iCustomerTimewindowstart;
        $this->container['iCustomerTimewindowstart'] = (is_null($iCustomerTimewindowstart) ? null : (int) $iCustomerTimewindowstart);

        return $this;
    }

    /**
     * Gets iCustomerTimewindowend
     *
     * @return int
     */
    public function getICustomerTimewindowend()
    {
	//return $this->container['iCustomerTimewindowend'];
        return $this->container['iCustomerTimewindowend'];
    }

    /**
     * Sets iCustomerTimewindowend
     *
     * @param int $iCustomerTimewindowend The timewindowend of the Customer
     *
     * @return self
     */
    public function setICustomerTimewindowend($iCustomerTimewindowend)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iCustomerTimewindowend)) {
            //throw new \InvalidArgumentException('non-nullable iCustomerTimewindowend cannot be null');
        //}

	//if (($iCustomerTimewindowend > 255)) {
        if (($iCustomerTimewindowend > 255)) {
	    //throw new \InvalidArgumentException('invalid value for $iCustomerTimewindowend when calling CustomerRequest., must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iCustomerTimewindowend)?'null':'"'.$iCustomerTimewindowend.'"').' for iCustomerTimewindowend when calling CustomerRequest., must be smaller than or equal to 255.');
        }
	//if (($iCustomerTimewindowend < 0)) {
        if (($iCustomerTimewindowend < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $iCustomerTimewindowend when calling CustomerRequest., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iCustomerTimewindowend)?'null':'"'.$iCustomerTimewindowend.'"').' for iCustomerTimewindowend when calling CustomerRequest., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iCustomerTimewindowend'] = $iCustomerTimewindowend;
        $this->container['iCustomerTimewindowend'] = (is_null($iCustomerTimewindowend) ? null : (int) $iCustomerTimewindowend);

        return $this;
    }

    /**
     * Gets dCustomerMinimumchargeableinterests
     *
     * @return string
     */
    public function getDCustomerMinimumchargeableinterests()
    {
	//return $this->container['dCustomerMinimumchargeableinterests'];
        return is_null($this->container['dCustomerMinimumchargeableinterests']) ? null : trim($this->container['dCustomerMinimumchargeableinterests']);
    }

    /**
     * Sets dCustomerMinimumchargeableinterests
     *
     * @param string $dCustomerMinimumchargeableinterests The minimumchargeableinterests of the Customer
     *
     * @return self
     */
    public function setDCustomerMinimumchargeableinterests($dCustomerMinimumchargeableinterests)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dCustomerMinimumchargeableinterests)) {
            //throw new \InvalidArgumentException('non-nullable dCustomerMinimumchargeableinterests cannot be null');
        //}

	//if ((!preg_match("/^-{0,1}[\\d]{1,9}?\\.[\\d]{2}$/", ObjectSerializer::toString($dCustomerMinimumchargeableinterests)))) {
        if (!is_null($dCustomerMinimumchargeableinterests) && (!preg_match("/(*UTF8)^-{0,1}[\\d]{1,9}?\\.[\\d]{2}$/", ObjectSerializer::toString($dCustomerMinimumchargeableinterests)))) {
	    //throw new \InvalidArgumentException("invalid value for \$dCustomerMinimumchargeableinterests when calling CustomerRequest., must conform to the pattern /^-{0,1}[\\d]{1,9}?\\.[\\d]{2}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($dCustomerMinimumchargeableinterests)?'null':'"'.$dCustomerMinimumchargeableinterests.'"')." for dCustomerMinimumchargeableinterests when calling CustomerRequest., must conform to the pattern /^-{0,1}[\\d]{1,9}?\\.[\\d]{2}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dCustomerMinimumchargeableinterests'] = $dCustomerMinimumchargeableinterests;
        $this->container['dCustomerMinimumchargeableinterests'] = (is_null($dCustomerMinimumchargeableinterests) ? null : trim((string) $dCustomerMinimumchargeableinterests));

        return $this;
    }

    /**
     * Gets dtCustomerBirthdate
     *
     * @return string
     */
    public function getDtCustomerBirthdate()
    {
	//return $this->container['dtCustomerBirthdate'];
        return is_null($this->container['dtCustomerBirthdate']) ? null : trim($this->container['dtCustomerBirthdate']);
    }

    /**
     * Sets dtCustomerBirthdate
     *
     * @param string $dtCustomerBirthdate The birthdate of the Customer
     *
     * @return self
     */
    public function setDtCustomerBirthdate($dtCustomerBirthdate)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtCustomerBirthdate)) {
            //throw new \InvalidArgumentException('non-nullable dtCustomerBirthdate cannot be null');
        //}

	//if ((!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", ObjectSerializer::toString($dtCustomerBirthdate)))) {
        if (!is_null($dtCustomerBirthdate) && (!preg_match("/(*UTF8)^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", ObjectSerializer::toString($dtCustomerBirthdate)))) {
	    //throw new \InvalidArgumentException("invalid value for \$dtCustomerBirthdate when calling CustomerRequest., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($dtCustomerBirthdate)?'null':'"'.$dtCustomerBirthdate.'"')." for dtCustomerBirthdate when calling CustomerRequest., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtCustomerBirthdate'] = $dtCustomerBirthdate;
        $this->container['dtCustomerBirthdate'] = (is_null($dtCustomerBirthdate) ? null : trim((string) $dtCustomerBirthdate));

        return $this;
    }

    /**
     * Gets dtCustomerTransfer
     *
     * @return string
     */
    public function getDtCustomerTransfer()
    {
	//return $this->container['dtCustomerTransfer'];
        return is_null($this->container['dtCustomerTransfer']) ? null : trim($this->container['dtCustomerTransfer']);
    }

    /**
     * Sets dtCustomerTransfer
     *
     * @param string $dtCustomerTransfer The transfer of the Customer
     *
     * @return self
     */
    public function setDtCustomerTransfer($dtCustomerTransfer)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtCustomerTransfer)) {
            //throw new \InvalidArgumentException('non-nullable dtCustomerTransfer cannot be null');
        //}

	//if ((!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", ObjectSerializer::toString($dtCustomerTransfer)))) {
        if (!is_null($dtCustomerTransfer) && (!preg_match("/(*UTF8)^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", ObjectSerializer::toString($dtCustomerTransfer)))) {
	    //throw new \InvalidArgumentException("invalid value for \$dtCustomerTransfer when calling CustomerRequest., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($dtCustomerTransfer)?'null':'"'.$dtCustomerTransfer.'"')." for dtCustomerTransfer when calling CustomerRequest., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtCustomerTransfer'] = $dtCustomerTransfer;
        $this->container['dtCustomerTransfer'] = (is_null($dtCustomerTransfer) ? null : trim((string) $dtCustomerTransfer));

        return $this;
    }

    /**
     * Gets dtCustomerTransferappointment
     *
     * @return string
     */
    public function getDtCustomerTransferappointment()
    {
	//return $this->container['dtCustomerTransferappointment'];
        return is_null($this->container['dtCustomerTransferappointment']) ? null : trim($this->container['dtCustomerTransferappointment']);
    }

    /**
     * Sets dtCustomerTransferappointment
     *
     * @param string $dtCustomerTransferappointment The transferappointment of the Customer
     *
     * @return self
     */
    public function setDtCustomerTransferappointment($dtCustomerTransferappointment)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtCustomerTransferappointment)) {
            //throw new \InvalidArgumentException('non-nullable dtCustomerTransferappointment cannot be null');
        //}

	//if ((!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", ObjectSerializer::toString($dtCustomerTransferappointment)))) {
        if (!is_null($dtCustomerTransferappointment) && (!preg_match("/(*UTF8)^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", ObjectSerializer::toString($dtCustomerTransferappointment)))) {
	    //throw new \InvalidArgumentException("invalid value for \$dtCustomerTransferappointment when calling CustomerRequest., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($dtCustomerTransferappointment)?'null':'"'.$dtCustomerTransferappointment.'"')." for dtCustomerTransferappointment when calling CustomerRequest., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtCustomerTransferappointment'] = $dtCustomerTransferappointment;
        $this->container['dtCustomerTransferappointment'] = (is_null($dtCustomerTransferappointment) ? null : trim((string) $dtCustomerTransferappointment));

        return $this;
    }

    /**
     * Gets dtCustomerTransfersurvey
     *
     * @return string
     */
    public function getDtCustomerTransfersurvey()
    {
	//return $this->container['dtCustomerTransfersurvey'];
        return is_null($this->container['dtCustomerTransfersurvey']) ? null : trim($this->container['dtCustomerTransfersurvey']);
    }

    /**
     * Sets dtCustomerTransfersurvey
     *
     * @param string $dtCustomerTransfersurvey The transfersurvey of the Customer
     *
     * @return self
     */
    public function setDtCustomerTransfersurvey($dtCustomerTransfersurvey)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtCustomerTransfersurvey)) {
            //throw new \InvalidArgumentException('non-nullable dtCustomerTransfersurvey cannot be null');
        //}

	//if ((!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", ObjectSerializer::toString($dtCustomerTransfersurvey)))) {
        if (!is_null($dtCustomerTransfersurvey) && (!preg_match("/(*UTF8)^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", ObjectSerializer::toString($dtCustomerTransfersurvey)))) {
	    //throw new \InvalidArgumentException("invalid value for \$dtCustomerTransfersurvey when calling CustomerRequest., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($dtCustomerTransfersurvey)?'null':'"'.$dtCustomerTransfersurvey.'"')." for dtCustomerTransfersurvey when calling CustomerRequest., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtCustomerTransfersurvey'] = $dtCustomerTransfersurvey;
        $this->container['dtCustomerTransfersurvey'] = (is_null($dtCustomerTransfersurvey) ? null : trim((string) $dtCustomerTransfersurvey));

        return $this;
    }

    /**
     * Gets bCustomerIsactive
     *
     * @return bool
     */
    public function getBCustomerIsactive()
    {
	//return $this->container['bCustomerIsactive'];
        return $this->container['bCustomerIsactive'];
    }

    /**
     * Sets bCustomerIsactive
     *
     * @param bool $bCustomerIsactive Whether the customer is active or not
     *
     * @return self
     */
    public function setBCustomerIsactive($bCustomerIsactive)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bCustomerIsactive)) {
            //throw new \InvalidArgumentException('non-nullable bCustomerIsactive cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bCustomerIsactive'] = $bCustomerIsactive;
        $this->container['bCustomerIsactive'] = (is_null($bCustomerIsactive) ? null : (bool) $bCustomerIsactive);

        return $this;
    }

    /**
     * Gets bCustomerVariableexpensefinanced
     *
     * @return bool
     */
    public function getBCustomerVariableexpensefinanced()
    {
	//return $this->container['bCustomerVariableexpensefinanced'];
        return $this->container['bCustomerVariableexpensefinanced'];
    }

    /**
     * Sets bCustomerVariableexpensefinanced
     *
     * @param bool $bCustomerVariableexpensefinanced Whether if it's an variableexpensefinanced
     *
     * @return self
     */
    public function setBCustomerVariableexpensefinanced($bCustomerVariableexpensefinanced)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bCustomerVariableexpensefinanced)) {
            //throw new \InvalidArgumentException('non-nullable bCustomerVariableexpensefinanced cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bCustomerVariableexpensefinanced'] = $bCustomerVariableexpensefinanced;
        $this->container['bCustomerVariableexpensefinanced'] = (is_null($bCustomerVariableexpensefinanced) ? null : (bool) $bCustomerVariableexpensefinanced);

        return $this;
    }

    /**
     * Gets bCustomerVariableexpensefinancedtaxes
     *
     * @return bool
     */
    public function getBCustomerVariableexpensefinancedtaxes()
    {
	//return $this->container['bCustomerVariableexpensefinancedtaxes'];
        return $this->container['bCustomerVariableexpensefinancedtaxes'];
    }

    /**
     * Sets bCustomerVariableexpensefinancedtaxes
     *
     * @param bool $bCustomerVariableexpensefinancedtaxes Whether if it's an variableexpensefinancedtaxes
     *
     * @return self
     */
    public function setBCustomerVariableexpensefinancedtaxes($bCustomerVariableexpensefinancedtaxes)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bCustomerVariableexpensefinancedtaxes)) {
            //throw new \InvalidArgumentException('non-nullable bCustomerVariableexpensefinancedtaxes cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bCustomerVariableexpensefinancedtaxes'] = $bCustomerVariableexpensefinancedtaxes;
        $this->container['bCustomerVariableexpensefinancedtaxes'] = (is_null($bCustomerVariableexpensefinancedtaxes) ? null : (bool) $bCustomerVariableexpensefinancedtaxes);

        return $this;
    }

    /**
     * Gets bCustomerSupplychargefinanced
     *
     * @return bool
     */
    public function getBCustomerSupplychargefinanced()
    {
	//return $this->container['bCustomerSupplychargefinanced'];
        return $this->container['bCustomerSupplychargefinanced'];
    }

    /**
     * Sets bCustomerSupplychargefinanced
     *
     * @param bool $bCustomerSupplychargefinanced Whether if it's an supplychargefinanced
     *
     * @return self
     */
    public function setBCustomerSupplychargefinanced($bCustomerSupplychargefinanced)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bCustomerSupplychargefinanced)) {
            //throw new \InvalidArgumentException('non-nullable bCustomerSupplychargefinanced cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bCustomerSupplychargefinanced'] = $bCustomerSupplychargefinanced;
        $this->container['bCustomerSupplychargefinanced'] = (is_null($bCustomerSupplychargefinanced) ? null : (bool) $bCustomerSupplychargefinanced);

        return $this;
    }

    /**
     * Gets bCustomerSupplychargefinancedtaxes
     *
     * @return bool
     */
    public function getBCustomerSupplychargefinancedtaxes()
    {
	//return $this->container['bCustomerSupplychargefinancedtaxes'];
        return $this->container['bCustomerSupplychargefinancedtaxes'];
    }

    /**
     * Sets bCustomerSupplychargefinancedtaxes
     *
     * @param bool $bCustomerSupplychargefinancedtaxes Whether if it's an supplychargefinancedtaxes
     *
     * @return self
     */
    public function setBCustomerSupplychargefinancedtaxes($bCustomerSupplychargefinancedtaxes)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bCustomerSupplychargefinancedtaxes)) {
            //throw new \InvalidArgumentException('non-nullable bCustomerSupplychargefinancedtaxes cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bCustomerSupplychargefinancedtaxes'] = $bCustomerSupplychargefinancedtaxes;
        $this->container['bCustomerSupplychargefinancedtaxes'] = (is_null($bCustomerSupplychargefinancedtaxes) ? null : (bool) $bCustomerSupplychargefinancedtaxes);

        return $this;
    }

    /**
     * Gets bCustomerAttendance
     *
     * @return bool
     */
    public function getBCustomerAttendance()
    {
	//return $this->container['bCustomerAttendance'];
        return $this->container['bCustomerAttendance'];
    }

    /**
     * Sets bCustomerAttendance
     *
     * @param bool $bCustomerAttendance Whether if it's an attendance
     *
     * @return self
     */
    public function setBCustomerAttendance($bCustomerAttendance)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bCustomerAttendance)) {
            //throw new \InvalidArgumentException('non-nullable bCustomerAttendance cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bCustomerAttendance'] = $bCustomerAttendance;
        $this->container['bCustomerAttendance'] = (is_null($bCustomerAttendance) ? null : (bool) $bCustomerAttendance);

        return $this;
    }

    /**
     * Gets eCustomerType
     *
     * @return \eZmaxAPI\Model\FieldECustomerType
     */
    public function getECustomerType()
    {
	//return $this->container['eCustomerType'];
        return $this->container['eCustomerType'];
    }

    /**
     * Sets eCustomerType
     *
     * @param \eZmaxAPI\Model\FieldECustomerType $eCustomerType eCustomerType
     *
     * @return self
     */
    public function setECustomerType($eCustomerType)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eCustomerType)) {
            //throw new \InvalidArgumentException('non-nullable eCustomerType cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eCustomerType'] = $eCustomerType;
        $this->container['eCustomerType'] = $eCustomerType;

        return $this;
    }

    /**
     * Gets eCustomerMarketingcorrespondence
     *
     * @return \eZmaxAPI\Model\FieldECustomerMarketingcorrespondence
     */
    public function getECustomerMarketingcorrespondence()
    {
	//return $this->container['eCustomerMarketingcorrespondence'];
        return $this->container['eCustomerMarketingcorrespondence'];
    }

    /**
     * Sets eCustomerMarketingcorrespondence
     *
     * @param \eZmaxAPI\Model\FieldECustomerMarketingcorrespondence $eCustomerMarketingcorrespondence eCustomerMarketingcorrespondence
     *
     * @return self
     */
    public function setECustomerMarketingcorrespondence($eCustomerMarketingcorrespondence)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eCustomerMarketingcorrespondence)) {
            //throw new \InvalidArgumentException('non-nullable eCustomerMarketingcorrespondence cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eCustomerMarketingcorrespondence'] = $eCustomerMarketingcorrespondence;
        $this->container['eCustomerMarketingcorrespondence'] = $eCustomerMarketingcorrespondence;

        return $this;
    }

    /**
     * Gets bCustomerBlackcopycarbon
     *
     * @return bool
     */
    public function getBCustomerBlackcopycarbon()
    {
	//return $this->container['bCustomerBlackcopycarbon'];
        return $this->container['bCustomerBlackcopycarbon'];
    }

    /**
     * Sets bCustomerBlackcopycarbon
     *
     * @param bool $bCustomerBlackcopycarbon Whether if it's an blackcopycarbon
     *
     * @return self
     */
    public function setBCustomerBlackcopycarbon($bCustomerBlackcopycarbon)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bCustomerBlackcopycarbon)) {
            //throw new \InvalidArgumentException('non-nullable bCustomerBlackcopycarbon cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bCustomerBlackcopycarbon'] = $bCustomerBlackcopycarbon;
        $this->container['bCustomerBlackcopycarbon'] = (is_null($bCustomerBlackcopycarbon) ? null : (bool) $bCustomerBlackcopycarbon);

        return $this;
    }

    /**
     * Gets bCustomerUnsubscribeinfo
     *
     * @return bool
     */
    public function getBCustomerUnsubscribeinfo()
    {
	//return $this->container['bCustomerUnsubscribeinfo'];
        return $this->container['bCustomerUnsubscribeinfo'];
    }

    /**
     * Sets bCustomerUnsubscribeinfo
     *
     * @param bool $bCustomerUnsubscribeinfo Whether if it's an unsubscribeinfo
     *
     * @return self
     */
    public function setBCustomerUnsubscribeinfo($bCustomerUnsubscribeinfo)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bCustomerUnsubscribeinfo)) {
            //throw new \InvalidArgumentException('non-nullable bCustomerUnsubscribeinfo cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bCustomerUnsubscribeinfo'] = $bCustomerUnsubscribeinfo;
        $this->container['bCustomerUnsubscribeinfo'] = (is_null($bCustomerUnsubscribeinfo) ? null : (bool) $bCustomerUnsubscribeinfo);

        return $this;
    }

    /**
     * Gets tCustomerComment
     *
     * @return string
     */
    public function getTCustomerComment()
    {
	//return $this->container['tCustomerComment'];
        return is_null($this->container['tCustomerComment']) ? null : trim($this->container['tCustomerComment']);
    }

    /**
     * Sets tCustomerComment
     *
     * @param string $tCustomerComment The comment of the Customer
     *
     * @return self
     */
    public function setTCustomerComment($tCustomerComment)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($tCustomerComment)) {
            //throw new \InvalidArgumentException('non-nullable tCustomerComment cannot be null');
        //}

	//if ((!preg_match("/^.{0,16777215}$/", ObjectSerializer::toString($tCustomerComment)))) {
        if (!is_null($tCustomerComment) && (!preg_match("/(*UTF8)^.{0,16777215}$/", ObjectSerializer::toString($tCustomerComment)))) {
	    //throw new \InvalidArgumentException("invalid value for \$tCustomerComment when calling CustomerRequest., must conform to the pattern /^.{0,16777215}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($tCustomerComment)?'null':'"'.$tCustomerComment.'"')." for tCustomerComment when calling CustomerRequest., must conform to the pattern /^.{0,16777215}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['tCustomerComment'] = $tCustomerComment;
        $this->container['tCustomerComment'] = (is_null($tCustomerComment) ? null : trim((string) $tCustomerComment));

        return $this;
    }

    /**
     * Gets iMPORTID
     *
     * @return string|null
     */
    public function getIMPORTID()
    {
	//return $this->container['iMPORTID'];
        return is_null($this->container['iMPORTID']) ? null : trim($this->container['iMPORTID']);
    }

    /**
     * Sets iMPORTID
     *
     * @param string|null $iMPORTID iMPORTID
     *
     * @return self
     */
    public function setIMPORTID($iMPORTID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iMPORTID)) {
            //throw new \InvalidArgumentException('non-nullable iMPORTID cannot be null');
        //}

	//if ((!preg_match("/^.{0,15}$/", ObjectSerializer::toString($iMPORTID)))) {
        if (!is_null($iMPORTID) && (!preg_match("/(*UTF8)^.{0,15}$/", ObjectSerializer::toString($iMPORTID)))) {
	    //throw new \InvalidArgumentException("invalid value for \$iMPORTID when calling CustomerRequest., must conform to the pattern /^.{0,15}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($iMPORTID)?'null':'"'.$iMPORTID.'"')." for iMPORTID when calling CustomerRequest., must conform to the pattern /^.{0,15}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iMPORTID'] = $iMPORTID;
        $this->container['iMPORTID'] = (is_null($iMPORTID) ? null : trim((string) $iMPORTID));

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


