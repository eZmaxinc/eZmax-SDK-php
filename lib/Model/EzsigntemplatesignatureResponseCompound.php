<?php
/**
 * EzsigntemplatesignatureResponseCompound
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * EzsigntemplatesignatureResponseCompound Class Doc Comment
 *
 * @category Class
 * @description A Ezsigntemplatesignature Object
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EzsigntemplatesignatureResponseCompound implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ezsigntemplatesignature-ResponseCompound';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pkiEzsigntemplatesignatureID' => 'int',
        'fkiEzsigntemplatedocumentID' => 'int',
        'fkiEzsigntemplatesignerID' => 'int',
        'fkiEzsigntemplatesignerIDValidation' => 'int',
        'iEzsigntemplatedocumentpagePagenumber' => 'int',
        'iEzsigntemplatesignatureX' => 'int',
        'iEzsigntemplatesignatureY' => 'int',
        'iEzsigntemplatesignatureWidth' => 'int',
        'iEzsigntemplatesignatureHeight' => 'int',
        'iEzsigntemplatesignatureStep' => 'int',
        'eEzsigntemplatesignatureType' => '\eZmaxAPI\Model\FieldEEzsigntemplatesignatureType',
        'tEzsigntemplatesignatureTooltip' => 'string',
        'eEzsigntemplatesignatureTooltipposition' => '\eZmaxAPI\Model\FieldEEzsigntemplatesignatureTooltipposition',
        'eEzsigntemplatesignatureFont' => '\eZmaxAPI\Model\FieldEEzsigntemplatesignatureFont',
        'iEzsigntemplatesignatureValidationstep' => 'int',
        'sEzsigntemplatesignatureAttachmentdescription' => 'string',
        'eEzsigntemplatesignatureAttachmentnamesource' => '\eZmaxAPI\Model\FieldEEzsigntemplatesignatureAttachmentnamesource',
        'bEzsigntemplatesignatureRequired' => 'bool',
        'iEzsigntemplatesignatureMaxlength' => 'int',
        'sEzsigntemplatesignatureRegexp' => 'string',
        'eEzsigntemplatesignatureTextvalidation' => '\eZmaxAPI\Model\EnumTextvalidation',
        'eEzsigntemplatesignatureDependencyrequirement' => '\eZmaxAPI\Model\FieldEEzsigntemplatesignatureDependencyrequirement',
        'bEzsigntemplatesignatureCustomdate' => 'bool',
        'aObjEzsigntemplatesignaturecustomdate' => '\eZmaxAPI\Model\EzsigntemplatesignaturecustomdateResponseCompound[]',
        'aObjEzsigntemplateelementdependency' => '\eZmaxAPI\Model\EzsigntemplateelementdependencyResponseCompound[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pkiEzsigntemplatesignatureID' => null,
        'fkiEzsigntemplatedocumentID' => null,
        'fkiEzsigntemplatesignerID' => null,
        'fkiEzsigntemplatesignerIDValidation' => null,
        'iEzsigntemplatedocumentpagePagenumber' => null,
        'iEzsigntemplatesignatureX' => null,
        'iEzsigntemplatesignatureY' => null,
        'iEzsigntemplatesignatureWidth' => null,
        'iEzsigntemplatesignatureHeight' => null,
        'iEzsigntemplatesignatureStep' => null,
        'eEzsigntemplatesignatureType' => null,
        'tEzsigntemplatesignatureTooltip' => null,
        'eEzsigntemplatesignatureTooltipposition' => null,
        'eEzsigntemplatesignatureFont' => null,
        'iEzsigntemplatesignatureValidationstep' => null,
        'sEzsigntemplatesignatureAttachmentdescription' => null,
        'eEzsigntemplatesignatureAttachmentnamesource' => null,
        'bEzsigntemplatesignatureRequired' => null,
        'iEzsigntemplatesignatureMaxlength' => null,
        'sEzsigntemplatesignatureRegexp' => null,
        'eEzsigntemplatesignatureTextvalidation' => null,
        'eEzsigntemplatesignatureDependencyrequirement' => null,
        'bEzsigntemplatesignatureCustomdate' => null,
        'aObjEzsigntemplatesignaturecustomdate' => null,
        'aObjEzsigntemplateelementdependency' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pkiEzsigntemplatesignatureID' => false,
		'fkiEzsigntemplatedocumentID' => false,
		'fkiEzsigntemplatesignerID' => false,
		'fkiEzsigntemplatesignerIDValidation' => false,
		'iEzsigntemplatedocumentpagePagenumber' => false,
		'iEzsigntemplatesignatureX' => false,
		'iEzsigntemplatesignatureY' => false,
		'iEzsigntemplatesignatureWidth' => false,
		'iEzsigntemplatesignatureHeight' => false,
		'iEzsigntemplatesignatureStep' => false,
		'eEzsigntemplatesignatureType' => false,
		'tEzsigntemplatesignatureTooltip' => false,
		'eEzsigntemplatesignatureTooltipposition' => false,
		'eEzsigntemplatesignatureFont' => false,
		'iEzsigntemplatesignatureValidationstep' => false,
		'sEzsigntemplatesignatureAttachmentdescription' => false,
		'eEzsigntemplatesignatureAttachmentnamesource' => false,
		'bEzsigntemplatesignatureRequired' => false,
		'iEzsigntemplatesignatureMaxlength' => false,
		'sEzsigntemplatesignatureRegexp' => false,
		'eEzsigntemplatesignatureTextvalidation' => false,
		'eEzsigntemplatesignatureDependencyrequirement' => false,
		'bEzsigntemplatesignatureCustomdate' => false,
		'aObjEzsigntemplatesignaturecustomdate' => false,
		'aObjEzsigntemplateelementdependency' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pkiEzsigntemplatesignatureID' => 'pkiEzsigntemplatesignatureID',
        'fkiEzsigntemplatedocumentID' => 'fkiEzsigntemplatedocumentID',
        'fkiEzsigntemplatesignerID' => 'fkiEzsigntemplatesignerID',
        'fkiEzsigntemplatesignerIDValidation' => 'fkiEzsigntemplatesignerIDValidation',
        'iEzsigntemplatedocumentpagePagenumber' => 'iEzsigntemplatedocumentpagePagenumber',
        'iEzsigntemplatesignatureX' => 'iEzsigntemplatesignatureX',
        'iEzsigntemplatesignatureY' => 'iEzsigntemplatesignatureY',
        'iEzsigntemplatesignatureWidth' => 'iEzsigntemplatesignatureWidth',
        'iEzsigntemplatesignatureHeight' => 'iEzsigntemplatesignatureHeight',
        'iEzsigntemplatesignatureStep' => 'iEzsigntemplatesignatureStep',
        'eEzsigntemplatesignatureType' => 'eEzsigntemplatesignatureType',
        'tEzsigntemplatesignatureTooltip' => 'tEzsigntemplatesignatureTooltip',
        'eEzsigntemplatesignatureTooltipposition' => 'eEzsigntemplatesignatureTooltipposition',
        'eEzsigntemplatesignatureFont' => 'eEzsigntemplatesignatureFont',
        'iEzsigntemplatesignatureValidationstep' => 'iEzsigntemplatesignatureValidationstep',
        'sEzsigntemplatesignatureAttachmentdescription' => 'sEzsigntemplatesignatureAttachmentdescription',
        'eEzsigntemplatesignatureAttachmentnamesource' => 'eEzsigntemplatesignatureAttachmentnamesource',
        'bEzsigntemplatesignatureRequired' => 'bEzsigntemplatesignatureRequired',
        'iEzsigntemplatesignatureMaxlength' => 'iEzsigntemplatesignatureMaxlength',
        'sEzsigntemplatesignatureRegexp' => 'sEzsigntemplatesignatureRegexp',
        'eEzsigntemplatesignatureTextvalidation' => 'eEzsigntemplatesignatureTextvalidation',
        'eEzsigntemplatesignatureDependencyrequirement' => 'eEzsigntemplatesignatureDependencyrequirement',
        'bEzsigntemplatesignatureCustomdate' => 'bEzsigntemplatesignatureCustomdate',
        'aObjEzsigntemplatesignaturecustomdate' => 'a_objEzsigntemplatesignaturecustomdate',
        'aObjEzsigntemplateelementdependency' => 'a_objEzsigntemplateelementdependency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pkiEzsigntemplatesignatureID' => 'setPkiEzsigntemplatesignatureID',
        'fkiEzsigntemplatedocumentID' => 'setFkiEzsigntemplatedocumentID',
        'fkiEzsigntemplatesignerID' => 'setFkiEzsigntemplatesignerID',
        'fkiEzsigntemplatesignerIDValidation' => 'setFkiEzsigntemplatesignerIDValidation',
        'iEzsigntemplatedocumentpagePagenumber' => 'setIEzsigntemplatedocumentpagePagenumber',
        'iEzsigntemplatesignatureX' => 'setIEzsigntemplatesignatureX',
        'iEzsigntemplatesignatureY' => 'setIEzsigntemplatesignatureY',
        'iEzsigntemplatesignatureWidth' => 'setIEzsigntemplatesignatureWidth',
        'iEzsigntemplatesignatureHeight' => 'setIEzsigntemplatesignatureHeight',
        'iEzsigntemplatesignatureStep' => 'setIEzsigntemplatesignatureStep',
        'eEzsigntemplatesignatureType' => 'setEEzsigntemplatesignatureType',
        'tEzsigntemplatesignatureTooltip' => 'setTEzsigntemplatesignatureTooltip',
        'eEzsigntemplatesignatureTooltipposition' => 'setEEzsigntemplatesignatureTooltipposition',
        'eEzsigntemplatesignatureFont' => 'setEEzsigntemplatesignatureFont',
        'iEzsigntemplatesignatureValidationstep' => 'setIEzsigntemplatesignatureValidationstep',
        'sEzsigntemplatesignatureAttachmentdescription' => 'setSEzsigntemplatesignatureAttachmentdescription',
        'eEzsigntemplatesignatureAttachmentnamesource' => 'setEEzsigntemplatesignatureAttachmentnamesource',
        'bEzsigntemplatesignatureRequired' => 'setBEzsigntemplatesignatureRequired',
        'iEzsigntemplatesignatureMaxlength' => 'setIEzsigntemplatesignatureMaxlength',
        'sEzsigntemplatesignatureRegexp' => 'setSEzsigntemplatesignatureRegexp',
        'eEzsigntemplatesignatureTextvalidation' => 'setEEzsigntemplatesignatureTextvalidation',
        'eEzsigntemplatesignatureDependencyrequirement' => 'setEEzsigntemplatesignatureDependencyrequirement',
        'bEzsigntemplatesignatureCustomdate' => 'setBEzsigntemplatesignatureCustomdate',
        'aObjEzsigntemplatesignaturecustomdate' => 'setAObjEzsigntemplatesignaturecustomdate',
        'aObjEzsigntemplateelementdependency' => 'setAObjEzsigntemplateelementdependency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pkiEzsigntemplatesignatureID' => 'getPkiEzsigntemplatesignatureID',
        'fkiEzsigntemplatedocumentID' => 'getFkiEzsigntemplatedocumentID',
        'fkiEzsigntemplatesignerID' => 'getFkiEzsigntemplatesignerID',
        'fkiEzsigntemplatesignerIDValidation' => 'getFkiEzsigntemplatesignerIDValidation',
        'iEzsigntemplatedocumentpagePagenumber' => 'getIEzsigntemplatedocumentpagePagenumber',
        'iEzsigntemplatesignatureX' => 'getIEzsigntemplatesignatureX',
        'iEzsigntemplatesignatureY' => 'getIEzsigntemplatesignatureY',
        'iEzsigntemplatesignatureWidth' => 'getIEzsigntemplatesignatureWidth',
        'iEzsigntemplatesignatureHeight' => 'getIEzsigntemplatesignatureHeight',
        'iEzsigntemplatesignatureStep' => 'getIEzsigntemplatesignatureStep',
        'eEzsigntemplatesignatureType' => 'getEEzsigntemplatesignatureType',
        'tEzsigntemplatesignatureTooltip' => 'getTEzsigntemplatesignatureTooltip',
        'eEzsigntemplatesignatureTooltipposition' => 'getEEzsigntemplatesignatureTooltipposition',
        'eEzsigntemplatesignatureFont' => 'getEEzsigntemplatesignatureFont',
        'iEzsigntemplatesignatureValidationstep' => 'getIEzsigntemplatesignatureValidationstep',
        'sEzsigntemplatesignatureAttachmentdescription' => 'getSEzsigntemplatesignatureAttachmentdescription',
        'eEzsigntemplatesignatureAttachmentnamesource' => 'getEEzsigntemplatesignatureAttachmentnamesource',
        'bEzsigntemplatesignatureRequired' => 'getBEzsigntemplatesignatureRequired',
        'iEzsigntemplatesignatureMaxlength' => 'getIEzsigntemplatesignatureMaxlength',
        'sEzsigntemplatesignatureRegexp' => 'getSEzsigntemplatesignatureRegexp',
        'eEzsigntemplatesignatureTextvalidation' => 'getEEzsigntemplatesignatureTextvalidation',
        'eEzsigntemplatesignatureDependencyrequirement' => 'getEEzsigntemplatesignatureDependencyrequirement',
        'bEzsigntemplatesignatureCustomdate' => 'getBEzsigntemplatesignatureCustomdate',
        'aObjEzsigntemplatesignaturecustomdate' => 'getAObjEzsigntemplatesignaturecustomdate',
        'aObjEzsigntemplateelementdependency' => 'getAObjEzsigntemplateelementdependency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pkiEzsigntemplatesignatureID', $data ?? [], null);
        $this->setIfExists('fkiEzsigntemplatedocumentID', $data ?? [], null);
        $this->setIfExists('fkiEzsigntemplatesignerID', $data ?? [], null);
        $this->setIfExists('fkiEzsigntemplatesignerIDValidation', $data ?? [], null);
        $this->setIfExists('iEzsigntemplatedocumentpagePagenumber', $data ?? [], null);
        $this->setIfExists('iEzsigntemplatesignatureX', $data ?? [], null);
        $this->setIfExists('iEzsigntemplatesignatureY', $data ?? [], null);
        $this->setIfExists('iEzsigntemplatesignatureWidth', $data ?? [], null);
        $this->setIfExists('iEzsigntemplatesignatureHeight', $data ?? [], null);
        $this->setIfExists('iEzsigntemplatesignatureStep', $data ?? [], null);
        $this->setIfExists('eEzsigntemplatesignatureType', $data ?? [], null);
        $this->setIfExists('tEzsigntemplatesignatureTooltip', $data ?? [], null);
        $this->setIfExists('eEzsigntemplatesignatureTooltipposition', $data ?? [], null);
        $this->setIfExists('eEzsigntemplatesignatureFont', $data ?? [], null);
        $this->setIfExists('iEzsigntemplatesignatureValidationstep', $data ?? [], null);
        $this->setIfExists('sEzsigntemplatesignatureAttachmentdescription', $data ?? [], null);
        $this->setIfExists('eEzsigntemplatesignatureAttachmentnamesource', $data ?? [], null);
        $this->setIfExists('bEzsigntemplatesignatureRequired', $data ?? [], null);
        $this->setIfExists('iEzsigntemplatesignatureMaxlength', $data ?? [], null);
        $this->setIfExists('sEzsigntemplatesignatureRegexp', $data ?? [], null);
        $this->setIfExists('eEzsigntemplatesignatureTextvalidation', $data ?? [], null);
        $this->setIfExists('eEzsigntemplatesignatureDependencyrequirement', $data ?? [], null);
        $this->setIfExists('bEzsigntemplatesignatureCustomdate', $data ?? [], null);
        $this->setIfExists('aObjEzsigntemplatesignaturecustomdate', $data ?? [], null);
        $this->setIfExists('aObjEzsigntemplateelementdependency', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pkiEzsigntemplatesignatureID'] === null) {
            $invalidProperties[] = "'pkiEzsigntemplatesignatureID' can't be null";
        }
        if (($this->container['pkiEzsigntemplatesignatureID'] < 0)) {
            $invalidProperties[] = "invalid value for 'pkiEzsigntemplatesignatureID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiEzsigntemplatedocumentID'] === null) {
            $invalidProperties[] = "'fkiEzsigntemplatedocumentID' can't be null";
        }
        if (($this->container['fkiEzsigntemplatedocumentID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzsigntemplatedocumentID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiEzsigntemplatesignerID'] === null) {
            $invalidProperties[] = "'fkiEzsigntemplatesignerID' can't be null";
        }
        if (($this->container['fkiEzsigntemplatesignerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzsigntemplatesignerID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzsigntemplatesignerIDValidation']) && ($this->container['fkiEzsigntemplatesignerIDValidation'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzsigntemplatesignerIDValidation', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzsigntemplatedocumentpagePagenumber'] === null) {
            $invalidProperties[] = "'iEzsigntemplatedocumentpagePagenumber' can't be null";
        }
        if (($this->container['iEzsigntemplatedocumentpagePagenumber'] < 1)) {
            $invalidProperties[] = "invalid value for 'iEzsigntemplatedocumentpagePagenumber', must be bigger than or equal to 1.";
        }

        if ($this->container['iEzsigntemplatesignatureX'] === null) {
            $invalidProperties[] = "'iEzsigntemplatesignatureX' can't be null";
        }
        if (($this->container['iEzsigntemplatesignatureX'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzsigntemplatesignatureX', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzsigntemplatesignatureY'] === null) {
            $invalidProperties[] = "'iEzsigntemplatesignatureY' can't be null";
        }
        if (($this->container['iEzsigntemplatesignatureY'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzsigntemplatesignatureY', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['iEzsigntemplatesignatureWidth']) && ($this->container['iEzsigntemplatesignatureWidth'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzsigntemplatesignatureWidth', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['iEzsigntemplatesignatureHeight']) && ($this->container['iEzsigntemplatesignatureHeight'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzsigntemplatesignatureHeight', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzsigntemplatesignatureStep'] === null) {
            $invalidProperties[] = "'iEzsigntemplatesignatureStep' can't be null";
        }
        if (($this->container['iEzsigntemplatesignatureStep'] < 1)) {
            $invalidProperties[] = "invalid value for 'iEzsigntemplatesignatureStep', must be bigger than or equal to 1.";
        }

        if ($this->container['eEzsigntemplatesignatureType'] === null) {
            $invalidProperties[] = "'eEzsigntemplatesignatureType' can't be null";
        }
        if (!is_null($this->container['iEzsigntemplatesignatureMaxlength']) && ($this->container['iEzsigntemplatesignatureMaxlength'] > 65535)) {
            $invalidProperties[] = "invalid value for 'iEzsigntemplatesignatureMaxlength', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['iEzsigntemplatesignatureMaxlength']) && ($this->container['iEzsigntemplatesignatureMaxlength'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzsigntemplatesignatureMaxlength', must be bigger than or equal to 0.";
        }

//        if (!is_null($this->container['sEzsigntemplatesignatureRegexp']) && !preg_match("/^\\^.*\\$$|^$/", $this->container['sEzsigntemplatesignatureRegexp'])) {
        if (!is_null($this->container['sEzsigntemplatesignatureRegexp']) && !preg_match("/^\\^.*\\$$|^$/", $this->container['sEzsigntemplatesignatureRegexp'])) {
            $invalidProperties[] = "invalid value for 'sEzsigntemplatesignatureRegexp', must be conform to the pattern /^\\^.*\\$$|^$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pkiEzsigntemplatesignatureID
     *
     * @return int
     */
    public function getPkiEzsigntemplatesignatureID()
    {
        return $this->container['pkiEzsigntemplatesignatureID'];
    }

    /**
     * Sets pkiEzsigntemplatesignatureID
     *
     * @param int $pkiEzsigntemplatesignatureID The unique ID of the Ezsigntemplatesignature
     *
     * @return self
     */
    public function setPkiEzsigntemplatesignatureID($pkiEzsigntemplatesignatureID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($pkiEzsigntemplatesignatureID)) {
            //throw new \InvalidArgumentException('non-nullable pkiEzsigntemplatesignatureID cannot be null');
        //}

//        if (($pkiEzsigntemplatesignatureID < 0)) {
        if (($pkiEzsigntemplatesignatureID < 0)) {
            throw new \InvalidArgumentException('invalid value for $pkiEzsigntemplatesignatureID when calling EzsigntemplatesignatureResponseCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['pkiEzsigntemplatesignatureID'] = $pkiEzsigntemplatesignatureID;
        $this->container['pkiEzsigntemplatesignatureID'] = (is_null($pkiEzsigntemplatesignatureID) ? null : (int) $pkiEzsigntemplatesignatureID);

        return $this;
    }

    /**
     * Gets fkiEzsigntemplatedocumentID
     *
     * @return int
     */
    public function getFkiEzsigntemplatedocumentID()
    {
        return $this->container['fkiEzsigntemplatedocumentID'];
    }

    /**
     * Sets fkiEzsigntemplatedocumentID
     *
     * @param int $fkiEzsigntemplatedocumentID The unique ID of the Ezsigntemplatedocument
     *
     * @return self
     */
    public function setFkiEzsigntemplatedocumentID($fkiEzsigntemplatedocumentID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzsigntemplatedocumentID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzsigntemplatedocumentID cannot be null');
        //}

//        if (($fkiEzsigntemplatedocumentID < 0)) {
        if (($fkiEzsigntemplatedocumentID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiEzsigntemplatedocumentID when calling EzsigntemplatesignatureResponseCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzsigntemplatedocumentID'] = $fkiEzsigntemplatedocumentID;
        $this->container['fkiEzsigntemplatedocumentID'] = (is_null($fkiEzsigntemplatedocumentID) ? null : (int) $fkiEzsigntemplatedocumentID);

        return $this;
    }

    /**
     * Gets fkiEzsigntemplatesignerID
     *
     * @return int
     */
    public function getFkiEzsigntemplatesignerID()
    {
        return $this->container['fkiEzsigntemplatesignerID'];
    }

    /**
     * Sets fkiEzsigntemplatesignerID
     *
     * @param int $fkiEzsigntemplatesignerID The unique ID of the Ezsigntemplatesigner
     *
     * @return self
     */
    public function setFkiEzsigntemplatesignerID($fkiEzsigntemplatesignerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzsigntemplatesignerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzsigntemplatesignerID cannot be null');
        //}

//        if (($fkiEzsigntemplatesignerID < 0)) {
        if (($fkiEzsigntemplatesignerID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiEzsigntemplatesignerID when calling EzsigntemplatesignatureResponseCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzsigntemplatesignerID'] = $fkiEzsigntemplatesignerID;
        $this->container['fkiEzsigntemplatesignerID'] = (is_null($fkiEzsigntemplatesignerID) ? null : (int) $fkiEzsigntemplatesignerID);

        return $this;
    }

    /**
     * Gets fkiEzsigntemplatesignerIDValidation
     *
     * @return int|null
     */
    public function getFkiEzsigntemplatesignerIDValidation()
    {
        return $this->container['fkiEzsigntemplatesignerIDValidation'];
    }

    /**
     * Sets fkiEzsigntemplatesignerIDValidation
     *
     * @param int|null $fkiEzsigntemplatesignerIDValidation The unique ID of the Ezsigntemplatesigner
     *
     * @return self
     */
    public function setFkiEzsigntemplatesignerIDValidation($fkiEzsigntemplatesignerIDValidation)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzsigntemplatesignerIDValidation)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzsigntemplatesignerIDValidation cannot be null');
        //}

//        if (($fkiEzsigntemplatesignerIDValidation < 0)) {
        if (!is_null($fkiEzsigntemplatesignerIDValidation) && ($fkiEzsigntemplatesignerIDValidation < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiEzsigntemplatesignerIDValidation when calling EzsigntemplatesignatureResponseCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzsigntemplatesignerIDValidation'] = $fkiEzsigntemplatesignerIDValidation;
        $this->container['fkiEzsigntemplatesignerIDValidation'] = (is_null($fkiEzsigntemplatesignerIDValidation) ? null : (int) $fkiEzsigntemplatesignerIDValidation);

        return $this;
    }

    /**
     * Gets iEzsigntemplatedocumentpagePagenumber
     *
     * @return int
     */
    public function getIEzsigntemplatedocumentpagePagenumber()
    {
        return $this->container['iEzsigntemplatedocumentpagePagenumber'];
    }

    /**
     * Sets iEzsigntemplatedocumentpagePagenumber
     *
     * @param int $iEzsigntemplatedocumentpagePagenumber The page number in the Ezsigntemplatedocument
     *
     * @return self
     */
    public function setIEzsigntemplatedocumentpagePagenumber($iEzsigntemplatedocumentpagePagenumber)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigntemplatedocumentpagePagenumber)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigntemplatedocumentpagePagenumber cannot be null');
        //}

//        if (($iEzsigntemplatedocumentpagePagenumber < 1)) {
        if (($iEzsigntemplatedocumentpagePagenumber < 1)) {
            throw new \InvalidArgumentException('invalid value for $iEzsigntemplatedocumentpagePagenumber when calling EzsigntemplatesignatureResponseCompound., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigntemplatedocumentpagePagenumber'] = $iEzsigntemplatedocumentpagePagenumber;
        $this->container['iEzsigntemplatedocumentpagePagenumber'] = (is_null($iEzsigntemplatedocumentpagePagenumber) ? null : (int) $iEzsigntemplatedocumentpagePagenumber);

        return $this;
    }

    /**
     * Gets iEzsigntemplatesignatureX
     *
     * @return int
     */
    public function getIEzsigntemplatesignatureX()
    {
        return $this->container['iEzsigntemplatesignatureX'];
    }

    /**
     * Sets iEzsigntemplatesignatureX
     *
     * @param int $iEzsigntemplatesignatureX The X coordinate (Horizontal) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 2 inches from the left border of the page, you would use \"200\" for the X coordinate.
     *
     * @return self
     */
    public function setIEzsigntemplatesignatureX($iEzsigntemplatesignatureX)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigntemplatesignatureX)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigntemplatesignatureX cannot be null');
        //}

//        if (($iEzsigntemplatesignatureX < 0)) {
        if (($iEzsigntemplatesignatureX < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzsigntemplatesignatureX when calling EzsigntemplatesignatureResponseCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigntemplatesignatureX'] = $iEzsigntemplatesignatureX;
        $this->container['iEzsigntemplatesignatureX'] = (is_null($iEzsigntemplatesignatureX) ? null : (int) $iEzsigntemplatesignatureX);

        return $this;
    }

    /**
     * Gets iEzsigntemplatesignatureY
     *
     * @return int
     */
    public function getIEzsigntemplatesignatureY()
    {
        return $this->container['iEzsigntemplatesignatureY'];
    }

    /**
     * Sets iEzsigntemplatesignatureY
     *
     * @param int $iEzsigntemplatesignatureY The Y coordinate (Vertical) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.
     *
     * @return self
     */
    public function setIEzsigntemplatesignatureY($iEzsigntemplatesignatureY)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigntemplatesignatureY)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigntemplatesignatureY cannot be null');
        //}

//        if (($iEzsigntemplatesignatureY < 0)) {
        if (($iEzsigntemplatesignatureY < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzsigntemplatesignatureY when calling EzsigntemplatesignatureResponseCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigntemplatesignatureY'] = $iEzsigntemplatesignatureY;
        $this->container['iEzsigntemplatesignatureY'] = (is_null($iEzsigntemplatesignatureY) ? null : (int) $iEzsigntemplatesignatureY);

        return $this;
    }

    /**
     * Gets iEzsigntemplatesignatureWidth
     *
     * @return int|null
     */
    public function getIEzsigntemplatesignatureWidth()
    {
        return $this->container['iEzsigntemplatesignatureWidth'];
    }

    /**
     * Sets iEzsigntemplatesignatureWidth
     *
     * @param int|null $iEzsigntemplatesignatureWidth The width of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have a width of 2 inches, you would use \"200\" for the iEzsigntemplatesignatureWidth.
     *
     * @return self
     */
    public function setIEzsigntemplatesignatureWidth($iEzsigntemplatesignatureWidth)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigntemplatesignatureWidth)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigntemplatesignatureWidth cannot be null');
        //}

//        if (($iEzsigntemplatesignatureWidth < 0)) {
        if (!is_null($iEzsigntemplatesignatureWidth) && ($iEzsigntemplatesignatureWidth < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzsigntemplatesignatureWidth when calling EzsigntemplatesignatureResponseCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigntemplatesignatureWidth'] = $iEzsigntemplatesignatureWidth;
        $this->container['iEzsigntemplatesignatureWidth'] = (is_null($iEzsigntemplatesignatureWidth) ? null : (int) $iEzsigntemplatesignatureWidth);

        return $this;
    }

    /**
     * Gets iEzsigntemplatesignatureHeight
     *
     * @return int|null
     */
    public function getIEzsigntemplatesignatureHeight()
    {
        return $this->container['iEzsigntemplatesignatureHeight'];
    }

    /**
     * Sets iEzsigntemplatesignatureHeight
     *
     * @param int|null $iEzsigntemplatesignatureHeight The height of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have an height of 2 inches, you would use \"200\" for the iEzsigntemplatesignatureHeight.
     *
     * @return self
     */
    public function setIEzsigntemplatesignatureHeight($iEzsigntemplatesignatureHeight)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigntemplatesignatureHeight)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigntemplatesignatureHeight cannot be null');
        //}

//        if (($iEzsigntemplatesignatureHeight < 0)) {
        if (!is_null($iEzsigntemplatesignatureHeight) && ($iEzsigntemplatesignatureHeight < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzsigntemplatesignatureHeight when calling EzsigntemplatesignatureResponseCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigntemplatesignatureHeight'] = $iEzsigntemplatesignatureHeight;
        $this->container['iEzsigntemplatesignatureHeight'] = (is_null($iEzsigntemplatesignatureHeight) ? null : (int) $iEzsigntemplatesignatureHeight);

        return $this;
    }

    /**
     * Gets iEzsigntemplatesignatureStep
     *
     * @return int
     */
    public function getIEzsigntemplatesignatureStep()
    {
        return $this->container['iEzsigntemplatesignatureStep'];
    }

    /**
     * Sets iEzsigntemplatesignatureStep
     *
     * @param int $iEzsigntemplatesignatureStep The step when the Ezsigntemplatesigner will be invited to sign
     *
     * @return self
     */
    public function setIEzsigntemplatesignatureStep($iEzsigntemplatesignatureStep)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigntemplatesignatureStep)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigntemplatesignatureStep cannot be null');
        //}

//        if (($iEzsigntemplatesignatureStep < 1)) {
        if (($iEzsigntemplatesignatureStep < 1)) {
            throw new \InvalidArgumentException('invalid value for $iEzsigntemplatesignatureStep when calling EzsigntemplatesignatureResponseCompound., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigntemplatesignatureStep'] = $iEzsigntemplatesignatureStep;
        $this->container['iEzsigntemplatesignatureStep'] = (is_null($iEzsigntemplatesignatureStep) ? null : (int) $iEzsigntemplatesignatureStep);

        return $this;
    }

    /**
     * Gets eEzsigntemplatesignatureType
     *
     * @return \eZmaxAPI\Model\FieldEEzsigntemplatesignatureType
     */
    public function getEEzsigntemplatesignatureType()
    {
        return $this->container['eEzsigntemplatesignatureType'];
    }

    /**
     * Sets eEzsigntemplatesignatureType
     *
     * @param \eZmaxAPI\Model\FieldEEzsigntemplatesignatureType $eEzsigntemplatesignatureType eEzsigntemplatesignatureType
     *
     * @return self
     */
    public function setEEzsigntemplatesignatureType($eEzsigntemplatesignatureType)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eEzsigntemplatesignatureType)) {
            //throw new \InvalidArgumentException('non-nullable eEzsigntemplatesignatureType cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eEzsigntemplatesignatureType'] = $eEzsigntemplatesignatureType;
        $this->container['eEzsigntemplatesignatureType'] = $eEzsigntemplatesignatureType;

        return $this;
    }

    /**
     * Gets tEzsigntemplatesignatureTooltip
     *
     * @return string|null
     */
    public function getTEzsigntemplatesignatureTooltip()
    {
        return $this->container['tEzsigntemplatesignatureTooltip'];
    }

    /**
     * Sets tEzsigntemplatesignatureTooltip
     *
     * @param string|null $tEzsigntemplatesignatureTooltip A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplatesignature
     *
     * @return self
     */
    public function setTEzsigntemplatesignatureTooltip($tEzsigntemplatesignatureTooltip)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($tEzsigntemplatesignatureTooltip)) {
            //throw new \InvalidArgumentException('non-nullable tEzsigntemplatesignatureTooltip cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['tEzsigntemplatesignatureTooltip'] = $tEzsigntemplatesignatureTooltip;
        $this->container['tEzsigntemplatesignatureTooltip'] = (is_null($tEzsigntemplatesignatureTooltip) ? null : (string) $tEzsigntemplatesignatureTooltip);

        return $this;
    }

    /**
     * Gets eEzsigntemplatesignatureTooltipposition
     *
     * @return \eZmaxAPI\Model\FieldEEzsigntemplatesignatureTooltipposition|null
     */
    public function getEEzsigntemplatesignatureTooltipposition()
    {
        return $this->container['eEzsigntemplatesignatureTooltipposition'];
    }

    /**
     * Sets eEzsigntemplatesignatureTooltipposition
     *
     * @param \eZmaxAPI\Model\FieldEEzsigntemplatesignatureTooltipposition|null $eEzsigntemplatesignatureTooltipposition eEzsigntemplatesignatureTooltipposition
     *
     * @return self
     */
    public function setEEzsigntemplatesignatureTooltipposition($eEzsigntemplatesignatureTooltipposition)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eEzsigntemplatesignatureTooltipposition)) {
            //throw new \InvalidArgumentException('non-nullable eEzsigntemplatesignatureTooltipposition cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eEzsigntemplatesignatureTooltipposition'] = $eEzsigntemplatesignatureTooltipposition;
        $this->container['eEzsigntemplatesignatureTooltipposition'] = $eEzsigntemplatesignatureTooltipposition;

        return $this;
    }

    /**
     * Gets eEzsigntemplatesignatureFont
     *
     * @return \eZmaxAPI\Model\FieldEEzsigntemplatesignatureFont|null
     */
    public function getEEzsigntemplatesignatureFont()
    {
        return $this->container['eEzsigntemplatesignatureFont'];
    }

    /**
     * Sets eEzsigntemplatesignatureFont
     *
     * @param \eZmaxAPI\Model\FieldEEzsigntemplatesignatureFont|null $eEzsigntemplatesignatureFont eEzsigntemplatesignatureFont
     *
     * @return self
     */
    public function setEEzsigntemplatesignatureFont($eEzsigntemplatesignatureFont)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eEzsigntemplatesignatureFont)) {
            //throw new \InvalidArgumentException('non-nullable eEzsigntemplatesignatureFont cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eEzsigntemplatesignatureFont'] = $eEzsigntemplatesignatureFont;
        $this->container['eEzsigntemplatesignatureFont'] = $eEzsigntemplatesignatureFont;

        return $this;
    }

    /**
     * Gets iEzsigntemplatesignatureValidationstep
     *
     * @return int|null
     */
    public function getIEzsigntemplatesignatureValidationstep()
    {
        return $this->container['iEzsigntemplatesignatureValidationstep'];
    }

    /**
     * Sets iEzsigntemplatesignatureValidationstep
     *
     * @param int|null $iEzsigntemplatesignatureValidationstep The step when the Ezsigntemplatesigner will be invited to validate the Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
     *
     * @return self
     */
    public function setIEzsigntemplatesignatureValidationstep($iEzsigntemplatesignatureValidationstep)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigntemplatesignatureValidationstep)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigntemplatesignatureValidationstep cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigntemplatesignatureValidationstep'] = $iEzsigntemplatesignatureValidationstep;
        $this->container['iEzsigntemplatesignatureValidationstep'] = (is_null($iEzsigntemplatesignatureValidationstep) ? null : (int) $iEzsigntemplatesignatureValidationstep);

        return $this;
    }

    /**
     * Gets sEzsigntemplatesignatureAttachmentdescription
     *
     * @return string|null
     */
    public function getSEzsigntemplatesignatureAttachmentdescription()
    {
        return $this->container['sEzsigntemplatesignatureAttachmentdescription'];
    }

    /**
     * Sets sEzsigntemplatesignatureAttachmentdescription
     *
     * @param string|null $sEzsigntemplatesignatureAttachmentdescription The description attached to the attachment name added in Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
     *
     * @return self
     */
    public function setSEzsigntemplatesignatureAttachmentdescription($sEzsigntemplatesignatureAttachmentdescription)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sEzsigntemplatesignatureAttachmentdescription)) {
            //throw new \InvalidArgumentException('non-nullable sEzsigntemplatesignatureAttachmentdescription cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sEzsigntemplatesignatureAttachmentdescription'] = $sEzsigntemplatesignatureAttachmentdescription;
        $this->container['sEzsigntemplatesignatureAttachmentdescription'] = (is_null($sEzsigntemplatesignatureAttachmentdescription) ? null : (string) $sEzsigntemplatesignatureAttachmentdescription);

        return $this;
    }

    /**
     * Gets eEzsigntemplatesignatureAttachmentnamesource
     *
     * @return \eZmaxAPI\Model\FieldEEzsigntemplatesignatureAttachmentnamesource|null
     */
    public function getEEzsigntemplatesignatureAttachmentnamesource()
    {
        return $this->container['eEzsigntemplatesignatureAttachmentnamesource'];
    }

    /**
     * Sets eEzsigntemplatesignatureAttachmentnamesource
     *
     * @param \eZmaxAPI\Model\FieldEEzsigntemplatesignatureAttachmentnamesource|null $eEzsigntemplatesignatureAttachmentnamesource eEzsigntemplatesignatureAttachmentnamesource
     *
     * @return self
     */
    public function setEEzsigntemplatesignatureAttachmentnamesource($eEzsigntemplatesignatureAttachmentnamesource)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eEzsigntemplatesignatureAttachmentnamesource)) {
            //throw new \InvalidArgumentException('non-nullable eEzsigntemplatesignatureAttachmentnamesource cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eEzsigntemplatesignatureAttachmentnamesource'] = $eEzsigntemplatesignatureAttachmentnamesource;
        $this->container['eEzsigntemplatesignatureAttachmentnamesource'] = $eEzsigntemplatesignatureAttachmentnamesource;

        return $this;
    }

    /**
     * Gets bEzsigntemplatesignatureRequired
     *
     * @return bool|null
     */
    public function getBEzsigntemplatesignatureRequired()
    {
        return $this->container['bEzsigntemplatesignatureRequired'];
    }

    /**
     * Sets bEzsigntemplatesignatureRequired
     *
     * @param bool|null $bEzsigntemplatesignatureRequired Whether the Ezsigntemplatesignature is required or not. This field is relevant only with Ezsigntemplatesignature with eEzsigntemplatesignatureType = Attachments.
     *
     * @return self
     */
    public function setBEzsigntemplatesignatureRequired($bEzsigntemplatesignatureRequired)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bEzsigntemplatesignatureRequired)) {
            //throw new \InvalidArgumentException('non-nullable bEzsigntemplatesignatureRequired cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bEzsigntemplatesignatureRequired'] = $bEzsigntemplatesignatureRequired;
        $this->container['bEzsigntemplatesignatureRequired'] = (is_null($bEzsigntemplatesignatureRequired) ? null : (bool) $bEzsigntemplatesignatureRequired);

        return $this;
    }

    /**
     * Gets iEzsigntemplatesignatureMaxlength
     *
     * @return int|null
     */
    public function getIEzsigntemplatesignatureMaxlength()
    {
        return $this->container['iEzsigntemplatesignatureMaxlength'];
    }

    /**
     * Sets iEzsigntemplatesignatureMaxlength
     *
     * @param int|null $iEzsigntemplatesignatureMaxlength The maximum length for the value in the Ezsigntemplatesignature  This can only be set if eEzsigntemplatesignatureType is **FieldText** or **FieldTextarea**
     *
     * @return self
     */
    public function setIEzsigntemplatesignatureMaxlength($iEzsigntemplatesignatureMaxlength)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigntemplatesignatureMaxlength)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigntemplatesignatureMaxlength cannot be null');
        //}

//        if (($iEzsigntemplatesignatureMaxlength > 65535)) {
        if (!is_null($iEzsigntemplatesignatureMaxlength) && ($iEzsigntemplatesignatureMaxlength > 65535)) {
            throw new \InvalidArgumentException('invalid value for $iEzsigntemplatesignatureMaxlength when calling EzsigntemplatesignatureResponseCompound., must be smaller than or equal to 65535.');
        }
//        if (($iEzsigntemplatesignatureMaxlength < 0)) {
        if (!is_null($iEzsigntemplatesignatureMaxlength) && ($iEzsigntemplatesignatureMaxlength < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzsigntemplatesignatureMaxlength when calling EzsigntemplatesignatureResponseCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigntemplatesignatureMaxlength'] = $iEzsigntemplatesignatureMaxlength;
        $this->container['iEzsigntemplatesignatureMaxlength'] = (is_null($iEzsigntemplatesignatureMaxlength) ? null : (int) $iEzsigntemplatesignatureMaxlength);

        return $this;
    }

    /**
     * Gets sEzsigntemplatesignatureRegexp
     *
     * @return string|null
     */
    public function getSEzsigntemplatesignatureRegexp()
    {
        return $this->container['sEzsigntemplatesignatureRegexp'];
    }

    /**
     * Sets sEzsigntemplatesignatureRegexp
     *
     * @param string|null $sEzsigntemplatesignatureRegexp A regular expression to indicate what values are acceptable for the Ezsigntemplatesignature.  This can only be set if eEzsigntemplatesignatureType is **Text** or **Textarea**
     *
     * @return self
     */
    public function setSEzsigntemplatesignatureRegexp($sEzsigntemplatesignatureRegexp)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sEzsigntemplatesignatureRegexp)) {
            //throw new \InvalidArgumentException('non-nullable sEzsigntemplatesignatureRegexp cannot be null');
        //}

//        if ((!preg_match("/^\\^.*\\$$|^$/", ObjectSerializer::toString($sEzsigntemplatesignatureRegexp)))) {
        if (!is_null($sEzsigntemplatesignatureRegexp) && (!preg_match("/^\\^.*\\$$|^$/", ObjectSerializer::toString($sEzsigntemplatesignatureRegexp)))) {
            throw new \InvalidArgumentException("invalid value for \$sEzsigntemplatesignatureRegexp when calling EzsigntemplatesignatureResponseCompound., must conform to the pattern /^\\^.*\\$$|^$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sEzsigntemplatesignatureRegexp'] = $sEzsigntemplatesignatureRegexp;
        $this->container['sEzsigntemplatesignatureRegexp'] = (is_null($sEzsigntemplatesignatureRegexp) ? null : (string) $sEzsigntemplatesignatureRegexp);

        return $this;
    }

    /**
     * Gets eEzsigntemplatesignatureTextvalidation
     *
     * @return \eZmaxAPI\Model\EnumTextvalidation|null
     */
    public function getEEzsigntemplatesignatureTextvalidation()
    {
        return $this->container['eEzsigntemplatesignatureTextvalidation'];
    }

    /**
     * Sets eEzsigntemplatesignatureTextvalidation
     *
     * @param \eZmaxAPI\Model\EnumTextvalidation|null $eEzsigntemplatesignatureTextvalidation eEzsigntemplatesignatureTextvalidation
     *
     * @return self
     */
    public function setEEzsigntemplatesignatureTextvalidation($eEzsigntemplatesignatureTextvalidation)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eEzsigntemplatesignatureTextvalidation)) {
            //throw new \InvalidArgumentException('non-nullable eEzsigntemplatesignatureTextvalidation cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eEzsigntemplatesignatureTextvalidation'] = $eEzsigntemplatesignatureTextvalidation;
        $this->container['eEzsigntemplatesignatureTextvalidation'] = $eEzsigntemplatesignatureTextvalidation;

        return $this;
    }

    /**
     * Gets eEzsigntemplatesignatureDependencyrequirement
     *
     * @return \eZmaxAPI\Model\FieldEEzsigntemplatesignatureDependencyrequirement|null
     */
    public function getEEzsigntemplatesignatureDependencyrequirement()
    {
        return $this->container['eEzsigntemplatesignatureDependencyrequirement'];
    }

    /**
     * Sets eEzsigntemplatesignatureDependencyrequirement
     *
     * @param \eZmaxAPI\Model\FieldEEzsigntemplatesignatureDependencyrequirement|null $eEzsigntemplatesignatureDependencyrequirement eEzsigntemplatesignatureDependencyrequirement
     *
     * @return self
     */
    public function setEEzsigntemplatesignatureDependencyrequirement($eEzsigntemplatesignatureDependencyrequirement)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eEzsigntemplatesignatureDependencyrequirement)) {
            //throw new \InvalidArgumentException('non-nullable eEzsigntemplatesignatureDependencyrequirement cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eEzsigntemplatesignatureDependencyrequirement'] = $eEzsigntemplatesignatureDependencyrequirement;
        $this->container['eEzsigntemplatesignatureDependencyrequirement'] = $eEzsigntemplatesignatureDependencyrequirement;

        return $this;
    }

    /**
     * Gets bEzsigntemplatesignatureCustomdate
     *
     * @return bool|null
     */
    public function getBEzsigntemplatesignatureCustomdate()
    {
        return $this->container['bEzsigntemplatesignatureCustomdate'];
    }

    /**
     * Sets bEzsigntemplatesignatureCustomdate
     *
     * @param bool|null $bEzsigntemplatesignatureCustomdate Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**)
     *
     * @return self
     */
    public function setBEzsigntemplatesignatureCustomdate($bEzsigntemplatesignatureCustomdate)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bEzsigntemplatesignatureCustomdate)) {
            //throw new \InvalidArgumentException('non-nullable bEzsigntemplatesignatureCustomdate cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bEzsigntemplatesignatureCustomdate'] = $bEzsigntemplatesignatureCustomdate;
        $this->container['bEzsigntemplatesignatureCustomdate'] = (is_null($bEzsigntemplatesignatureCustomdate) ? null : (bool) $bEzsigntemplatesignatureCustomdate);

        return $this;
    }

    /**
     * Gets aObjEzsigntemplatesignaturecustomdate
     *
     * @return \eZmaxAPI\Model\EzsigntemplatesignaturecustomdateResponseCompound[]|null
     */
    public function getAObjEzsigntemplatesignaturecustomdate()
    {
        return $this->container['aObjEzsigntemplatesignaturecustomdate'];
    }

    /**
     * Sets aObjEzsigntemplatesignaturecustomdate
     *
     * @param \eZmaxAPI\Model\EzsigntemplatesignaturecustomdateResponseCompound[]|null $aObjEzsigntemplatesignaturecustomdate An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don't want to have a date at all.
     *
     * @return self
     */
    public function setAObjEzsigntemplatesignaturecustomdate($aObjEzsigntemplatesignaturecustomdate)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($aObjEzsigntemplatesignaturecustomdate)) {
            //throw new \InvalidArgumentException('non-nullable aObjEzsigntemplatesignaturecustomdate cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['aObjEzsigntemplatesignaturecustomdate'] = $aObjEzsigntemplatesignaturecustomdate;
        $this->container['aObjEzsigntemplatesignaturecustomdate'] = $aObjEzsigntemplatesignaturecustomdate;

        return $this;
    }

    /**
     * Gets aObjEzsigntemplateelementdependency
     *
     * @return \eZmaxAPI\Model\EzsigntemplateelementdependencyResponseCompound[]|null
     */
    public function getAObjEzsigntemplateelementdependency()
    {
        return $this->container['aObjEzsigntemplateelementdependency'];
    }

    /**
     * Sets aObjEzsigntemplateelementdependency
     *
     * @param \eZmaxAPI\Model\EzsigntemplateelementdependencyResponseCompound[]|null $aObjEzsigntemplateelementdependency aObjEzsigntemplateelementdependency
     *
     * @return self
     */
    public function setAObjEzsigntemplateelementdependency($aObjEzsigntemplateelementdependency)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($aObjEzsigntemplateelementdependency)) {
            //throw new \InvalidArgumentException('non-nullable aObjEzsigntemplateelementdependency cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['aObjEzsigntemplateelementdependency'] = $aObjEzsigntemplateelementdependency;
        $this->container['aObjEzsigntemplateelementdependency'] = $aObjEzsigntemplateelementdependency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


