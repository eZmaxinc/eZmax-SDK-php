<?php
/**
 * EzsignsignerRequestCompound
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.11
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * EzsignsignerRequestCompound Class Doc Comment
 *
 * @category Class
 * @description An Ezsignsigner Object and children to create a complete structure
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EzsignsignerRequestCompound implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ezsignsigner-RequestCompound';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fkiUserlogintypeID' => 'int',
        'fkiTaxassignmentID' => 'int',
        'fkiSecretquestionID' => 'int',
        'eEzsignsignerLogintype' => 'string',
        'sEzsignsignerSecretanswer' => 'string',
        'objContact' => '\eZmaxAPI\Model\EzsignsignerRequestCompoundContact'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fkiUserlogintypeID' => null,
        'fkiTaxassignmentID' => null,
        'fkiSecretquestionID' => null,
        'eEzsignsignerLogintype' => null,
        'sEzsignsignerSecretanswer' => null,
        'objContact' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fkiUserlogintypeID' => false,
		'fkiTaxassignmentID' => false,
		'fkiSecretquestionID' => false,
		'eEzsignsignerLogintype' => false,
		'sEzsignsignerSecretanswer' => false,
		'objContact' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fkiUserlogintypeID' => 'fkiUserlogintypeID',
        'fkiTaxassignmentID' => 'fkiTaxassignmentID',
        'fkiSecretquestionID' => 'fkiSecretquestionID',
        'eEzsignsignerLogintype' => 'eEzsignsignerLogintype',
        'sEzsignsignerSecretanswer' => 'sEzsignsignerSecretanswer',
        'objContact' => 'objContact'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fkiUserlogintypeID' => 'setFkiUserlogintypeID',
        'fkiTaxassignmentID' => 'setFkiTaxassignmentID',
        'fkiSecretquestionID' => 'setFkiSecretquestionID',
        'eEzsignsignerLogintype' => 'setEEzsignsignerLogintype',
        'sEzsignsignerSecretanswer' => 'setSEzsignsignerSecretanswer',
        'objContact' => 'setObjContact'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fkiUserlogintypeID' => 'getFkiUserlogintypeID',
        'fkiTaxassignmentID' => 'getFkiTaxassignmentID',
        'fkiSecretquestionID' => 'getFkiSecretquestionID',
        'eEzsignsignerLogintype' => 'getEEzsignsignerLogintype',
        'sEzsignsignerSecretanswer' => 'getSEzsignsignerSecretanswer',
        'objContact' => 'getObjContact'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const E_EZSIGNSIGNER_LOGINTYPE_PASSWORD = 'Password';
    public const E_EZSIGNSIGNER_LOGINTYPE_PASSWORD_PHONE = 'PasswordPhone';
    public const E_EZSIGNSIGNER_LOGINTYPE_PASSWORD_QUESTION = 'PasswordQuestion';
    public const E_EZSIGNSIGNER_LOGINTYPE_IN_PERSON_PHONE = 'InPersonPhone';
    public const E_EZSIGNSIGNER_LOGINTYPE_IN_PERSON = 'InPerson';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEEzsignsignerLogintypeAllowableValues()
    {
        return [
            self::E_EZSIGNSIGNER_LOGINTYPE_PASSWORD,
            self::E_EZSIGNSIGNER_LOGINTYPE_PASSWORD_PHONE,
            self::E_EZSIGNSIGNER_LOGINTYPE_PASSWORD_QUESTION,
            self::E_EZSIGNSIGNER_LOGINTYPE_IN_PERSON_PHONE,
            self::E_EZSIGNSIGNER_LOGINTYPE_IN_PERSON,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('fkiUserlogintypeID', $data ?? [], null);
        $this->setIfExists('fkiTaxassignmentID', $data ?? [], null);
        $this->setIfExists('fkiSecretquestionID', $data ?? [], null);
        $this->setIfExists('eEzsignsignerLogintype', $data ?? [], null);
        $this->setIfExists('sEzsignsignerSecretanswer', $data ?? [], null);
        $this->setIfExists('objContact', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['fkiUserlogintypeID']) && ($this->container['fkiUserlogintypeID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiUserlogintypeID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiTaxassignmentID'] === null) {
            $invalidProperties[] = "'fkiTaxassignmentID' can't be null";
        }
        if (($this->container['fkiTaxassignmentID'] > 15)) {
            $invalidProperties[] = "invalid value for 'fkiTaxassignmentID', must be smaller than or equal to 15.";
        }

        if (($this->container['fkiTaxassignmentID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiTaxassignmentID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiSecretquestionID']) && ($this->container['fkiSecretquestionID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiSecretquestionID', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getEEzsignsignerLogintypeAllowableValues();
        if (!is_null($this->container['eEzsignsignerLogintype']) && !in_array($this->container['eEzsignsignerLogintype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eEzsignsignerLogintype', must be one of '%s'",
                $this->container['eEzsignsignerLogintype'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['objContact'] === null) {
            $invalidProperties[] = "'objContact' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fkiUserlogintypeID
     *
     * @return int|null
     */
    public function getFkiUserlogintypeID()
    {
        return $this->container['fkiUserlogintypeID'];
    }

    /**
     * Sets fkiUserlogintypeID
     *
     * @param int|null $fkiUserlogintypeID The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \"In-Person\" and there won't be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \"In-Person\" and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|
     *
     * @return self
     */
    public function setFkiUserlogintypeID($fkiUserlogintypeID)
    {

        if (!is_null($fkiUserlogintypeID) && ($fkiUserlogintypeID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiUserlogintypeID when calling EzsignsignerRequestCompound., must be bigger than or equal to 0.');
        }


        //if (is_null($fkiUserlogintypeID)) {
            //throw new \InvalidArgumentException('non-nullable fkiUserlogintypeID cannot be null');
        //}
        $this->container['fkiUserlogintypeID'] = (is_null($fkiUserlogintypeID) ? null : (int) $fkiUserlogintypeID);

        return $this;
    }

    /**
     * Gets fkiTaxassignmentID
     *
     * @return int
     */
    public function getFkiTaxassignmentID()
    {
        return $this->container['fkiTaxassignmentID'];
    }

    /**
     * Sets fkiTaxassignmentID
     *
     * @param int $fkiTaxassignmentID The unique ID of the Taxassignment.  Valid values:  |Value|Description| |-|-| |1|No tax| |2|GST| |3|HST (ON)| |4|HST (NB)| |5|HST (NS)| |6|HST (NL)| |7|HST (PE)| |8|GST + QST (QC)| |9|GST + QST (QC) Non-Recoverable| |10|GST + PST (BC)| |11|GST + PST (SK)| |12|GST + RST (MB)| |13|GST + PST (BC) Non-Recoverable| |14|GST + PST (SK) Non-Recoverable| |15|GST + RST (MB) Non-Recoverable|
     *
     * @return self
     */
    public function setFkiTaxassignmentID($fkiTaxassignmentID)
    {

        if (($fkiTaxassignmentID > 15)) {
            throw new \InvalidArgumentException('invalid value for $fkiTaxassignmentID when calling EzsignsignerRequestCompound., must be smaller than or equal to 15.');
        }
        if (($fkiTaxassignmentID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiTaxassignmentID when calling EzsignsignerRequestCompound., must be bigger than or equal to 0.');
        }


        //if (is_null($fkiTaxassignmentID)) {
            //throw new \InvalidArgumentException('non-nullable fkiTaxassignmentID cannot be null');
        //}
        $this->container['fkiTaxassignmentID'] = (is_null($fkiTaxassignmentID) ? null : (int) $fkiTaxassignmentID);

        return $this;
    }

    /**
     * Gets fkiSecretquestionID
     *
     * @return int|null
     */
    public function getFkiSecretquestionID()
    {
        return $this->container['fkiSecretquestionID'];
    }

    /**
     * Sets fkiSecretquestionID
     *
     * @param int|null $fkiSecretquestionID The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father's middle name| |15|Your mother's maiden name| |16|Name of your eldest child| |17|Your spouse's middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat's name| |22|Date of Birth (YYYY-MM-DD)|
     *
     * @return self
     */
    public function setFkiSecretquestionID($fkiSecretquestionID)
    {

        if (!is_null($fkiSecretquestionID) && ($fkiSecretquestionID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiSecretquestionID when calling EzsignsignerRequestCompound., must be bigger than or equal to 0.');
        }


        //if (is_null($fkiSecretquestionID)) {
            //throw new \InvalidArgumentException('non-nullable fkiSecretquestionID cannot be null');
        //}
        $this->container['fkiSecretquestionID'] = (is_null($fkiSecretquestionID) ? null : (int) $fkiSecretquestionID);

        return $this;
    }

    /**
     * Gets eEzsignsignerLogintype
     *
     * @return string|null
     * @deprecated
     */
    public function getEEzsignsignerLogintype()
    {
        return $this->container['eEzsignsignerLogintype'];
    }

    /**
     * Sets eEzsignsignerLogintype
     *
     * @param string|null $eEzsignsignerLogintype The method the Ezsignsigner will authenticate to the signing platform.  1. **Password** means the Ezsignsigner will receive a secure link by email. 2. **PasswordPhone** means the Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**. 3. **PasswordQuestion** means the Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer. 4. **InPersonPhone** means the Ezsignsigner will only be able to sign \"In-Person\" and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**. 5. **InPerson** means the Ezsignsigner will only be able to sign \"In-Person\" and there won't be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type.
     *
     * @return self
     * @deprecated
     */
    public function setEEzsignsignerLogintype($eEzsignsignerLogintype)
    {
        $allowedValues = $this->getEEzsignsignerLogintypeAllowableValues();
        if (!is_null($eEzsignsignerLogintype) && !in_array($eEzsignsignerLogintype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eEzsignsignerLogintype', must be one of '%s'",
                    $eEzsignsignerLogintype,
                    implode("', '", $allowedValues)
                )
            );
        }

        //if (is_null($eEzsignsignerLogintype)) {
            //throw new \InvalidArgumentException('non-nullable eEzsignsignerLogintype cannot be null');
        //}
        $this->container['eEzsignsignerLogintype'] = (is_null($eEzsignsignerLogintype) ? null : (string) $eEzsignsignerLogintype);

        return $this;
    }

    /**
     * Gets sEzsignsignerSecretanswer
     *
     * @return string|null
     */
    public function getSEzsignsignerSecretanswer()
    {
        return $this->container['sEzsignsignerSecretanswer'];
    }

    /**
     * Sets sEzsignsignerSecretanswer
     *
     * @param string|null $sEzsignsignerSecretanswer The predefined answer to the secret question the Ezsignsigner will need to provide to successfully authenticate.
     *
     * @return self
     */
    public function setSEzsignsignerSecretanswer($sEzsignsignerSecretanswer)
    {

        //if (is_null($sEzsignsignerSecretanswer)) {
            //throw new \InvalidArgumentException('non-nullable sEzsignsignerSecretanswer cannot be null');
        //}
        $this->container['sEzsignsignerSecretanswer'] = (is_null($sEzsignsignerSecretanswer) ? null : (string) $sEzsignsignerSecretanswer);

        return $this;
    }

    /**
     * Gets objContact
     *
     * @return \eZmaxAPI\Model\EzsignsignerRequestCompoundContact
     */
    public function getObjContact()
    {
        return $this->container['objContact'];
    }

    /**
     * Sets objContact
     *
     * @param \eZmaxAPI\Model\EzsignsignerRequestCompoundContact $objContact objContact
     *
     * @return self
     */
    public function setObjContact($objContact)
    {

        //if (is_null($objContact)) {
            //throw new \InvalidArgumentException('non-nullable objContact cannot be null');
        //}
        $this->container['objContact'] = $objContact;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


