<?php
/**
 * CommonResponseObjDebugPayloadGetList
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.12
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * CommonResponseObjDebugPayloadGetList Class Doc Comment
 *
 * @category Class
 * @description This is a debug object containing debugging information on the actual function
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CommonResponseObjDebugPayloadGetList implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Common-Response-objDebugPayload_getList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'iVersionMin' => 'int',
        'iVersionMax' => 'int',
        'aRequiredPermission' => 'int[]',
        'aFilter' => '\eZmaxAPI\Model\CommonResponseFilter',
        'aOrderBy' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'iVersionMin' => null,
        'iVersionMax' => null,
        'aRequiredPermission' => null,
        'aFilter' => null,
        'aOrderBy' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'iVersionMin' => false,
		'iVersionMax' => false,
		'aRequiredPermission' => false,
		'aFilter' => false,
		'aOrderBy' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'iVersionMin' => 'iVersionMin',
        'iVersionMax' => 'iVersionMax',
        'aRequiredPermission' => 'a_RequiredPermission',
        'aFilter' => 'a_Filter',
        'aOrderBy' => 'a_OrderBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'iVersionMin' => 'setIVersionMin',
        'iVersionMax' => 'setIVersionMax',
        'aRequiredPermission' => 'setARequiredPermission',
        'aFilter' => 'setAFilter',
        'aOrderBy' => 'setAOrderBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'iVersionMin' => 'getIVersionMin',
        'iVersionMax' => 'getIVersionMax',
        'aRequiredPermission' => 'getARequiredPermission',
        'aFilter' => 'getAFilter',
        'aOrderBy' => 'getAOrderBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('iVersionMin', $data ?? [], null);
        $this->setIfExists('iVersionMax', $data ?? [], null);
        $this->setIfExists('aRequiredPermission', $data ?? [], null);
        $this->setIfExists('aFilter', $data ?? [], null);
        $this->setIfExists('aOrderBy', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['iVersionMin'] === null) {
            $invalidProperties[] = "'iVersionMin' can't be null";
        }
        if ($this->container['iVersionMax'] === null) {
            $invalidProperties[] = "'iVersionMax' can't be null";
        }
        if ($this->container['aRequiredPermission'] === null) {
            $invalidProperties[] = "'aRequiredPermission' can't be null";
        }
        if ($this->container['aFilter'] === null) {
            $invalidProperties[] = "'aFilter' can't be null";
        }
        if ($this->container['aOrderBy'] === null) {
            $invalidProperties[] = "'aOrderBy' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets iVersionMin
     *
     * @return int
     */
    public function getIVersionMin()
    {
        return $this->container['iVersionMin'];
    }

    /**
     * Sets iVersionMin
     *
     * @param int $iVersionMin The minimum version of the function that can be called
     *
     * @return self
     */
    public function setIVersionMin($iVersionMin)
    {

        //if (is_null($iVersionMin)) {
            //throw new \InvalidArgumentException('non-nullable iVersionMin cannot be null');
        //}
        $this->container['iVersionMin'] = (is_null($iVersionMin) ? null : (int) $iVersionMin);

        return $this;
    }

    /**
     * Gets iVersionMax
     *
     * @return int
     */
    public function getIVersionMax()
    {
        return $this->container['iVersionMax'];
    }

    /**
     * Sets iVersionMax
     *
     * @param int $iVersionMax The maximum version of the function that can be called
     *
     * @return self
     */
    public function setIVersionMax($iVersionMax)
    {

        //if (is_null($iVersionMax)) {
            //throw new \InvalidArgumentException('non-nullable iVersionMax cannot be null');
        //}
        $this->container['iVersionMax'] = (is_null($iVersionMax) ? null : (int) $iVersionMax);

        return $this;
    }

    /**
     * Gets aRequiredPermission
     *
     * @return int[]
     */
    public function getARequiredPermission()
    {
        return $this->container['aRequiredPermission'];
    }

    /**
     * Sets aRequiredPermission
     *
     * @param int[] $aRequiredPermission An array of permissions required to access this function.  If the value \"0\" is present in the array, anyone can call this function.  You must have one of the permission to access the function. You don't need to have all of them.
     *
     * @return self
     */
    public function setARequiredPermission($aRequiredPermission)
    {

        //if (is_null($aRequiredPermission)) {
            //throw new \InvalidArgumentException('non-nullable aRequiredPermission cannot be null');
        //}
        $this->container['aRequiredPermission'] = (is_null($aRequiredPermission) ? null : $aRequiredPermission);

        return $this;
    }

    /**
     * Gets aFilter
     *
     * @return \eZmaxAPI\Model\CommonResponseFilter
     */
    public function getAFilter()
    {
        return $this->container['aFilter'];
    }

    /**
     * Sets aFilter
     *
     * @param \eZmaxAPI\Model\CommonResponseFilter $aFilter aFilter
     *
     * @return self
     */
    public function setAFilter($aFilter)
    {

        //if (is_null($aFilter)) {
            //throw new \InvalidArgumentException('non-nullable aFilter cannot be null');
        //}
        $this->container['aFilter'] = $aFilter;

        return $this;
    }

    /**
     * Gets aOrderBy
     *
     * @return array<string,string>
     */
    public function getAOrderBy()
    {
        return $this->container['aOrderBy'];
    }

    /**
     * Sets aOrderBy
     *
     * @param array<string,string> $aOrderBy List of available values for *eOrderBy*
     *
     * @return self
     */
    public function setAOrderBy($aOrderBy)
    {

        //if (is_null($aOrderBy)) {
            //throw new \InvalidArgumentException('non-nullable aOrderBy cannot be null');
        //}
        $this->container['aOrderBy'] = (is_null($aOrderBy) ? null : $aOrderBy);

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


