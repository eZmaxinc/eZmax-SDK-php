<?php
/**
 * SchemaGenericObjDebugPayload
 *
 * PHP version 7.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition
 *
 * TODO Api description
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SchemaGenericObjDebugPayload Class Doc Comment
 *
 * @category Class
 * @description This is a debug object containing debugging information on the actual function.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SchemaGenericObjDebugPayload implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Schema-Generic-objDebugPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'i_version_min' => 'int',
        'i_version_max' => 'int',
        'a_required_permissions' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'i_version_min' => null,
        'i_version_max' => null,
        'a_required_permissions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'i_version_min' => 'iVersionMin',
        'i_version_max' => 'iVersionMax',
        'a_required_permissions' => 'a_RequiredPermissions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'i_version_min' => 'setIVersionMin',
        'i_version_max' => 'setIVersionMax',
        'a_required_permissions' => 'setARequiredPermissions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'i_version_min' => 'getIVersionMin',
        'i_version_max' => 'getIVersionMax',
        'a_required_permissions' => 'getARequiredPermissions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['i_version_min'] = isset($data['i_version_min']) ? $data['i_version_min'] : null;
        $this->container['i_version_max'] = isset($data['i_version_max']) ? $data['i_version_max'] : null;
        $this->container['a_required_permissions'] = isset($data['a_required_permissions']) ? $data['a_required_permissions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['i_version_min'] === null) {
            $invalidProperties[] = "'i_version_min' can't be null";
        }
        if ($this->container['i_version_max'] === null) {
            $invalidProperties[] = "'i_version_max' can't be null";
        }
        if ($this->container['a_required_permissions'] === null) {
            $invalidProperties[] = "'a_required_permissions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets i_version_min
     *
     * @return int
     */
    public function getIVersionMin()
    {
        return $this->container['i_version_min'];
    }

    /**
     * Sets i_version_min
     *
     * @param int $i_version_min The minimum version of the function that can be called.
     *
     * @return $this
     */
    public function setIVersionMin($i_version_min)
    {
        $this->container['i_version_min'] = $i_version_min;

        return $this;
    }

    /**
     * Gets i_version_max
     *
     * @return int
     */
    public function getIVersionMax()
    {
        return $this->container['i_version_max'];
    }

    /**
     * Sets i_version_max
     *
     * @param int $i_version_max The maximum version of the function that can be called.
     *
     * @return $this
     */
    public function setIVersionMax($i_version_max)
    {
        $this->container['i_version_max'] = $i_version_max;

        return $this;
    }

    /**
     * Gets a_required_permissions
     *
     * @return int[]
     */
    public function getARequiredPermissions()
    {
        return $this->container['a_required_permissions'];
    }

    /**
     * Sets a_required_permissions
     *
     * @param int[] $a_required_permissions An array of permissions required to access this function.  If the value \"0\" is present in the array, anyone can call this function.  You must have one of the permission to access the function. You don't need to have all of them.
     *
     * @return $this
     */
    public function setARequiredPermissions($a_required_permissions)
    {
        $this->container['a_required_permissions'] = $a_required_permissions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


