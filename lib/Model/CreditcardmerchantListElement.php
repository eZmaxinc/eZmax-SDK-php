<?php
/**
 * CreditcardmerchantListElement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * CreditcardmerchantListElement Class Doc Comment
 *
 * @category Class
 * @description A Creditcardmerchant List Element
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreditcardmerchantListElement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'creditcardmerchant-ListElement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pkiCreditcardmerchantID' => 'int',
        'fkiBankaccountID' => 'int',
        'fkiLanguageID' => 'int',
        'bCreditcardmerchantDenyvisa' => 'bool',
        'bCreditcardmerchantDenymastercard' => 'bool',
        'bCreditcardmerchantDenyamex' => 'bool',
        'bCreditcardmerchantIsactive' => 'bool',
        'sCreditcardmerchantDescription' => 'string',
        'sCreditcardmerchantStoreid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pkiCreditcardmerchantID' => null,
        'fkiBankaccountID' => null,
        'fkiLanguageID' => null,
        'bCreditcardmerchantDenyvisa' => null,
        'bCreditcardmerchantDenymastercard' => null,
        'bCreditcardmerchantDenyamex' => null,
        'bCreditcardmerchantIsactive' => null,
        'sCreditcardmerchantDescription' => null,
        'sCreditcardmerchantStoreid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pkiCreditcardmerchantID' => false,
		'fkiBankaccountID' => false,
		'fkiLanguageID' => false,
		'bCreditcardmerchantDenyvisa' => false,
		'bCreditcardmerchantDenymastercard' => false,
		'bCreditcardmerchantDenyamex' => false,
		'bCreditcardmerchantIsactive' => false,
		'sCreditcardmerchantDescription' => false,
		'sCreditcardmerchantStoreid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pkiCreditcardmerchantID' => 'pkiCreditcardmerchantID',
        'fkiBankaccountID' => 'fkiBankaccountID',
        'fkiLanguageID' => 'fkiLanguageID',
        'bCreditcardmerchantDenyvisa' => 'bCreditcardmerchantDenyvisa',
        'bCreditcardmerchantDenymastercard' => 'bCreditcardmerchantDenymastercard',
        'bCreditcardmerchantDenyamex' => 'bCreditcardmerchantDenyamex',
        'bCreditcardmerchantIsactive' => 'bCreditcardmerchantIsactive',
        'sCreditcardmerchantDescription' => 'sCreditcardmerchantDescription',
        'sCreditcardmerchantStoreid' => 'sCreditcardmerchantStoreid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pkiCreditcardmerchantID' => 'setPkiCreditcardmerchantID',
        'fkiBankaccountID' => 'setFkiBankaccountID',
        'fkiLanguageID' => 'setFkiLanguageID',
        'bCreditcardmerchantDenyvisa' => 'setBCreditcardmerchantDenyvisa',
        'bCreditcardmerchantDenymastercard' => 'setBCreditcardmerchantDenymastercard',
        'bCreditcardmerchantDenyamex' => 'setBCreditcardmerchantDenyamex',
        'bCreditcardmerchantIsactive' => 'setBCreditcardmerchantIsactive',
        'sCreditcardmerchantDescription' => 'setSCreditcardmerchantDescription',
        'sCreditcardmerchantStoreid' => 'setSCreditcardmerchantStoreid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pkiCreditcardmerchantID' => 'getPkiCreditcardmerchantID',
        'fkiBankaccountID' => 'getFkiBankaccountID',
        'fkiLanguageID' => 'getFkiLanguageID',
        'bCreditcardmerchantDenyvisa' => 'getBCreditcardmerchantDenyvisa',
        'bCreditcardmerchantDenymastercard' => 'getBCreditcardmerchantDenymastercard',
        'bCreditcardmerchantDenyamex' => 'getBCreditcardmerchantDenyamex',
        'bCreditcardmerchantIsactive' => 'getBCreditcardmerchantIsactive',
        'sCreditcardmerchantDescription' => 'getSCreditcardmerchantDescription',
        'sCreditcardmerchantStoreid' => 'getSCreditcardmerchantStoreid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pkiCreditcardmerchantID', $data ?? [], null);
        $this->setIfExists('fkiBankaccountID', $data ?? [], null);
        $this->setIfExists('fkiLanguageID', $data ?? [], null);
        $this->setIfExists('bCreditcardmerchantDenyvisa', $data ?? [], null);
        $this->setIfExists('bCreditcardmerchantDenymastercard', $data ?? [], null);
        $this->setIfExists('bCreditcardmerchantDenyamex', $data ?? [], null);
        $this->setIfExists('bCreditcardmerchantIsactive', $data ?? [], null);
        $this->setIfExists('sCreditcardmerchantDescription', $data ?? [], null);
        $this->setIfExists('sCreditcardmerchantStoreid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pkiCreditcardmerchantID'] === null) {
            $invalidProperties[] = "'pkiCreditcardmerchantID' can't be null";
        }
        if (($this->container['pkiCreditcardmerchantID'] > 255)) {
            $invalidProperties[] = "invalid value for 'pkiCreditcardmerchantID', must be smaller than or equal to 255.";
        }

        if (($this->container['pkiCreditcardmerchantID'] < 0)) {
            $invalidProperties[] = "invalid value for 'pkiCreditcardmerchantID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiBankaccountID'] === null) {
            $invalidProperties[] = "'fkiBankaccountID' can't be null";
        }
        if (($this->container['fkiBankaccountID'] > 255)) {
            $invalidProperties[] = "invalid value for 'fkiBankaccountID', must be smaller than or equal to 255.";
        }

        if (($this->container['fkiBankaccountID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiBankaccountID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiLanguageID']) && ($this->container['fkiLanguageID'] > 2)) {
            $invalidProperties[] = "invalid value for 'fkiLanguageID', must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['fkiLanguageID']) && ($this->container['fkiLanguageID'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiLanguageID', must be bigger than or equal to 1.";
        }

        if ($this->container['bCreditcardmerchantDenyvisa'] === null) {
            $invalidProperties[] = "'bCreditcardmerchantDenyvisa' can't be null";
        }
        if ($this->container['bCreditcardmerchantDenymastercard'] === null) {
            $invalidProperties[] = "'bCreditcardmerchantDenymastercard' can't be null";
        }
        if ($this->container['bCreditcardmerchantDenyamex'] === null) {
            $invalidProperties[] = "'bCreditcardmerchantDenyamex' can't be null";
        }
        if ($this->container['bCreditcardmerchantIsactive'] === null) {
            $invalidProperties[] = "'bCreditcardmerchantIsactive' can't be null";
        }
        if ($this->container['sCreditcardmerchantDescription'] === null) {
            $invalidProperties[] = "'sCreditcardmerchantDescription' can't be null";
        }
	//if (!preg_match("/^.{0,25}$/", $this->container['sCreditcardmerchantDescription'])) {
        if (!is_null($this->container['sCreditcardmerchantDescription']) && !preg_match("/(*UTF8)^.{0,25}$/", $this->container['sCreditcardmerchantDescription'])) {
            $invalidProperties[] = "invalid value for 'sCreditcardmerchantDescription', must be conform to the pattern /^.{0,25}$/.";
        }

        if ($this->container['sCreditcardmerchantStoreid'] === null) {
            $invalidProperties[] = "'sCreditcardmerchantStoreid' can't be null";
        }
	//if (!preg_match("/^.{0,25}$/", $this->container['sCreditcardmerchantStoreid'])) {
        if (!is_null($this->container['sCreditcardmerchantStoreid']) && !preg_match("/(*UTF8)^.{0,25}$/", $this->container['sCreditcardmerchantStoreid'])) {
            $invalidProperties[] = "invalid value for 'sCreditcardmerchantStoreid', must be conform to the pattern /^.{0,25}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pkiCreditcardmerchantID
     *
     * @return int
     */
    public function getPkiCreditcardmerchantID()
    {
	//return $this->container['pkiCreditcardmerchantID'];
        return $this->container['pkiCreditcardmerchantID'];
    }

    /**
     * Sets pkiCreditcardmerchantID
     *
     * @param int $pkiCreditcardmerchantID The unique ID of the Creditcardmerchant
     *
     * @return self
     */
    public function setPkiCreditcardmerchantID($pkiCreditcardmerchantID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($pkiCreditcardmerchantID)) {
            //throw new \InvalidArgumentException('non-nullable pkiCreditcardmerchantID cannot be null');
        //}

	//if (($pkiCreditcardmerchantID > 255)) {
        if (($pkiCreditcardmerchantID > 255)) {
	    //throw new \InvalidArgumentException('invalid value for $pkiCreditcardmerchantID when calling CreditcardmerchantListElement., must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiCreditcardmerchantID)?'null':'"'.$pkiCreditcardmerchantID.'"').' for pkiCreditcardmerchantID when calling CreditcardmerchantListElement., must be smaller than or equal to 255.');
        }
	//if (($pkiCreditcardmerchantID < 0)) {
        if (($pkiCreditcardmerchantID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $pkiCreditcardmerchantID when calling CreditcardmerchantListElement., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiCreditcardmerchantID)?'null':'"'.$pkiCreditcardmerchantID.'"').' for pkiCreditcardmerchantID when calling CreditcardmerchantListElement., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['pkiCreditcardmerchantID'] = $pkiCreditcardmerchantID;
        $this->container['pkiCreditcardmerchantID'] = (is_null($pkiCreditcardmerchantID) ? null : (int) $pkiCreditcardmerchantID);

        return $this;
    }

    /**
     * Gets fkiBankaccountID
     *
     * @return int
     */
    public function getFkiBankaccountID()
    {
	//return $this->container['fkiBankaccountID'];
        return $this->container['fkiBankaccountID'];
    }

    /**
     * Sets fkiBankaccountID
     *
     * @param int $fkiBankaccountID The unique ID of the Bankaccount
     *
     * @return self
     */
    public function setFkiBankaccountID($fkiBankaccountID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiBankaccountID)) {
            //throw new \InvalidArgumentException('non-nullable fkiBankaccountID cannot be null');
        //}

	//if (($fkiBankaccountID > 255)) {
        if (($fkiBankaccountID > 255)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiBankaccountID when calling CreditcardmerchantListElement., must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiBankaccountID)?'null':'"'.$fkiBankaccountID.'"').' for fkiBankaccountID when calling CreditcardmerchantListElement., must be smaller than or equal to 255.');
        }
	//if (($fkiBankaccountID < 0)) {
        if (($fkiBankaccountID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiBankaccountID when calling CreditcardmerchantListElement., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiBankaccountID)?'null':'"'.$fkiBankaccountID.'"').' for fkiBankaccountID when calling CreditcardmerchantListElement., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiBankaccountID'] = $fkiBankaccountID;
        $this->container['fkiBankaccountID'] = (is_null($fkiBankaccountID) ? null : (int) $fkiBankaccountID);

        return $this;
    }

    /**
     * Gets fkiLanguageID
     *
     * @return int|null
     */
    public function getFkiLanguageID()
    {
	//return $this->container['fkiLanguageID'];
        return $this->container['fkiLanguageID'];
    }

    /**
     * Sets fkiLanguageID
     *
     * @param int|null $fkiLanguageID The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
     *
     * @return self
     */
    public function setFkiLanguageID($fkiLanguageID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiLanguageID)) {
            //throw new \InvalidArgumentException('non-nullable fkiLanguageID cannot be null');
        //}

	//if (($fkiLanguageID > 2)) {
        if (!is_null($fkiLanguageID) && ($fkiLanguageID > 2)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiLanguageID when calling CreditcardmerchantListElement., must be smaller than or equal to 2.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiLanguageID)?'null':'"'.$fkiLanguageID.'"').' for fkiLanguageID when calling CreditcardmerchantListElement., must be smaller than or equal to 2.');
        }
	//if (($fkiLanguageID < 1)) {
        if (!is_null($fkiLanguageID) && ($fkiLanguageID < 1)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiLanguageID when calling CreditcardmerchantListElement., must be bigger than or equal to 1.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiLanguageID)?'null':'"'.$fkiLanguageID.'"').' for fkiLanguageID when calling CreditcardmerchantListElement., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiLanguageID'] = $fkiLanguageID;
        $this->container['fkiLanguageID'] = (is_null($fkiLanguageID) ? null : (int) $fkiLanguageID);

        return $this;
    }

    /**
     * Gets bCreditcardmerchantDenyvisa
     *
     * @return bool
     */
    public function getBCreditcardmerchantDenyvisa()
    {
	//return $this->container['bCreditcardmerchantDenyvisa'];
        return $this->container['bCreditcardmerchantDenyvisa'];
    }

    /**
     * Sets bCreditcardmerchantDenyvisa
     *
     * @param bool $bCreditcardmerchantDenyvisa Whether if visa are denied
     *
     * @return self
     */
    public function setBCreditcardmerchantDenyvisa($bCreditcardmerchantDenyvisa)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bCreditcardmerchantDenyvisa)) {
            //throw new \InvalidArgumentException('non-nullable bCreditcardmerchantDenyvisa cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bCreditcardmerchantDenyvisa'] = $bCreditcardmerchantDenyvisa;
        $this->container['bCreditcardmerchantDenyvisa'] = (is_null($bCreditcardmerchantDenyvisa) ? null : (bool) $bCreditcardmerchantDenyvisa);

        return $this;
    }

    /**
     * Gets bCreditcardmerchantDenymastercard
     *
     * @return bool
     */
    public function getBCreditcardmerchantDenymastercard()
    {
	//return $this->container['bCreditcardmerchantDenymastercard'];
        return $this->container['bCreditcardmerchantDenymastercard'];
    }

    /**
     * Sets bCreditcardmerchantDenymastercard
     *
     * @param bool $bCreditcardmerchantDenymastercard Whether if mastercard are denied
     *
     * @return self
     */
    public function setBCreditcardmerchantDenymastercard($bCreditcardmerchantDenymastercard)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bCreditcardmerchantDenymastercard)) {
            //throw new \InvalidArgumentException('non-nullable bCreditcardmerchantDenymastercard cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bCreditcardmerchantDenymastercard'] = $bCreditcardmerchantDenymastercard;
        $this->container['bCreditcardmerchantDenymastercard'] = (is_null($bCreditcardmerchantDenymastercard) ? null : (bool) $bCreditcardmerchantDenymastercard);

        return $this;
    }

    /**
     * Gets bCreditcardmerchantDenyamex
     *
     * @return bool
     */
    public function getBCreditcardmerchantDenyamex()
    {
	//return $this->container['bCreditcardmerchantDenyamex'];
        return $this->container['bCreditcardmerchantDenyamex'];
    }

    /**
     * Sets bCreditcardmerchantDenyamex
     *
     * @param bool $bCreditcardmerchantDenyamex Whether if amex are denied
     *
     * @return self
     */
    public function setBCreditcardmerchantDenyamex($bCreditcardmerchantDenyamex)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bCreditcardmerchantDenyamex)) {
            //throw new \InvalidArgumentException('non-nullable bCreditcardmerchantDenyamex cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bCreditcardmerchantDenyamex'] = $bCreditcardmerchantDenyamex;
        $this->container['bCreditcardmerchantDenyamex'] = (is_null($bCreditcardmerchantDenyamex) ? null : (bool) $bCreditcardmerchantDenyamex);

        return $this;
    }

    /**
     * Gets bCreditcardmerchantIsactive
     *
     * @return bool
     */
    public function getBCreditcardmerchantIsactive()
    {
	//return $this->container['bCreditcardmerchantIsactive'];
        return $this->container['bCreditcardmerchantIsactive'];
    }

    /**
     * Sets bCreditcardmerchantIsactive
     *
     * @param bool $bCreditcardmerchantIsactive Whether the creditcardmerchant is active or not
     *
     * @return self
     */
    public function setBCreditcardmerchantIsactive($bCreditcardmerchantIsactive)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bCreditcardmerchantIsactive)) {
            //throw new \InvalidArgumentException('non-nullable bCreditcardmerchantIsactive cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bCreditcardmerchantIsactive'] = $bCreditcardmerchantIsactive;
        $this->container['bCreditcardmerchantIsactive'] = (is_null($bCreditcardmerchantIsactive) ? null : (bool) $bCreditcardmerchantIsactive);

        return $this;
    }

    /**
     * Gets sCreditcardmerchantDescription
     *
     * @return string
     */
    public function getSCreditcardmerchantDescription()
    {
	//return $this->container['sCreditcardmerchantDescription'];
        return is_null($this->container['sCreditcardmerchantDescription']) ? null : trim($this->container['sCreditcardmerchantDescription']);
    }

    /**
     * Sets sCreditcardmerchantDescription
     *
     * @param string $sCreditcardmerchantDescription The description of the Creditcardmerchant
     *
     * @return self
     */
    public function setSCreditcardmerchantDescription($sCreditcardmerchantDescription)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sCreditcardmerchantDescription)) {
            //throw new \InvalidArgumentException('non-nullable sCreditcardmerchantDescription cannot be null');
        //}

	//if ((!preg_match("/^.{0,25}$/", ObjectSerializer::toString($sCreditcardmerchantDescription)))) {
        if (!is_null($sCreditcardmerchantDescription) && (!preg_match("/(*UTF8)^.{0,25}$/", ObjectSerializer::toString($sCreditcardmerchantDescription)))) {
	    //throw new \InvalidArgumentException("invalid value for \$sCreditcardmerchantDescription when calling CreditcardmerchantListElement., must conform to the pattern /^.{0,25}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($sCreditcardmerchantDescription)?'null':'"'.$sCreditcardmerchantDescription.'"')." for sCreditcardmerchantDescription when calling CreditcardmerchantListElement., must conform to the pattern /^.{0,25}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sCreditcardmerchantDescription'] = $sCreditcardmerchantDescription;
        $this->container['sCreditcardmerchantDescription'] = (is_null($sCreditcardmerchantDescription) ? null : trim((string) $sCreditcardmerchantDescription));

        return $this;
    }

    /**
     * Gets sCreditcardmerchantStoreid
     *
     * @return string
     */
    public function getSCreditcardmerchantStoreid()
    {
	//return $this->container['sCreditcardmerchantStoreid'];
        return is_null($this->container['sCreditcardmerchantStoreid']) ? null : trim($this->container['sCreditcardmerchantStoreid']);
    }

    /**
     * Sets sCreditcardmerchantStoreid
     *
     * @param string $sCreditcardmerchantStoreid The storeid of the Creditcardmerchant
     *
     * @return self
     */
    public function setSCreditcardmerchantStoreid($sCreditcardmerchantStoreid)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sCreditcardmerchantStoreid)) {
            //throw new \InvalidArgumentException('non-nullable sCreditcardmerchantStoreid cannot be null');
        //}

	//if ((!preg_match("/^.{0,25}$/", ObjectSerializer::toString($sCreditcardmerchantStoreid)))) {
        if (!is_null($sCreditcardmerchantStoreid) && (!preg_match("/(*UTF8)^.{0,25}$/", ObjectSerializer::toString($sCreditcardmerchantStoreid)))) {
	    //throw new \InvalidArgumentException("invalid value for \$sCreditcardmerchantStoreid when calling CreditcardmerchantListElement., must conform to the pattern /^.{0,25}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($sCreditcardmerchantStoreid)?'null':'"'.$sCreditcardmerchantStoreid.'"')." for sCreditcardmerchantStoreid when calling CreditcardmerchantListElement., must conform to the pattern /^.{0,25}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sCreditcardmerchantStoreid'] = $sCreditcardmerchantStoreid;
        $this->container['sCreditcardmerchantStoreid'] = (is_null($sCreditcardmerchantStoreid) ? null : trim((string) $sCreditcardmerchantStoreid));

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


