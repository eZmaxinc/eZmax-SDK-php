<?php
/**
 * EzsignfolderListElement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * EzsignfolderListElement Class Doc Comment
 *
 * @category Class
 * @description An Ezsignfolder List Element
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EzsignfolderListElement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ezsignfolder-ListElement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pkiEzsignfolderID' => 'int',
        'fkiEzsignfoldertypeID' => 'int',
        'eEzsignfoldertypePrivacylevel' => '\eZmaxAPI\Model\FieldEEzsignfoldertypePrivacylevel',
        'sEzsignfoldertypeNameX' => 'string',
        'sEzsignfolderDescription' => 'string',
        'eEzsignfolderStep' => '\eZmaxAPI\Model\FieldEEzsignfolderStep',
        'dtCreatedDate' => 'string',
        'dtEzsignfolderDelayedsenddate' => 'string',
        'dtEzsignfolderSentdate' => 'string',
        'dtEzsignfolderDuedate' => 'string',
        'iEzsigndocument' => 'int',
        'iEzsigndocumentEdm' => 'int',
        'iEzsignsignature' => 'int',
        'iEzsignsignatureSigned' => 'int',
        'iEzsignformfieldgroup' => 'int',
        'iEzsignformfieldgroupCompleted' => 'int',
        'bEzsignformHasdependencies' => 'bool',
        'dEzsignfolderCompletedpercentage' => 'string',
        'dEzsignfolderFormcompletedpercentage' => 'string',
        'dEzsignfolderSignaturecompletedpercentage' => 'string',
        'bEzsignfolderSigner' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pkiEzsignfolderID' => null,
        'fkiEzsignfoldertypeID' => null,
        'eEzsignfoldertypePrivacylevel' => null,
        'sEzsignfoldertypeNameX' => null,
        'sEzsignfolderDescription' => null,
        'eEzsignfolderStep' => null,
        'dtCreatedDate' => null,
        'dtEzsignfolderDelayedsenddate' => null,
        'dtEzsignfolderSentdate' => null,
        'dtEzsignfolderDuedate' => null,
        'iEzsigndocument' => null,
        'iEzsigndocumentEdm' => null,
        'iEzsignsignature' => null,
        'iEzsignsignatureSigned' => null,
        'iEzsignformfieldgroup' => null,
        'iEzsignformfieldgroupCompleted' => null,
        'bEzsignformHasdependencies' => null,
        'dEzsignfolderCompletedpercentage' => null,
        'dEzsignfolderFormcompletedpercentage' => null,
        'dEzsignfolderSignaturecompletedpercentage' => null,
        'bEzsignfolderSigner' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pkiEzsignfolderID' => false,
		'fkiEzsignfoldertypeID' => false,
		'eEzsignfoldertypePrivacylevel' => false,
		'sEzsignfoldertypeNameX' => false,
		'sEzsignfolderDescription' => false,
		'eEzsignfolderStep' => false,
		'dtCreatedDate' => false,
		'dtEzsignfolderDelayedsenddate' => false,
		'dtEzsignfolderSentdate' => false,
		'dtEzsignfolderDuedate' => false,
		'iEzsigndocument' => false,
		'iEzsigndocumentEdm' => false,
		'iEzsignsignature' => false,
		'iEzsignsignatureSigned' => false,
		'iEzsignformfieldgroup' => false,
		'iEzsignformfieldgroupCompleted' => false,
		'bEzsignformHasdependencies' => false,
		'dEzsignfolderCompletedpercentage' => false,
		'dEzsignfolderFormcompletedpercentage' => false,
		'dEzsignfolderSignaturecompletedpercentage' => false,
		'bEzsignfolderSigner' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pkiEzsignfolderID' => 'pkiEzsignfolderID',
        'fkiEzsignfoldertypeID' => 'fkiEzsignfoldertypeID',
        'eEzsignfoldertypePrivacylevel' => 'eEzsignfoldertypePrivacylevel',
        'sEzsignfoldertypeNameX' => 'sEzsignfoldertypeNameX',
        'sEzsignfolderDescription' => 'sEzsignfolderDescription',
        'eEzsignfolderStep' => 'eEzsignfolderStep',
        'dtCreatedDate' => 'dtCreatedDate',
        'dtEzsignfolderDelayedsenddate' => 'dtEzsignfolderDelayedsenddate',
        'dtEzsignfolderSentdate' => 'dtEzsignfolderSentdate',
        'dtEzsignfolderDuedate' => 'dtEzsignfolderDuedate',
        'iEzsigndocument' => 'iEzsigndocument',
        'iEzsigndocumentEdm' => 'iEzsigndocumentEdm',
        'iEzsignsignature' => 'iEzsignsignature',
        'iEzsignsignatureSigned' => 'iEzsignsignatureSigned',
        'iEzsignformfieldgroup' => 'iEzsignformfieldgroup',
        'iEzsignformfieldgroupCompleted' => 'iEzsignformfieldgroupCompleted',
        'bEzsignformHasdependencies' => 'bEzsignformHasdependencies',
        'dEzsignfolderCompletedpercentage' => 'dEzsignfolderCompletedpercentage',
        'dEzsignfolderFormcompletedpercentage' => 'dEzsignfolderFormcompletedpercentage',
        'dEzsignfolderSignaturecompletedpercentage' => 'dEzsignfolderSignaturecompletedpercentage',
        'bEzsignfolderSigner' => 'bEzsignfolderSigner'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pkiEzsignfolderID' => 'setPkiEzsignfolderID',
        'fkiEzsignfoldertypeID' => 'setFkiEzsignfoldertypeID',
        'eEzsignfoldertypePrivacylevel' => 'setEEzsignfoldertypePrivacylevel',
        'sEzsignfoldertypeNameX' => 'setSEzsignfoldertypeNameX',
        'sEzsignfolderDescription' => 'setSEzsignfolderDescription',
        'eEzsignfolderStep' => 'setEEzsignfolderStep',
        'dtCreatedDate' => 'setDtCreatedDate',
        'dtEzsignfolderDelayedsenddate' => 'setDtEzsignfolderDelayedsenddate',
        'dtEzsignfolderSentdate' => 'setDtEzsignfolderSentdate',
        'dtEzsignfolderDuedate' => 'setDtEzsignfolderDuedate',
        'iEzsigndocument' => 'setIEzsigndocument',
        'iEzsigndocumentEdm' => 'setIEzsigndocumentEdm',
        'iEzsignsignature' => 'setIEzsignsignature',
        'iEzsignsignatureSigned' => 'setIEzsignsignatureSigned',
        'iEzsignformfieldgroup' => 'setIEzsignformfieldgroup',
        'iEzsignformfieldgroupCompleted' => 'setIEzsignformfieldgroupCompleted',
        'bEzsignformHasdependencies' => 'setBEzsignformHasdependencies',
        'dEzsignfolderCompletedpercentage' => 'setDEzsignfolderCompletedpercentage',
        'dEzsignfolderFormcompletedpercentage' => 'setDEzsignfolderFormcompletedpercentage',
        'dEzsignfolderSignaturecompletedpercentage' => 'setDEzsignfolderSignaturecompletedpercentage',
        'bEzsignfolderSigner' => 'setBEzsignfolderSigner'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pkiEzsignfolderID' => 'getPkiEzsignfolderID',
        'fkiEzsignfoldertypeID' => 'getFkiEzsignfoldertypeID',
        'eEzsignfoldertypePrivacylevel' => 'getEEzsignfoldertypePrivacylevel',
        'sEzsignfoldertypeNameX' => 'getSEzsignfoldertypeNameX',
        'sEzsignfolderDescription' => 'getSEzsignfolderDescription',
        'eEzsignfolderStep' => 'getEEzsignfolderStep',
        'dtCreatedDate' => 'getDtCreatedDate',
        'dtEzsignfolderDelayedsenddate' => 'getDtEzsignfolderDelayedsenddate',
        'dtEzsignfolderSentdate' => 'getDtEzsignfolderSentdate',
        'dtEzsignfolderDuedate' => 'getDtEzsignfolderDuedate',
        'iEzsigndocument' => 'getIEzsigndocument',
        'iEzsigndocumentEdm' => 'getIEzsigndocumentEdm',
        'iEzsignsignature' => 'getIEzsignsignature',
        'iEzsignsignatureSigned' => 'getIEzsignsignatureSigned',
        'iEzsignformfieldgroup' => 'getIEzsignformfieldgroup',
        'iEzsignformfieldgroupCompleted' => 'getIEzsignformfieldgroupCompleted',
        'bEzsignformHasdependencies' => 'getBEzsignformHasdependencies',
        'dEzsignfolderCompletedpercentage' => 'getDEzsignfolderCompletedpercentage',
        'dEzsignfolderFormcompletedpercentage' => 'getDEzsignfolderFormcompletedpercentage',
        'dEzsignfolderSignaturecompletedpercentage' => 'getDEzsignfolderSignaturecompletedpercentage',
        'bEzsignfolderSigner' => 'getBEzsignfolderSigner'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pkiEzsignfolderID', $data ?? [], null);
        $this->setIfExists('fkiEzsignfoldertypeID', $data ?? [], null);
        $this->setIfExists('eEzsignfoldertypePrivacylevel', $data ?? [], null);
        $this->setIfExists('sEzsignfoldertypeNameX', $data ?? [], null);
        $this->setIfExists('sEzsignfolderDescription', $data ?? [], null);
        $this->setIfExists('eEzsignfolderStep', $data ?? [], null);
        $this->setIfExists('dtCreatedDate', $data ?? [], null);
        $this->setIfExists('dtEzsignfolderDelayedsenddate', $data ?? [], null);
        $this->setIfExists('dtEzsignfolderSentdate', $data ?? [], null);
        $this->setIfExists('dtEzsignfolderDuedate', $data ?? [], null);
        $this->setIfExists('iEzsigndocument', $data ?? [], null);
        $this->setIfExists('iEzsigndocumentEdm', $data ?? [], null);
        $this->setIfExists('iEzsignsignature', $data ?? [], null);
        $this->setIfExists('iEzsignsignatureSigned', $data ?? [], null);
        $this->setIfExists('iEzsignformfieldgroup', $data ?? [], null);
        $this->setIfExists('iEzsignformfieldgroupCompleted', $data ?? [], null);
        $this->setIfExists('bEzsignformHasdependencies', $data ?? [], null);
        $this->setIfExists('dEzsignfolderCompletedpercentage', $data ?? [], null);
        $this->setIfExists('dEzsignfolderFormcompletedpercentage', $data ?? [], null);
        $this->setIfExists('dEzsignfolderSignaturecompletedpercentage', $data ?? [], null);
        $this->setIfExists('bEzsignfolderSigner', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pkiEzsignfolderID'] === null) {
            $invalidProperties[] = "'pkiEzsignfolderID' can't be null";
        }
        if (($this->container['pkiEzsignfolderID'] < 0)) {
            $invalidProperties[] = "invalid value for 'pkiEzsignfolderID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiEzsignfoldertypeID'] === null) {
            $invalidProperties[] = "'fkiEzsignfoldertypeID' can't be null";
        }
        if (($this->container['fkiEzsignfoldertypeID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiEzsignfoldertypeID', must be smaller than or equal to 65535.";
        }

        if (($this->container['fkiEzsignfoldertypeID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzsignfoldertypeID', must be bigger than or equal to 0.";
        }

        if ($this->container['eEzsignfoldertypePrivacylevel'] === null) {
            $invalidProperties[] = "'eEzsignfoldertypePrivacylevel' can't be null";
        }
        if ($this->container['sEzsignfoldertypeNameX'] === null) {
            $invalidProperties[] = "'sEzsignfoldertypeNameX' can't be null";
        }
        if ($this->container['sEzsignfolderDescription'] === null) {
            $invalidProperties[] = "'sEzsignfolderDescription' can't be null";
        }
	//if (!preg_match("/^.{0,75}$/", $this->container['sEzsignfolderDescription'])) {
        if (!is_null($this->container['sEzsignfolderDescription']) && !preg_match("/(*UTF8)^.{0,75}$/", $this->container['sEzsignfolderDescription'])) {
            $invalidProperties[] = "invalid value for 'sEzsignfolderDescription', must be conform to the pattern /^.{0,75}$/.";
        }

        if ($this->container['eEzsignfolderStep'] === null) {
            $invalidProperties[] = "'eEzsignfolderStep' can't be null";
        }
        if ($this->container['dtCreatedDate'] === null) {
            $invalidProperties[] = "'dtCreatedDate' can't be null";
        }
        if ($this->container['iEzsigndocument'] === null) {
            $invalidProperties[] = "'iEzsigndocument' can't be null";
        }
        if ($this->container['iEzsigndocumentEdm'] === null) {
            $invalidProperties[] = "'iEzsigndocumentEdm' can't be null";
        }
        if ($this->container['iEzsignsignature'] === null) {
            $invalidProperties[] = "'iEzsignsignature' can't be null";
        }
        if ($this->container['iEzsignsignatureSigned'] === null) {
            $invalidProperties[] = "'iEzsignsignatureSigned' can't be null";
        }
        if ($this->container['iEzsignformfieldgroup'] === null) {
            $invalidProperties[] = "'iEzsignformfieldgroup' can't be null";
        }
        if ($this->container['iEzsignformfieldgroupCompleted'] === null) {
            $invalidProperties[] = "'iEzsignformfieldgroupCompleted' can't be null";
        }
        if ($this->container['dEzsignfolderCompletedpercentage'] === null) {
            $invalidProperties[] = "'dEzsignfolderCompletedpercentage' can't be null";
        }
	//if (!preg_match("/^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/", $this->container['dEzsignfolderCompletedpercentage'])) {
        if (!is_null($this->container['dEzsignfolderCompletedpercentage']) && !preg_match("/(*UTF8)^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/", $this->container['dEzsignfolderCompletedpercentage'])) {
            $invalidProperties[] = "invalid value for 'dEzsignfolderCompletedpercentage', must be conform to the pattern /^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/.";
        }

        if ($this->container['dEzsignfolderFormcompletedpercentage'] === null) {
            $invalidProperties[] = "'dEzsignfolderFormcompletedpercentage' can't be null";
        }
	//if (!preg_match("/^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/", $this->container['dEzsignfolderFormcompletedpercentage'])) {
        if (!is_null($this->container['dEzsignfolderFormcompletedpercentage']) && !preg_match("/(*UTF8)^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/", $this->container['dEzsignfolderFormcompletedpercentage'])) {
            $invalidProperties[] = "invalid value for 'dEzsignfolderFormcompletedpercentage', must be conform to the pattern /^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/.";
        }

        if ($this->container['dEzsignfolderSignaturecompletedpercentage'] === null) {
            $invalidProperties[] = "'dEzsignfolderSignaturecompletedpercentage' can't be null";
        }
	//if (!preg_match("/^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/", $this->container['dEzsignfolderSignaturecompletedpercentage'])) {
        if (!is_null($this->container['dEzsignfolderSignaturecompletedpercentage']) && !preg_match("/(*UTF8)^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/", $this->container['dEzsignfolderSignaturecompletedpercentage'])) {
            $invalidProperties[] = "invalid value for 'dEzsignfolderSignaturecompletedpercentage', must be conform to the pattern /^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pkiEzsignfolderID
     *
     * @return int
     */
    public function getPkiEzsignfolderID()
    {
	//return $this->container['pkiEzsignfolderID'];
        return $this->container['pkiEzsignfolderID'];
    }

    /**
     * Sets pkiEzsignfolderID
     *
     * @param int $pkiEzsignfolderID The unique ID of the Ezsignfolder
     *
     * @return self
     */
    public function setPkiEzsignfolderID($pkiEzsignfolderID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($pkiEzsignfolderID)) {
            //throw new \InvalidArgumentException('non-nullable pkiEzsignfolderID cannot be null');
        //}

	//if (($pkiEzsignfolderID < 0)) {
        if (($pkiEzsignfolderID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $pkiEzsignfolderID when calling EzsignfolderListElement., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsignfolderID)?'null':'"'.$pkiEzsignfolderID.'"').' for pkiEzsignfolderID when calling EzsignfolderListElement., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['pkiEzsignfolderID'] = $pkiEzsignfolderID;
        $this->container['pkiEzsignfolderID'] = (is_null($pkiEzsignfolderID) ? null : (int) $pkiEzsignfolderID);

        return $this;
    }

    /**
     * Gets fkiEzsignfoldertypeID
     *
     * @return int
     */
    public function getFkiEzsignfoldertypeID()
    {
	//return $this->container['fkiEzsignfoldertypeID'];
        return $this->container['fkiEzsignfoldertypeID'];
    }

    /**
     * Sets fkiEzsignfoldertypeID
     *
     * @param int $fkiEzsignfoldertypeID The unique ID of the Ezsignfoldertype.
     *
     * @return self
     */
    public function setFkiEzsignfoldertypeID($fkiEzsignfoldertypeID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzsignfoldertypeID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzsignfoldertypeID cannot be null');
        //}

	//if (($fkiEzsignfoldertypeID > 65535)) {
        if (($fkiEzsignfoldertypeID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzsignfoldertypeID when calling EzsignfolderListElement., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzsignfoldertypeID)?'null':'"'.$fkiEzsignfoldertypeID.'"').' for fkiEzsignfoldertypeID when calling EzsignfolderListElement., must be smaller than or equal to 65535.');
        }
	//if (($fkiEzsignfoldertypeID < 0)) {
        if (($fkiEzsignfoldertypeID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzsignfoldertypeID when calling EzsignfolderListElement., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzsignfoldertypeID)?'null':'"'.$fkiEzsignfoldertypeID.'"').' for fkiEzsignfoldertypeID when calling EzsignfolderListElement., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzsignfoldertypeID'] = $fkiEzsignfoldertypeID;
        $this->container['fkiEzsignfoldertypeID'] = (is_null($fkiEzsignfoldertypeID) ? null : (int) $fkiEzsignfoldertypeID);

        return $this;
    }

    /**
     * Gets eEzsignfoldertypePrivacylevel
     *
     * @return \eZmaxAPI\Model\FieldEEzsignfoldertypePrivacylevel
     */
    public function getEEzsignfoldertypePrivacylevel()
    {
	//return $this->container['eEzsignfoldertypePrivacylevel'];
        return $this->container['eEzsignfoldertypePrivacylevel'];
    }

    /**
     * Sets eEzsignfoldertypePrivacylevel
     *
     * @param \eZmaxAPI\Model\FieldEEzsignfoldertypePrivacylevel $eEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel
     *
     * @return self
     */
    public function setEEzsignfoldertypePrivacylevel($eEzsignfoldertypePrivacylevel)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eEzsignfoldertypePrivacylevel)) {
            //throw new \InvalidArgumentException('non-nullable eEzsignfoldertypePrivacylevel cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eEzsignfoldertypePrivacylevel'] = $eEzsignfoldertypePrivacylevel;
        $this->container['eEzsignfoldertypePrivacylevel'] = $eEzsignfoldertypePrivacylevel;

        return $this;
    }

    /**
     * Gets sEzsignfoldertypeNameX
     *
     * @return string
     */
    public function getSEzsignfoldertypeNameX()
    {
	//return $this->container['sEzsignfoldertypeNameX'];
        return is_null($this->container['sEzsignfoldertypeNameX']) ? null : trim($this->container['sEzsignfoldertypeNameX']);
    }

    /**
     * Sets sEzsignfoldertypeNameX
     *
     * @param string $sEzsignfoldertypeNameX The name of the Ezsignfoldertype in the language of the requester
     *
     * @return self
     */
    public function setSEzsignfoldertypeNameX($sEzsignfoldertypeNameX)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sEzsignfoldertypeNameX)) {
            //throw new \InvalidArgumentException('non-nullable sEzsignfoldertypeNameX cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sEzsignfoldertypeNameX'] = $sEzsignfoldertypeNameX;
        $this->container['sEzsignfoldertypeNameX'] = (is_null($sEzsignfoldertypeNameX) ? null : trim((string) $sEzsignfoldertypeNameX));

        return $this;
    }

    /**
     * Gets sEzsignfolderDescription
     *
     * @return string
     */
    public function getSEzsignfolderDescription()
    {
	//return $this->container['sEzsignfolderDescription'];
        return is_null($this->container['sEzsignfolderDescription']) ? null : trim($this->container['sEzsignfolderDescription']);
    }

    /**
     * Sets sEzsignfolderDescription
     *
     * @param string $sEzsignfolderDescription The description of the Ezsignfolder
     *
     * @return self
     */
    public function setSEzsignfolderDescription($sEzsignfolderDescription)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sEzsignfolderDescription)) {
            //throw new \InvalidArgumentException('non-nullable sEzsignfolderDescription cannot be null');
        //}

	//if ((!preg_match("/^.{0,75}$/", ObjectSerializer::toString($sEzsignfolderDescription)))) {
        if (!is_null($sEzsignfolderDescription) && (!preg_match("/(*UTF8)^.{0,75}$/", ObjectSerializer::toString($sEzsignfolderDescription)))) {
	    //throw new \InvalidArgumentException("invalid value for \$sEzsignfolderDescription when calling EzsignfolderListElement., must conform to the pattern /^.{0,75}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($sEzsignfolderDescription)?'null':'"'.$sEzsignfolderDescription.'"')." for sEzsignfolderDescription when calling EzsignfolderListElement., must conform to the pattern /^.{0,75}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sEzsignfolderDescription'] = $sEzsignfolderDescription;
        $this->container['sEzsignfolderDescription'] = (is_null($sEzsignfolderDescription) ? null : trim((string) $sEzsignfolderDescription));

        return $this;
    }

    /**
     * Gets eEzsignfolderStep
     *
     * @return \eZmaxAPI\Model\FieldEEzsignfolderStep
     */
    public function getEEzsignfolderStep()
    {
	//return $this->container['eEzsignfolderStep'];
        return $this->container['eEzsignfolderStep'];
    }

    /**
     * Sets eEzsignfolderStep
     *
     * @param \eZmaxAPI\Model\FieldEEzsignfolderStep $eEzsignfolderStep eEzsignfolderStep
     *
     * @return self
     */
    public function setEEzsignfolderStep($eEzsignfolderStep)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eEzsignfolderStep)) {
            //throw new \InvalidArgumentException('non-nullable eEzsignfolderStep cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eEzsignfolderStep'] = $eEzsignfolderStep;
        $this->container['eEzsignfolderStep'] = $eEzsignfolderStep;

        return $this;
    }

    /**
     * Gets dtCreatedDate
     *
     * @return string
     */
    public function getDtCreatedDate()
    {
	//return $this->container['dtCreatedDate'];
        return is_null($this->container['dtCreatedDate']) ? null : trim($this->container['dtCreatedDate']);
    }

    /**
     * Sets dtCreatedDate
     *
     * @param string $dtCreatedDate The date and time at which the object was created
     *
     * @return self
     */
    public function setDtCreatedDate($dtCreatedDate)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtCreatedDate)) {
            //throw new \InvalidArgumentException('non-nullable dtCreatedDate cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtCreatedDate'] = $dtCreatedDate;
        $this->container['dtCreatedDate'] = (is_null($dtCreatedDate) ? null : trim((string) $dtCreatedDate));

        return $this;
    }

    /**
     * Gets dtEzsignfolderDelayedsenddate
     *
     * @return string|null
     */
    public function getDtEzsignfolderDelayedsenddate()
    {
	//return $this->container['dtEzsignfolderDelayedsenddate'];
        return is_null($this->container['dtEzsignfolderDelayedsenddate']) ? null : trim($this->container['dtEzsignfolderDelayedsenddate']);
    }

    /**
     * Sets dtEzsignfolderDelayedsenddate
     *
     * @param string|null $dtEzsignfolderDelayedsenddate The date and time at which the Ezsignfolder will be sent in the future.
     *
     * @return self
     */
    public function setDtEzsignfolderDelayedsenddate($dtEzsignfolderDelayedsenddate)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtEzsignfolderDelayedsenddate)) {
            //throw new \InvalidArgumentException('non-nullable dtEzsignfolderDelayedsenddate cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtEzsignfolderDelayedsenddate'] = $dtEzsignfolderDelayedsenddate;
        $this->container['dtEzsignfolderDelayedsenddate'] = (is_null($dtEzsignfolderDelayedsenddate) ? null : trim((string) $dtEzsignfolderDelayedsenddate));

        return $this;
    }

    /**
     * Gets dtEzsignfolderSentdate
     *
     * @return string|null
     */
    public function getDtEzsignfolderSentdate()
    {
	//return $this->container['dtEzsignfolderSentdate'];
        return is_null($this->container['dtEzsignfolderSentdate']) ? null : trim($this->container['dtEzsignfolderSentdate']);
    }

    /**
     * Sets dtEzsignfolderSentdate
     *
     * @param string|null $dtEzsignfolderSentdate The date and time at which the Ezsignfolder was sent the last time.
     *
     * @return self
     */
    public function setDtEzsignfolderSentdate($dtEzsignfolderSentdate)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtEzsignfolderSentdate)) {
            //throw new \InvalidArgumentException('non-nullable dtEzsignfolderSentdate cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtEzsignfolderSentdate'] = $dtEzsignfolderSentdate;
        $this->container['dtEzsignfolderSentdate'] = (is_null($dtEzsignfolderSentdate) ? null : trim((string) $dtEzsignfolderSentdate));

        return $this;
    }

    /**
     * Gets dtEzsignfolderDuedate
     *
     * @return string|null
     */
    public function getDtEzsignfolderDuedate()
    {
	//return $this->container['dtEzsignfolderDuedate'];
        return is_null($this->container['dtEzsignfolderDuedate']) ? null : trim($this->container['dtEzsignfolderDuedate']);
    }

    /**
     * Sets dtEzsignfolderDuedate
     *
     * @param string|null $dtEzsignfolderDuedate The maximum date and time at which the Ezsignfolder can be signed.
     *
     * @return self
     */
    public function setDtEzsignfolderDuedate($dtEzsignfolderDuedate)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtEzsignfolderDuedate)) {
            //throw new \InvalidArgumentException('non-nullable dtEzsignfolderDuedate cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtEzsignfolderDuedate'] = $dtEzsignfolderDuedate;
        $this->container['dtEzsignfolderDuedate'] = (is_null($dtEzsignfolderDuedate) ? null : trim((string) $dtEzsignfolderDuedate));

        return $this;
    }

    /**
     * Gets iEzsigndocument
     *
     * @return int
     */
    public function getIEzsigndocument()
    {
	//return $this->container['iEzsigndocument'];
        return $this->container['iEzsigndocument'];
    }

    /**
     * Sets iEzsigndocument
     *
     * @param int $iEzsigndocument The total number of Ezsigndocument in the folder
     *
     * @return self
     */
    public function setIEzsigndocument($iEzsigndocument)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigndocument)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigndocument cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigndocument'] = $iEzsigndocument;
        $this->container['iEzsigndocument'] = (is_null($iEzsigndocument) ? null : (int) $iEzsigndocument);

        return $this;
    }

    /**
     * Gets iEzsigndocumentEdm
     *
     * @return int
     */
    public function getIEzsigndocumentEdm()
    {
	//return $this->container['iEzsigndocumentEdm'];
        return $this->container['iEzsigndocumentEdm'];
    }

    /**
     * Sets iEzsigndocumentEdm
     *
     * @param int $iEzsigndocumentEdm The total number of Ezsigndocument in the folder that were saved in the edm system
     *
     * @return self
     */
    public function setIEzsigndocumentEdm($iEzsigndocumentEdm)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigndocumentEdm)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigndocumentEdm cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigndocumentEdm'] = $iEzsigndocumentEdm;
        $this->container['iEzsigndocumentEdm'] = (is_null($iEzsigndocumentEdm) ? null : (int) $iEzsigndocumentEdm);

        return $this;
    }

    /**
     * Gets iEzsignsignature
     *
     * @return int
     */
    public function getIEzsignsignature()
    {
	//return $this->container['iEzsignsignature'];
        return $this->container['iEzsignsignature'];
    }

    /**
     * Sets iEzsignsignature
     *
     * @param int $iEzsignsignature The total number of signature blocks in all Ezsigndocuments in the folder
     *
     * @return self
     */
    public function setIEzsignsignature($iEzsignsignature)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsignsignature)) {
            //throw new \InvalidArgumentException('non-nullable iEzsignsignature cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsignsignature'] = $iEzsignsignature;
        $this->container['iEzsignsignature'] = (is_null($iEzsignsignature) ? null : (int) $iEzsignsignature);

        return $this;
    }

    /**
     * Gets iEzsignsignatureSigned
     *
     * @return int
     */
    public function getIEzsignsignatureSigned()
    {
	//return $this->container['iEzsignsignatureSigned'];
        return $this->container['iEzsignsignatureSigned'];
    }

    /**
     * Sets iEzsignsignatureSigned
     *
     * @param int $iEzsignsignatureSigned The total number of already signed signature blocks in all Ezsigndocuments in the folder
     *
     * @return self
     */
    public function setIEzsignsignatureSigned($iEzsignsignatureSigned)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsignsignatureSigned)) {
            //throw new \InvalidArgumentException('non-nullable iEzsignsignatureSigned cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsignsignatureSigned'] = $iEzsignsignatureSigned;
        $this->container['iEzsignsignatureSigned'] = (is_null($iEzsignsignatureSigned) ? null : (int) $iEzsignsignatureSigned);

        return $this;
    }

    /**
     * Gets iEzsignformfieldgroup
     *
     * @return int
     */
    public function getIEzsignformfieldgroup()
    {
	//return $this->container['iEzsignformfieldgroup'];
        return $this->container['iEzsignformfieldgroup'];
    }

    /**
     * Sets iEzsignformfieldgroup
     *
     * @param int $iEzsignformfieldgroup The total number of Ezsignformfieldgroup in all Ezsigndocuments in the folder
     *
     * @return self
     */
    public function setIEzsignformfieldgroup($iEzsignformfieldgroup)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsignformfieldgroup)) {
            //throw new \InvalidArgumentException('non-nullable iEzsignformfieldgroup cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsignformfieldgroup'] = $iEzsignformfieldgroup;
        $this->container['iEzsignformfieldgroup'] = (is_null($iEzsignformfieldgroup) ? null : (int) $iEzsignformfieldgroup);

        return $this;
    }

    /**
     * Gets iEzsignformfieldgroupCompleted
     *
     * @return int
     */
    public function getIEzsignformfieldgroupCompleted()
    {
	//return $this->container['iEzsignformfieldgroupCompleted'];
        return $this->container['iEzsignformfieldgroupCompleted'];
    }

    /**
     * Sets iEzsignformfieldgroupCompleted
     *
     * @param int $iEzsignformfieldgroupCompleted The total number of completed Ezsignformfieldgroup in all Ezsigndocuments in the folder
     *
     * @return self
     */
    public function setIEzsignformfieldgroupCompleted($iEzsignformfieldgroupCompleted)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsignformfieldgroupCompleted)) {
            //throw new \InvalidArgumentException('non-nullable iEzsignformfieldgroupCompleted cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsignformfieldgroupCompleted'] = $iEzsignformfieldgroupCompleted;
        $this->container['iEzsignformfieldgroupCompleted'] = (is_null($iEzsignformfieldgroupCompleted) ? null : (int) $iEzsignformfieldgroupCompleted);

        return $this;
    }

    /**
     * Gets bEzsignformHasdependencies
     *
     * @return bool|null
     */
    public function getBEzsignformHasdependencies()
    {
	//return $this->container['bEzsignformHasdependencies'];
        return $this->container['bEzsignformHasdependencies'];
    }

    /**
     * Sets bEzsignformHasdependencies
     *
     * @param bool|null $bEzsignformHasdependencies Whether the Ezsignform/Ezsignsignatures has dependencies or not
     *
     * @return self
     */
    public function setBEzsignformHasdependencies($bEzsignformHasdependencies)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bEzsignformHasdependencies)) {
            //throw new \InvalidArgumentException('non-nullable bEzsignformHasdependencies cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bEzsignformHasdependencies'] = $bEzsignformHasdependencies;
        $this->container['bEzsignformHasdependencies'] = (is_null($bEzsignformHasdependencies) ? null : (bool) $bEzsignformHasdependencies);

        return $this;
    }

    /**
     * Gets dEzsignfolderCompletedpercentage
     *
     * @return string
     */
    public function getDEzsignfolderCompletedpercentage()
    {
	//return $this->container['dEzsignfolderCompletedpercentage'];
        return is_null($this->container['dEzsignfolderCompletedpercentage']) ? null : trim($this->container['dEzsignfolderCompletedpercentage']);
    }

    /**
     * Sets dEzsignfolderCompletedpercentage
     *
     * @param string $dEzsignfolderCompletedpercentage Percentage of Ezsignform/Ezsignsignatures has completed
     *
     * @return self
     */
    public function setDEzsignfolderCompletedpercentage($dEzsignfolderCompletedpercentage)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dEzsignfolderCompletedpercentage)) {
            //throw new \InvalidArgumentException('non-nullable dEzsignfolderCompletedpercentage cannot be null');
        //}

	//if ((!preg_match("/^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/", ObjectSerializer::toString($dEzsignfolderCompletedpercentage)))) {
        if (!is_null($dEzsignfolderCompletedpercentage) && (!preg_match("/(*UTF8)^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/", ObjectSerializer::toString($dEzsignfolderCompletedpercentage)))) {
	    //throw new \InvalidArgumentException("invalid value for \$dEzsignfolderCompletedpercentage when calling EzsignfolderListElement., must conform to the pattern /^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($dEzsignfolderCompletedpercentage)?'null':'"'.$dEzsignfolderCompletedpercentage.'"')." for dEzsignfolderCompletedpercentage when calling EzsignfolderListElement., must conform to the pattern /^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dEzsignfolderCompletedpercentage'] = $dEzsignfolderCompletedpercentage;
        $this->container['dEzsignfolderCompletedpercentage'] = (is_null($dEzsignfolderCompletedpercentage) ? null : trim((string) $dEzsignfolderCompletedpercentage));

        return $this;
    }

    /**
     * Gets dEzsignfolderFormcompletedpercentage
     *
     * @return string
     */
    public function getDEzsignfolderFormcompletedpercentage()
    {
	//return $this->container['dEzsignfolderFormcompletedpercentage'];
        return is_null($this->container['dEzsignfolderFormcompletedpercentage']) ? null : trim($this->container['dEzsignfolderFormcompletedpercentage']);
    }

    /**
     * Sets dEzsignfolderFormcompletedpercentage
     *
     * @param string $dEzsignfolderFormcompletedpercentage Percentage of Ezsignform has completed
     *
     * @return self
     */
    public function setDEzsignfolderFormcompletedpercentage($dEzsignfolderFormcompletedpercentage)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dEzsignfolderFormcompletedpercentage)) {
            //throw new \InvalidArgumentException('non-nullable dEzsignfolderFormcompletedpercentage cannot be null');
        //}

	//if ((!preg_match("/^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/", ObjectSerializer::toString($dEzsignfolderFormcompletedpercentage)))) {
        if (!is_null($dEzsignfolderFormcompletedpercentage) && (!preg_match("/(*UTF8)^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/", ObjectSerializer::toString($dEzsignfolderFormcompletedpercentage)))) {
	    //throw new \InvalidArgumentException("invalid value for \$dEzsignfolderFormcompletedpercentage when calling EzsignfolderListElement., must conform to the pattern /^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($dEzsignfolderFormcompletedpercentage)?'null':'"'.$dEzsignfolderFormcompletedpercentage.'"')." for dEzsignfolderFormcompletedpercentage when calling EzsignfolderListElement., must conform to the pattern /^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dEzsignfolderFormcompletedpercentage'] = $dEzsignfolderFormcompletedpercentage;
        $this->container['dEzsignfolderFormcompletedpercentage'] = (is_null($dEzsignfolderFormcompletedpercentage) ? null : trim((string) $dEzsignfolderFormcompletedpercentage));

        return $this;
    }

    /**
     * Gets dEzsignfolderSignaturecompletedpercentage
     *
     * @return string
     */
    public function getDEzsignfolderSignaturecompletedpercentage()
    {
	//return $this->container['dEzsignfolderSignaturecompletedpercentage'];
        return is_null($this->container['dEzsignfolderSignaturecompletedpercentage']) ? null : trim($this->container['dEzsignfolderSignaturecompletedpercentage']);
    }

    /**
     * Sets dEzsignfolderSignaturecompletedpercentage
     *
     * @param string $dEzsignfolderSignaturecompletedpercentage Percentage of Ezsignsignatures has signed
     *
     * @return self
     */
    public function setDEzsignfolderSignaturecompletedpercentage($dEzsignfolderSignaturecompletedpercentage)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dEzsignfolderSignaturecompletedpercentage)) {
            //throw new \InvalidArgumentException('non-nullable dEzsignfolderSignaturecompletedpercentage cannot be null');
        //}

	//if ((!preg_match("/^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/", ObjectSerializer::toString($dEzsignfolderSignaturecompletedpercentage)))) {
        if (!is_null($dEzsignfolderSignaturecompletedpercentage) && (!preg_match("/(*UTF8)^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/", ObjectSerializer::toString($dEzsignfolderSignaturecompletedpercentage)))) {
	    //throw new \InvalidArgumentException("invalid value for \$dEzsignfolderSignaturecompletedpercentage when calling EzsignfolderListElement., must conform to the pattern /^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($dEzsignfolderSignaturecompletedpercentage)?'null':'"'.$dEzsignfolderSignaturecompletedpercentage.'"')." for dEzsignfolderSignaturecompletedpercentage when calling EzsignfolderListElement., must conform to the pattern /^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dEzsignfolderSignaturecompletedpercentage'] = $dEzsignfolderSignaturecompletedpercentage;
        $this->container['dEzsignfolderSignaturecompletedpercentage'] = (is_null($dEzsignfolderSignaturecompletedpercentage) ? null : trim((string) $dEzsignfolderSignaturecompletedpercentage));

        return $this;
    }

    /**
     * Gets bEzsignfolderSigner
     *
     * @return bool|null
     */
    public function getBEzsignfolderSigner()
    {
	//return $this->container['bEzsignfolderSigner'];
        return $this->container['bEzsignfolderSigner'];
    }

    /**
     * Sets bEzsignfolderSigner
     *
     * @param bool|null $bEzsignfolderSigner Whether the Ezsignfolder has an Ezsignsignatures that need to be signed or an Ezsignformfieldgroups that need to be filled by the current user
     *
     * @return self
     */
    public function setBEzsignfolderSigner($bEzsignfolderSigner)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bEzsignfolderSigner)) {
            //throw new \InvalidArgumentException('non-nullable bEzsignfolderSigner cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bEzsignfolderSigner'] = $bEzsignfolderSigner;
        $this->container['bEzsignfolderSigner'] = (is_null($bEzsignfolderSigner) ? null : (bool) $bEzsignfolderSigner);

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


