<?php
/**
 * ListpresentationRequestCompound
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.7
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * ListpresentationRequestCompound Class Doc Comment
 *
 * @category Class
 * @description A Listpresentation Object and children to create a complete structure
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ListpresentationRequestCompound implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'listpresentation-RequestCompound';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sListpresentationDescription' => 'string',
        'sListpresentationFilter' => 'string',
        'sListpresentationOrderby' => 'string',
        'aSColumnName' => 'string[]',
        'iListpresentationRowMax' => 'int',
        'iListpresentationRowOffset' => 'int',
        'bListpresentationDefault' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sListpresentationDescription' => null,
        'sListpresentationFilter' => null,
        'sListpresentationOrderby' => null,
        'aSColumnName' => null,
        'iListpresentationRowMax' => null,
        'iListpresentationRowOffset' => null,
        'bListpresentationDefault' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sListpresentationDescription' => 'sListpresentationDescription',
        'sListpresentationFilter' => 'sListpresentationFilter',
        'sListpresentationOrderby' => 'sListpresentationOrderby',
        'aSColumnName' => 'a_sColumnName',
        'iListpresentationRowMax' => 'iListpresentationRowMax',
        'iListpresentationRowOffset' => 'iListpresentationRowOffset',
        'bListpresentationDefault' => 'bListpresentationDefault'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sListpresentationDescription' => 'setSListpresentationDescription',
        'sListpresentationFilter' => 'setSListpresentationFilter',
        'sListpresentationOrderby' => 'setSListpresentationOrderby',
        'aSColumnName' => 'setASColumnName',
        'iListpresentationRowMax' => 'setIListpresentationRowMax',
        'iListpresentationRowOffset' => 'setIListpresentationRowOffset',
        'bListpresentationDefault' => 'setBListpresentationDefault'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sListpresentationDescription' => 'getSListpresentationDescription',
        'sListpresentationFilter' => 'getSListpresentationFilter',
        'sListpresentationOrderby' => 'getSListpresentationOrderby',
        'aSColumnName' => 'getASColumnName',
        'iListpresentationRowMax' => 'getIListpresentationRowMax',
        'iListpresentationRowOffset' => 'getIListpresentationRowOffset',
        'bListpresentationDefault' => 'getBListpresentationDefault'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sListpresentationDescription'] = $data['sListpresentationDescription'] ?? null;
        $this->container['sListpresentationFilter'] = $data['sListpresentationFilter'] ?? null;
        $this->container['sListpresentationOrderby'] = $data['sListpresentationOrderby'] ?? null;
        $this->container['aSColumnName'] = $data['aSColumnName'] ?? null;
        $this->container['iListpresentationRowMax'] = $data['iListpresentationRowMax'] ?? null;
        $this->container['iListpresentationRowOffset'] = $data['iListpresentationRowOffset'] ?? null;
        $this->container['bListpresentationDefault'] = $data['bListpresentationDefault'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sListpresentationDescription'] === null) {
            $invalidProperties[] = "'sListpresentationDescription' can't be null";
        }
        if ($this->container['sListpresentationFilter'] === null) {
            $invalidProperties[] = "'sListpresentationFilter' can't be null";
        }
        if ($this->container['sListpresentationOrderby'] === null) {
            $invalidProperties[] = "'sListpresentationOrderby' can't be null";
        }
        if ($this->container['aSColumnName'] === null) {
            $invalidProperties[] = "'aSColumnName' can't be null";
        }
        if ($this->container['iListpresentationRowMax'] === null) {
            $invalidProperties[] = "'iListpresentationRowMax' can't be null";
        }
        if ($this->container['iListpresentationRowOffset'] === null) {
            $invalidProperties[] = "'iListpresentationRowOffset' can't be null";
        }
        if ($this->container['bListpresentationDefault'] === null) {
            $invalidProperties[] = "'bListpresentationDefault' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sListpresentationDescription
     *
     * @return string
     */
    public function getSListpresentationDescription()
    {
        return $this->container['sListpresentationDescription'];
    }

    /**
     * Sets sListpresentationDescription
     *
     * @param string $sListpresentationDescription A descriptive for the list presentation
     *
     * @return self
     */
    public function setSListpresentationDescription($sListpresentationDescription)
    {
        $this->container['sListpresentationDescription'] = $sListpresentationDescription;

        return $this;
    }

    /**
     * Gets sListpresentationFilter
     *
     * @return string
     */
    public function getSListpresentationFilter()
    {
        return $this->container['sListpresentationFilter'];
    }

    /**
     * Sets sListpresentationFilter
     *
     * @param string $sListpresentationFilter The filter to apply to the request to limit results.
     *
     * @return self
     */
    public function setSListpresentationFilter($sListpresentationFilter)
    {
        $this->container['sListpresentationFilter'] = $sListpresentationFilter;

        return $this;
    }

    /**
     * Gets sListpresentationOrderby
     *
     * @return string
     */
    public function getSListpresentationOrderby()
    {
        return $this->container['sListpresentationOrderby'];
    }

    /**
     * Sets sListpresentationOrderby
     *
     * @param string $sListpresentationOrderby The order by the user chose
     *
     * @return self
     */
    public function setSListpresentationOrderby($sListpresentationOrderby)
    {
        $this->container['sListpresentationOrderby'] = $sListpresentationOrderby;

        return $this;
    }

    /**
     * Gets aSColumnName
     *
     * @return string[]
     */
    public function getASColumnName()
    {
        return $this->container['aSColumnName'];
    }

    /**
     * Sets aSColumnName
     *
     * @param string[] $aSColumnName An array of column names that the user chose to bee visible
     *
     * @return self
     */
    public function setASColumnName($aSColumnName)
    {
        $this->container['aSColumnName'] = $aSColumnName;

        return $this;
    }

    /**
     * Gets iListpresentationRowMax
     *
     * @return int
     */
    public function getIListpresentationRowMax()
    {
        return $this->container['iListpresentationRowMax'];
    }

    /**
     * Sets iListpresentationRowMax
     *
     * @param int $iListpresentationRowMax The maximum numbers of results to be returned
     *
     * @return self
     */
    public function setIListpresentationRowMax($iListpresentationRowMax)
    {
        $this->container['iListpresentationRowMax'] = $iListpresentationRowMax;

        return $this;
    }

    /**
     * Gets iListpresentationRowOffset
     *
     * @return int
     */
    public function getIListpresentationRowOffset()
    {
        return $this->container['iListpresentationRowOffset'];
    }

    /**
     * Sets iListpresentationRowOffset
     *
     * @param int $iListpresentationRowOffset The starting element from where to start retrieving the results. For example if you started at iRowOffset=0 and asked for iRowMax=100, to get the next 100 results, you could specify iRowOffset=100&iRowMax=100,
     *
     * @return self
     */
    public function setIListpresentationRowOffset($iListpresentationRowOffset)
    {
        $this->container['iListpresentationRowOffset'] = $iListpresentationRowOffset;

        return $this;
    }

    /**
     * Gets bListpresentationDefault
     *
     * @return bool
     */
    public function getBListpresentationDefault()
    {
        return $this->container['bListpresentationDefault'];
    }

    /**
     * Sets bListpresentationDefault
     *
     * @param bool $bListpresentationDefault Set to true if the user chose this Listpresentation as the default one. A single element should be set to true
     *
     * @return self
     */
    public function setBListpresentationDefault($bListpresentationDefault)
    {
        $this->container['bListpresentationDefault'] = $bListpresentationDefault;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


