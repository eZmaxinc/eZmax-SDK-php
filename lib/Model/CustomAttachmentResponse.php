<?php
/**
 * CustomAttachmentResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * CustomAttachmentResponse Class Doc Comment
 *
 * @category Class
 * @description A Custom Attachment Object
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomAttachmentResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Custom-Attachment-Response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pkiAttachmentID' => 'int',
        'fkiComputerID' => 'int',
        'fkiAdjustmentID' => 'int',
        'fkiAgentID' => 'int',
        'fkiBankaccountID' => 'int',
        'fkiBrokerID' => 'int',
        'fkiCommissionadvanceID' => 'int',
        'fkiCommunicationID' => 'int',
        'fkiCustomerID' => 'int',
        'fkiCustomertemplateID' => 'int',
        'fkiDepositID' => 'int',
        'fkiDeposittransitchequeID' => 'int',
        'fkiElectronicfundstransferID' => 'int',
        'fkiEmployeeID' => 'int',
        'fkiExternalbrokerID' => 'int',
        'fkiEzcomadvanceserverID' => 'int',
        'fkiEzcomcompanyID' => 'int',
        'fkiEzsigndocumentID' => 'int',
        'fkiGhacqcontractID' => 'int',
        'fkiInscriptionID' => 'int',
        'fkiInscriptiontempID' => 'int',
        'fkiInscriptionnotauthenticatedID' => 'int',
        'fkiInvoiceID' => 'int',
        'fkiBuyercontractID' => 'int',
        'fkiFranchisebrokerID' => 'int',
        'fkiFranchiseagenceID' => 'int',
        'fkiFranchiseofficeID' => 'int',
        'fkiFranchisefranchiseID' => 'int',
        'fkiFranchisecomplaintID' => 'int',
        'fkiLeadID' => 'int',
        'fkiMarketingprogramID' => 'int',
        'fkiMarketingfollowID' => 'int',
        'fkiNotaryID' => 'int',
        'fkiOfficetaxreportID' => 'int',
        'fkiOtherincomeID' => 'int',
        'fkiPaymentpreparationID' => 'int',
        'fkiPurchaseID' => 'int',
        'fkiSalaryID' => 'int',
        'fkiSupplierID' => 'int',
        'fkiTranqcontractID' => 'int',
        'fkiTemplateID' => 'int',
        'fkiInscriptionchecklistID' => 'int',
        'fkiFolderID' => 'int',
        'fkiRejectedoffertopurchaseID' => 'int',
        'fkiDisclosureID' => 'int',
        'fkiReconciliationID' => 'int',
        'fkiEzsigndocumentIDReference' => 'int',
        'eAttachmentDocumenttype' => '\eZmaxAPI\Model\FieldEAttachmentDocumenttype',
        'sAttachmentName' => 'string',
        'eAttachmentPrivacy' => '\eZmaxAPI\Model\FieldEAttachmentPrivacy',
        'fkiUserIDSpecific' => 'int',
        'eAttachmentType' => '\eZmaxAPI\Model\FieldEAttachmentType',
        'iAttachmentSize' => 'int',
        'iAttachmentEDMmoduleflag' => 'int',
        'sAttachmentMD5' => 'string',
        'bAttachmentDeleted' => 'bool',
        'bAttachmentValid' => 'bool',
        'eAttachmentVerified' => '\eZmaxAPI\Model\FieldEAttachmentVerified',
        'tAttachmentRejectioncomment' => 'string',
        'fkiUserIDOwner' => 'int',
        'objAudit' => '\eZmaxAPI\Model\CommonAudit',
        'objAttachmentProof' => '\eZmaxAPI\Model\AttachmentResponseCompound',
        'objAttachmentProofdocument' => '\eZmaxAPI\Model\AttachmentResponseCompound',
        'aObjAttachmentAttachment' => '\eZmaxAPI\Model\AttachmentResponseCompound[]',
        'aObjAttachmentVersion' => '\eZmaxAPI\Model\AttachmentResponseCompound[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pkiAttachmentID' => null,
        'fkiComputerID' => null,
        'fkiAdjustmentID' => null,
        'fkiAgentID' => null,
        'fkiBankaccountID' => null,
        'fkiBrokerID' => null,
        'fkiCommissionadvanceID' => null,
        'fkiCommunicationID' => null,
        'fkiCustomerID' => null,
        'fkiCustomertemplateID' => null,
        'fkiDepositID' => null,
        'fkiDeposittransitchequeID' => null,
        'fkiElectronicfundstransferID' => null,
        'fkiEmployeeID' => null,
        'fkiExternalbrokerID' => null,
        'fkiEzcomadvanceserverID' => null,
        'fkiEzcomcompanyID' => null,
        'fkiEzsigndocumentID' => null,
        'fkiGhacqcontractID' => null,
        'fkiInscriptionID' => null,
        'fkiInscriptiontempID' => null,
        'fkiInscriptionnotauthenticatedID' => null,
        'fkiInvoiceID' => null,
        'fkiBuyercontractID' => null,
        'fkiFranchisebrokerID' => null,
        'fkiFranchiseagenceID' => null,
        'fkiFranchiseofficeID' => null,
        'fkiFranchisefranchiseID' => null,
        'fkiFranchisecomplaintID' => null,
        'fkiLeadID' => null,
        'fkiMarketingprogramID' => null,
        'fkiMarketingfollowID' => null,
        'fkiNotaryID' => null,
        'fkiOfficetaxreportID' => null,
        'fkiOtherincomeID' => null,
        'fkiPaymentpreparationID' => null,
        'fkiPurchaseID' => null,
        'fkiSalaryID' => null,
        'fkiSupplierID' => null,
        'fkiTranqcontractID' => null,
        'fkiTemplateID' => null,
        'fkiInscriptionchecklistID' => null,
        'fkiFolderID' => null,
        'fkiRejectedoffertopurchaseID' => null,
        'fkiDisclosureID' => null,
        'fkiReconciliationID' => null,
        'fkiEzsigndocumentIDReference' => null,
        'eAttachmentDocumenttype' => null,
        'sAttachmentName' => null,
        'eAttachmentPrivacy' => null,
        'fkiUserIDSpecific' => null,
        'eAttachmentType' => null,
        'iAttachmentSize' => null,
        'iAttachmentEDMmoduleflag' => null,
        'sAttachmentMD5' => null,
        'bAttachmentDeleted' => null,
        'bAttachmentValid' => null,
        'eAttachmentVerified' => null,
        'tAttachmentRejectioncomment' => null,
        'fkiUserIDOwner' => null,
        'objAudit' => null,
        'objAttachmentProof' => null,
        'objAttachmentProofdocument' => null,
        'aObjAttachmentAttachment' => null,
        'aObjAttachmentVersion' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pkiAttachmentID' => false,
		'fkiComputerID' => false,
		'fkiAdjustmentID' => false,
		'fkiAgentID' => false,
		'fkiBankaccountID' => false,
		'fkiBrokerID' => false,
		'fkiCommissionadvanceID' => false,
		'fkiCommunicationID' => false,
		'fkiCustomerID' => false,
		'fkiCustomertemplateID' => false,
		'fkiDepositID' => false,
		'fkiDeposittransitchequeID' => false,
		'fkiElectronicfundstransferID' => false,
		'fkiEmployeeID' => false,
		'fkiExternalbrokerID' => false,
		'fkiEzcomadvanceserverID' => false,
		'fkiEzcomcompanyID' => false,
		'fkiEzsigndocumentID' => false,
		'fkiGhacqcontractID' => false,
		'fkiInscriptionID' => false,
		'fkiInscriptiontempID' => false,
		'fkiInscriptionnotauthenticatedID' => false,
		'fkiInvoiceID' => false,
		'fkiBuyercontractID' => false,
		'fkiFranchisebrokerID' => false,
		'fkiFranchiseagenceID' => false,
		'fkiFranchiseofficeID' => false,
		'fkiFranchisefranchiseID' => false,
		'fkiFranchisecomplaintID' => false,
		'fkiLeadID' => false,
		'fkiMarketingprogramID' => false,
		'fkiMarketingfollowID' => false,
		'fkiNotaryID' => false,
		'fkiOfficetaxreportID' => false,
		'fkiOtherincomeID' => false,
		'fkiPaymentpreparationID' => false,
		'fkiPurchaseID' => false,
		'fkiSalaryID' => false,
		'fkiSupplierID' => false,
		'fkiTranqcontractID' => false,
		'fkiTemplateID' => false,
		'fkiInscriptionchecklistID' => false,
		'fkiFolderID' => false,
		'fkiRejectedoffertopurchaseID' => false,
		'fkiDisclosureID' => false,
		'fkiReconciliationID' => false,
		'fkiEzsigndocumentIDReference' => false,
		'eAttachmentDocumenttype' => false,
		'sAttachmentName' => false,
		'eAttachmentPrivacy' => false,
		'fkiUserIDSpecific' => false,
		'eAttachmentType' => false,
		'iAttachmentSize' => false,
		'iAttachmentEDMmoduleflag' => false,
		'sAttachmentMD5' => false,
		'bAttachmentDeleted' => false,
		'bAttachmentValid' => false,
		'eAttachmentVerified' => false,
		'tAttachmentRejectioncomment' => false,
		'fkiUserIDOwner' => false,
		'objAudit' => false,
		'objAttachmentProof' => false,
		'objAttachmentProofdocument' => false,
		'aObjAttachmentAttachment' => false,
		'aObjAttachmentVersion' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pkiAttachmentID' => 'pkiAttachmentID',
        'fkiComputerID' => 'fkiComputerID',
        'fkiAdjustmentID' => 'fkiAdjustmentID',
        'fkiAgentID' => 'fkiAgentID',
        'fkiBankaccountID' => 'fkiBankaccountID',
        'fkiBrokerID' => 'fkiBrokerID',
        'fkiCommissionadvanceID' => 'fkiCommissionadvanceID',
        'fkiCommunicationID' => 'fkiCommunicationID',
        'fkiCustomerID' => 'fkiCustomerID',
        'fkiCustomertemplateID' => 'fkiCustomertemplateID',
        'fkiDepositID' => 'fkiDepositID',
        'fkiDeposittransitchequeID' => 'fkiDeposittransitchequeID',
        'fkiElectronicfundstransferID' => 'fkiElectronicfundstransferID',
        'fkiEmployeeID' => 'fkiEmployeeID',
        'fkiExternalbrokerID' => 'fkiExternalbrokerID',
        'fkiEzcomadvanceserverID' => 'fkiEzcomadvanceserverID',
        'fkiEzcomcompanyID' => 'fkiEzcomcompanyID',
        'fkiEzsigndocumentID' => 'fkiEzsigndocumentID',
        'fkiGhacqcontractID' => 'fkiGhacqcontractID',
        'fkiInscriptionID' => 'fkiInscriptionID',
        'fkiInscriptiontempID' => 'fkiInscriptiontempID',
        'fkiInscriptionnotauthenticatedID' => 'fkiInscriptionnotauthenticatedID',
        'fkiInvoiceID' => 'fkiInvoiceID',
        'fkiBuyercontractID' => 'fkiBuyercontractID',
        'fkiFranchisebrokerID' => 'fkiFranchisebrokerID',
        'fkiFranchiseagenceID' => 'fkiFranchiseagenceID',
        'fkiFranchiseofficeID' => 'fkiFranchiseofficeID',
        'fkiFranchisefranchiseID' => 'fkiFranchisefranchiseID',
        'fkiFranchisecomplaintID' => 'fkiFranchisecomplaintID',
        'fkiLeadID' => 'fkiLeadID',
        'fkiMarketingprogramID' => 'fkiMarketingprogramID',
        'fkiMarketingfollowID' => 'fkiMarketingfollowID',
        'fkiNotaryID' => 'fkiNotaryID',
        'fkiOfficetaxreportID' => 'fkiOfficetaxreportID',
        'fkiOtherincomeID' => 'fkiOtherincomeID',
        'fkiPaymentpreparationID' => 'fkiPaymentpreparationID',
        'fkiPurchaseID' => 'fkiPurchaseID',
        'fkiSalaryID' => 'fkiSalaryID',
        'fkiSupplierID' => 'fkiSupplierID',
        'fkiTranqcontractID' => 'fkiTranqcontractID',
        'fkiTemplateID' => 'fkiTemplateID',
        'fkiInscriptionchecklistID' => 'fkiInscriptionchecklistID',
        'fkiFolderID' => 'fkiFolderID',
        'fkiRejectedoffertopurchaseID' => 'fkiRejectedoffertopurchaseID',
        'fkiDisclosureID' => 'fkiDisclosureID',
        'fkiReconciliationID' => 'fkiReconciliationID',
        'fkiEzsigndocumentIDReference' => 'fkiEzsigndocumentIDReference',
        'eAttachmentDocumenttype' => 'eAttachmentDocumenttype',
        'sAttachmentName' => 'sAttachmentName',
        'eAttachmentPrivacy' => 'eAttachmentPrivacy',
        'fkiUserIDSpecific' => 'fkiUserIDSpecific',
        'eAttachmentType' => 'eAttachmentType',
        'iAttachmentSize' => 'iAttachmentSize',
        'iAttachmentEDMmoduleflag' => 'iAttachmentEDMmoduleflag',
        'sAttachmentMD5' => 'sAttachmentMD5',
        'bAttachmentDeleted' => 'bAttachmentDeleted',
        'bAttachmentValid' => 'bAttachmentValid',
        'eAttachmentVerified' => 'eAttachmentVerified',
        'tAttachmentRejectioncomment' => 'tAttachmentRejectioncomment',
        'fkiUserIDOwner' => 'fkiUserIDOwner',
        'objAudit' => 'objAudit',
        'objAttachmentProof' => 'objAttachmentProof',
        'objAttachmentProofdocument' => 'objAttachmentProofdocument',
        'aObjAttachmentAttachment' => 'a_objAttachmentAttachment',
        'aObjAttachmentVersion' => 'a_objAttachmentVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pkiAttachmentID' => 'setPkiAttachmentID',
        'fkiComputerID' => 'setFkiComputerID',
        'fkiAdjustmentID' => 'setFkiAdjustmentID',
        'fkiAgentID' => 'setFkiAgentID',
        'fkiBankaccountID' => 'setFkiBankaccountID',
        'fkiBrokerID' => 'setFkiBrokerID',
        'fkiCommissionadvanceID' => 'setFkiCommissionadvanceID',
        'fkiCommunicationID' => 'setFkiCommunicationID',
        'fkiCustomerID' => 'setFkiCustomerID',
        'fkiCustomertemplateID' => 'setFkiCustomertemplateID',
        'fkiDepositID' => 'setFkiDepositID',
        'fkiDeposittransitchequeID' => 'setFkiDeposittransitchequeID',
        'fkiElectronicfundstransferID' => 'setFkiElectronicfundstransferID',
        'fkiEmployeeID' => 'setFkiEmployeeID',
        'fkiExternalbrokerID' => 'setFkiExternalbrokerID',
        'fkiEzcomadvanceserverID' => 'setFkiEzcomadvanceserverID',
        'fkiEzcomcompanyID' => 'setFkiEzcomcompanyID',
        'fkiEzsigndocumentID' => 'setFkiEzsigndocumentID',
        'fkiGhacqcontractID' => 'setFkiGhacqcontractID',
        'fkiInscriptionID' => 'setFkiInscriptionID',
        'fkiInscriptiontempID' => 'setFkiInscriptiontempID',
        'fkiInscriptionnotauthenticatedID' => 'setFkiInscriptionnotauthenticatedID',
        'fkiInvoiceID' => 'setFkiInvoiceID',
        'fkiBuyercontractID' => 'setFkiBuyercontractID',
        'fkiFranchisebrokerID' => 'setFkiFranchisebrokerID',
        'fkiFranchiseagenceID' => 'setFkiFranchiseagenceID',
        'fkiFranchiseofficeID' => 'setFkiFranchiseofficeID',
        'fkiFranchisefranchiseID' => 'setFkiFranchisefranchiseID',
        'fkiFranchisecomplaintID' => 'setFkiFranchisecomplaintID',
        'fkiLeadID' => 'setFkiLeadID',
        'fkiMarketingprogramID' => 'setFkiMarketingprogramID',
        'fkiMarketingfollowID' => 'setFkiMarketingfollowID',
        'fkiNotaryID' => 'setFkiNotaryID',
        'fkiOfficetaxreportID' => 'setFkiOfficetaxreportID',
        'fkiOtherincomeID' => 'setFkiOtherincomeID',
        'fkiPaymentpreparationID' => 'setFkiPaymentpreparationID',
        'fkiPurchaseID' => 'setFkiPurchaseID',
        'fkiSalaryID' => 'setFkiSalaryID',
        'fkiSupplierID' => 'setFkiSupplierID',
        'fkiTranqcontractID' => 'setFkiTranqcontractID',
        'fkiTemplateID' => 'setFkiTemplateID',
        'fkiInscriptionchecklistID' => 'setFkiInscriptionchecklistID',
        'fkiFolderID' => 'setFkiFolderID',
        'fkiRejectedoffertopurchaseID' => 'setFkiRejectedoffertopurchaseID',
        'fkiDisclosureID' => 'setFkiDisclosureID',
        'fkiReconciliationID' => 'setFkiReconciliationID',
        'fkiEzsigndocumentIDReference' => 'setFkiEzsigndocumentIDReference',
        'eAttachmentDocumenttype' => 'setEAttachmentDocumenttype',
        'sAttachmentName' => 'setSAttachmentName',
        'eAttachmentPrivacy' => 'setEAttachmentPrivacy',
        'fkiUserIDSpecific' => 'setFkiUserIDSpecific',
        'eAttachmentType' => 'setEAttachmentType',
        'iAttachmentSize' => 'setIAttachmentSize',
        'iAttachmentEDMmoduleflag' => 'setIAttachmentEDMmoduleflag',
        'sAttachmentMD5' => 'setSAttachmentMD5',
        'bAttachmentDeleted' => 'setBAttachmentDeleted',
        'bAttachmentValid' => 'setBAttachmentValid',
        'eAttachmentVerified' => 'setEAttachmentVerified',
        'tAttachmentRejectioncomment' => 'setTAttachmentRejectioncomment',
        'fkiUserIDOwner' => 'setFkiUserIDOwner',
        'objAudit' => 'setObjAudit',
        'objAttachmentProof' => 'setObjAttachmentProof',
        'objAttachmentProofdocument' => 'setObjAttachmentProofdocument',
        'aObjAttachmentAttachment' => 'setAObjAttachmentAttachment',
        'aObjAttachmentVersion' => 'setAObjAttachmentVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pkiAttachmentID' => 'getPkiAttachmentID',
        'fkiComputerID' => 'getFkiComputerID',
        'fkiAdjustmentID' => 'getFkiAdjustmentID',
        'fkiAgentID' => 'getFkiAgentID',
        'fkiBankaccountID' => 'getFkiBankaccountID',
        'fkiBrokerID' => 'getFkiBrokerID',
        'fkiCommissionadvanceID' => 'getFkiCommissionadvanceID',
        'fkiCommunicationID' => 'getFkiCommunicationID',
        'fkiCustomerID' => 'getFkiCustomerID',
        'fkiCustomertemplateID' => 'getFkiCustomertemplateID',
        'fkiDepositID' => 'getFkiDepositID',
        'fkiDeposittransitchequeID' => 'getFkiDeposittransitchequeID',
        'fkiElectronicfundstransferID' => 'getFkiElectronicfundstransferID',
        'fkiEmployeeID' => 'getFkiEmployeeID',
        'fkiExternalbrokerID' => 'getFkiExternalbrokerID',
        'fkiEzcomadvanceserverID' => 'getFkiEzcomadvanceserverID',
        'fkiEzcomcompanyID' => 'getFkiEzcomcompanyID',
        'fkiEzsigndocumentID' => 'getFkiEzsigndocumentID',
        'fkiGhacqcontractID' => 'getFkiGhacqcontractID',
        'fkiInscriptionID' => 'getFkiInscriptionID',
        'fkiInscriptiontempID' => 'getFkiInscriptiontempID',
        'fkiInscriptionnotauthenticatedID' => 'getFkiInscriptionnotauthenticatedID',
        'fkiInvoiceID' => 'getFkiInvoiceID',
        'fkiBuyercontractID' => 'getFkiBuyercontractID',
        'fkiFranchisebrokerID' => 'getFkiFranchisebrokerID',
        'fkiFranchiseagenceID' => 'getFkiFranchiseagenceID',
        'fkiFranchiseofficeID' => 'getFkiFranchiseofficeID',
        'fkiFranchisefranchiseID' => 'getFkiFranchisefranchiseID',
        'fkiFranchisecomplaintID' => 'getFkiFranchisecomplaintID',
        'fkiLeadID' => 'getFkiLeadID',
        'fkiMarketingprogramID' => 'getFkiMarketingprogramID',
        'fkiMarketingfollowID' => 'getFkiMarketingfollowID',
        'fkiNotaryID' => 'getFkiNotaryID',
        'fkiOfficetaxreportID' => 'getFkiOfficetaxreportID',
        'fkiOtherincomeID' => 'getFkiOtherincomeID',
        'fkiPaymentpreparationID' => 'getFkiPaymentpreparationID',
        'fkiPurchaseID' => 'getFkiPurchaseID',
        'fkiSalaryID' => 'getFkiSalaryID',
        'fkiSupplierID' => 'getFkiSupplierID',
        'fkiTranqcontractID' => 'getFkiTranqcontractID',
        'fkiTemplateID' => 'getFkiTemplateID',
        'fkiInscriptionchecklistID' => 'getFkiInscriptionchecklistID',
        'fkiFolderID' => 'getFkiFolderID',
        'fkiRejectedoffertopurchaseID' => 'getFkiRejectedoffertopurchaseID',
        'fkiDisclosureID' => 'getFkiDisclosureID',
        'fkiReconciliationID' => 'getFkiReconciliationID',
        'fkiEzsigndocumentIDReference' => 'getFkiEzsigndocumentIDReference',
        'eAttachmentDocumenttype' => 'getEAttachmentDocumenttype',
        'sAttachmentName' => 'getSAttachmentName',
        'eAttachmentPrivacy' => 'getEAttachmentPrivacy',
        'fkiUserIDSpecific' => 'getFkiUserIDSpecific',
        'eAttachmentType' => 'getEAttachmentType',
        'iAttachmentSize' => 'getIAttachmentSize',
        'iAttachmentEDMmoduleflag' => 'getIAttachmentEDMmoduleflag',
        'sAttachmentMD5' => 'getSAttachmentMD5',
        'bAttachmentDeleted' => 'getBAttachmentDeleted',
        'bAttachmentValid' => 'getBAttachmentValid',
        'eAttachmentVerified' => 'getEAttachmentVerified',
        'tAttachmentRejectioncomment' => 'getTAttachmentRejectioncomment',
        'fkiUserIDOwner' => 'getFkiUserIDOwner',
        'objAudit' => 'getObjAudit',
        'objAttachmentProof' => 'getObjAttachmentProof',
        'objAttachmentProofdocument' => 'getObjAttachmentProofdocument',
        'aObjAttachmentAttachment' => 'getAObjAttachmentAttachment',
        'aObjAttachmentVersion' => 'getAObjAttachmentVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pkiAttachmentID', $data ?? [], null);
        $this->setIfExists('fkiComputerID', $data ?? [], null);
        $this->setIfExists('fkiAdjustmentID', $data ?? [], null);
        $this->setIfExists('fkiAgentID', $data ?? [], null);
        $this->setIfExists('fkiBankaccountID', $data ?? [], null);
        $this->setIfExists('fkiBrokerID', $data ?? [], null);
        $this->setIfExists('fkiCommissionadvanceID', $data ?? [], null);
        $this->setIfExists('fkiCommunicationID', $data ?? [], null);
        $this->setIfExists('fkiCustomerID', $data ?? [], null);
        $this->setIfExists('fkiCustomertemplateID', $data ?? [], null);
        $this->setIfExists('fkiDepositID', $data ?? [], null);
        $this->setIfExists('fkiDeposittransitchequeID', $data ?? [], null);
        $this->setIfExists('fkiElectronicfundstransferID', $data ?? [], null);
        $this->setIfExists('fkiEmployeeID', $data ?? [], null);
        $this->setIfExists('fkiExternalbrokerID', $data ?? [], null);
        $this->setIfExists('fkiEzcomadvanceserverID', $data ?? [], null);
        $this->setIfExists('fkiEzcomcompanyID', $data ?? [], null);
        $this->setIfExists('fkiEzsigndocumentID', $data ?? [], null);
        $this->setIfExists('fkiGhacqcontractID', $data ?? [], null);
        $this->setIfExists('fkiInscriptionID', $data ?? [], null);
        $this->setIfExists('fkiInscriptiontempID', $data ?? [], null);
        $this->setIfExists('fkiInscriptionnotauthenticatedID', $data ?? [], null);
        $this->setIfExists('fkiInvoiceID', $data ?? [], null);
        $this->setIfExists('fkiBuyercontractID', $data ?? [], null);
        $this->setIfExists('fkiFranchisebrokerID', $data ?? [], null);
        $this->setIfExists('fkiFranchiseagenceID', $data ?? [], null);
        $this->setIfExists('fkiFranchiseofficeID', $data ?? [], null);
        $this->setIfExists('fkiFranchisefranchiseID', $data ?? [], null);
        $this->setIfExists('fkiFranchisecomplaintID', $data ?? [], null);
        $this->setIfExists('fkiLeadID', $data ?? [], null);
        $this->setIfExists('fkiMarketingprogramID', $data ?? [], null);
        $this->setIfExists('fkiMarketingfollowID', $data ?? [], null);
        $this->setIfExists('fkiNotaryID', $data ?? [], null);
        $this->setIfExists('fkiOfficetaxreportID', $data ?? [], null);
        $this->setIfExists('fkiOtherincomeID', $data ?? [], null);
        $this->setIfExists('fkiPaymentpreparationID', $data ?? [], null);
        $this->setIfExists('fkiPurchaseID', $data ?? [], null);
        $this->setIfExists('fkiSalaryID', $data ?? [], null);
        $this->setIfExists('fkiSupplierID', $data ?? [], null);
        $this->setIfExists('fkiTranqcontractID', $data ?? [], null);
        $this->setIfExists('fkiTemplateID', $data ?? [], null);
        $this->setIfExists('fkiInscriptionchecklistID', $data ?? [], null);
        $this->setIfExists('fkiFolderID', $data ?? [], null);
        $this->setIfExists('fkiRejectedoffertopurchaseID', $data ?? [], null);
        $this->setIfExists('fkiDisclosureID', $data ?? [], null);
        $this->setIfExists('fkiReconciliationID', $data ?? [], null);
        $this->setIfExists('fkiEzsigndocumentIDReference', $data ?? [], null);
        $this->setIfExists('eAttachmentDocumenttype', $data ?? [], null);
        $this->setIfExists('sAttachmentName', $data ?? [], null);
        $this->setIfExists('eAttachmentPrivacy', $data ?? [], null);
        $this->setIfExists('fkiUserIDSpecific', $data ?? [], null);
        $this->setIfExists('eAttachmentType', $data ?? [], null);
        $this->setIfExists('iAttachmentSize', $data ?? [], null);
        $this->setIfExists('iAttachmentEDMmoduleflag', $data ?? [], null);
        $this->setIfExists('sAttachmentMD5', $data ?? [], null);
        $this->setIfExists('bAttachmentDeleted', $data ?? [], null);
        $this->setIfExists('bAttachmentValid', $data ?? [], null);
        $this->setIfExists('eAttachmentVerified', $data ?? [], null);
        $this->setIfExists('tAttachmentRejectioncomment', $data ?? [], null);
        $this->setIfExists('fkiUserIDOwner', $data ?? [], null);
        $this->setIfExists('objAudit', $data ?? [], null);
        $this->setIfExists('objAttachmentProof', $data ?? [], null);
        $this->setIfExists('objAttachmentProofdocument', $data ?? [], null);
        $this->setIfExists('aObjAttachmentAttachment', $data ?? [], null);
        $this->setIfExists('aObjAttachmentVersion', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pkiAttachmentID'] === null) {
            $invalidProperties[] = "'pkiAttachmentID' can't be null";
        }
        if (($this->container['pkiAttachmentID'] < 0)) {
            $invalidProperties[] = "invalid value for 'pkiAttachmentID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiComputerID']) && ($this->container['fkiComputerID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiComputerID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiComputerID']) && ($this->container['fkiComputerID'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiComputerID', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fkiAdjustmentID']) && ($this->container['fkiAdjustmentID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiAdjustmentID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiAdjustmentID']) && ($this->container['fkiAdjustmentID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiAdjustmentID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiAgentID']) && ($this->container['fkiAgentID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiAgentID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiBankaccountID']) && ($this->container['fkiBankaccountID'] > 255)) {
            $invalidProperties[] = "invalid value for 'fkiBankaccountID', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['fkiBankaccountID']) && ($this->container['fkiBankaccountID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiBankaccountID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiBrokerID']) && ($this->container['fkiBrokerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiBrokerID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiCommissionadvanceID']) && ($this->container['fkiCommissionadvanceID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiCommissionadvanceID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiCommissionadvanceID']) && ($this->container['fkiCommissionadvanceID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiCommissionadvanceID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiCommunicationID']) && ($this->container['fkiCommunicationID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiCommunicationID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiCustomerID']) && ($this->container['fkiCustomerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiCustomerID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiCustomertemplateID']) && ($this->container['fkiCustomertemplateID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiCustomertemplateID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiCustomertemplateID']) && ($this->container['fkiCustomertemplateID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiCustomertemplateID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiDepositID']) && ($this->container['fkiDepositID'] > 16777215)) {
            $invalidProperties[] = "invalid value for 'fkiDepositID', must be smaller than or equal to 16777215.";
        }

        if (!is_null($this->container['fkiDepositID']) && ($this->container['fkiDepositID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiDepositID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiDeposittransitchequeID']) && ($this->container['fkiDeposittransitchequeID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiDeposittransitchequeID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiDeposittransitchequeID']) && ($this->container['fkiDeposittransitchequeID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiDeposittransitchequeID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiElectronicfundstransferID']) && ($this->container['fkiElectronicfundstransferID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiElectronicfundstransferID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiElectronicfundstransferID']) && ($this->container['fkiElectronicfundstransferID'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiElectronicfundstransferID', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fkiEmployeeID']) && ($this->container['fkiEmployeeID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEmployeeID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiExternalbrokerID']) && ($this->container['fkiExternalbrokerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiExternalbrokerID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzcomadvanceserverID']) && ($this->container['fkiEzcomadvanceserverID'] > 16777215)) {
            $invalidProperties[] = "invalid value for 'fkiEzcomadvanceserverID', must be smaller than or equal to 16777215.";
        }

        if (!is_null($this->container['fkiEzcomadvanceserverID']) && ($this->container['fkiEzcomadvanceserverID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzcomadvanceserverID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzcomcompanyID']) && ($this->container['fkiEzcomcompanyID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiEzcomcompanyID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiEzcomcompanyID']) && ($this->container['fkiEzcomcompanyID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzcomcompanyID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzsigndocumentID']) && ($this->container['fkiEzsigndocumentID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzsigndocumentID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiGhacqcontractID']) && ($this->container['fkiGhacqcontractID'] > 16777215)) {
            $invalidProperties[] = "invalid value for 'fkiGhacqcontractID', must be smaller than or equal to 16777215.";
        }

        if (!is_null($this->container['fkiGhacqcontractID']) && ($this->container['fkiGhacqcontractID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiGhacqcontractID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiInscriptionID']) && ($this->container['fkiInscriptionID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiInscriptionID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiInscriptiontempID']) && ($this->container['fkiInscriptiontempID'] > 16777215)) {
            $invalidProperties[] = "invalid value for 'fkiInscriptiontempID', must be smaller than or equal to 16777215.";
        }

        if (!is_null($this->container['fkiInscriptiontempID']) && ($this->container['fkiInscriptiontempID'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiInscriptiontempID', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fkiInscriptionnotauthenticatedID']) && ($this->container['fkiInscriptionnotauthenticatedID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiInscriptionnotauthenticatedID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiInvoiceID']) && ($this->container['fkiInvoiceID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiInvoiceID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiBuyercontractID']) && ($this->container['fkiBuyercontractID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiBuyercontractID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiBuyercontractID']) && ($this->container['fkiBuyercontractID'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiBuyercontractID', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fkiFranchisebrokerID']) && ($this->container['fkiFranchisebrokerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiFranchisebrokerID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiFranchiseagenceID']) && ($this->container['fkiFranchiseagenceID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiFranchiseagenceID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiFranchiseagenceID']) && ($this->container['fkiFranchiseagenceID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiFranchiseagenceID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiFranchiseofficeID']) && ($this->container['fkiFranchiseofficeID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiFranchiseofficeID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiFranchisefranchiseID']) && ($this->container['fkiFranchisefranchiseID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiFranchisefranchiseID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiFranchisefranchiseID']) && ($this->container['fkiFranchisefranchiseID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiFranchisefranchiseID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiFranchisecomplaintID']) && ($this->container['fkiFranchisecomplaintID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiFranchisecomplaintID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiFranchisecomplaintID']) && ($this->container['fkiFranchisecomplaintID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiFranchisecomplaintID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiLeadID']) && ($this->container['fkiLeadID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiLeadID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiLeadID']) && ($this->container['fkiLeadID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiLeadID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiMarketingprogramID']) && ($this->container['fkiMarketingprogramID'] > 255)) {
            $invalidProperties[] = "invalid value for 'fkiMarketingprogramID', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['fkiMarketingprogramID']) && ($this->container['fkiMarketingprogramID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiMarketingprogramID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiMarketingfollowID']) && ($this->container['fkiMarketingfollowID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiMarketingfollowID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiMarketingfollowID']) && ($this->container['fkiMarketingfollowID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiMarketingfollowID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiNotaryID']) && ($this->container['fkiNotaryID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiNotaryID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiOfficetaxreportID']) && ($this->container['fkiOfficetaxreportID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiOfficetaxreportID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiOfficetaxreportID']) && ($this->container['fkiOfficetaxreportID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiOfficetaxreportID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiOtherincomeID']) && ($this->container['fkiOtherincomeID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiOtherincomeID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiOtherincomeID']) && ($this->container['fkiOtherincomeID'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiOtherincomeID', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fkiPaymentpreparationID']) && ($this->container['fkiPaymentpreparationID'] > 16777215)) {
            $invalidProperties[] = "invalid value for 'fkiPaymentpreparationID', must be smaller than or equal to 16777215.";
        }

        if (!is_null($this->container['fkiPaymentpreparationID']) && ($this->container['fkiPaymentpreparationID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiPaymentpreparationID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiSalaryID']) && ($this->container['fkiSalaryID'] > 16777215)) {
            $invalidProperties[] = "invalid value for 'fkiSalaryID', must be smaller than or equal to 16777215.";
        }

        if (!is_null($this->container['fkiSalaryID']) && ($this->container['fkiSalaryID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiSalaryID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiSupplierID']) && ($this->container['fkiSupplierID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiSupplierID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiTranqcontractID']) && ($this->container['fkiTranqcontractID'] > 16777215)) {
            $invalidProperties[] = "invalid value for 'fkiTranqcontractID', must be smaller than or equal to 16777215.";
        }

        if (!is_null($this->container['fkiTranqcontractID']) && ($this->container['fkiTranqcontractID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiTranqcontractID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiTemplateID']) && ($this->container['fkiTemplateID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiTemplateID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiTemplateID']) && ($this->container['fkiTemplateID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiTemplateID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiInscriptionchecklistID']) && ($this->container['fkiInscriptionchecklistID'] > 16777215)) {
            $invalidProperties[] = "invalid value for 'fkiInscriptionchecklistID', must be smaller than or equal to 16777215.";
        }

        if (!is_null($this->container['fkiInscriptionchecklistID']) && ($this->container['fkiInscriptionchecklistID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiInscriptionchecklistID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiFolderID']) && ($this->container['fkiFolderID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiFolderID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiFolderID']) && ($this->container['fkiFolderID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiFolderID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiRejectedoffertopurchaseID']) && ($this->container['fkiRejectedoffertopurchaseID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiRejectedoffertopurchaseID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiRejectedoffertopurchaseID']) && ($this->container['fkiRejectedoffertopurchaseID'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiRejectedoffertopurchaseID', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fkiDisclosureID']) && ($this->container['fkiDisclosureID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiDisclosureID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiDisclosureID']) && ($this->container['fkiDisclosureID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiDisclosureID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiReconciliationID']) && ($this->container['fkiReconciliationID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiReconciliationID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiReconciliationID']) && ($this->container['fkiReconciliationID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiReconciliationID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzsigndocumentIDReference']) && ($this->container['fkiEzsigndocumentIDReference'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzsigndocumentIDReference', must be bigger than or equal to 0.";
        }

        if ($this->container['eAttachmentDocumenttype'] === null) {
            $invalidProperties[] = "'eAttachmentDocumenttype' can't be null";
        }
        if ($this->container['sAttachmentName'] === null) {
            $invalidProperties[] = "'sAttachmentName' can't be null";
        }
	//if (!preg_match("/^.{0,75}$/", $this->container['sAttachmentName'])) {
        if (!is_null($this->container['sAttachmentName']) && !preg_match("/(*UTF8)^.{0,75}$/", $this->container['sAttachmentName'])) {
            $invalidProperties[] = "invalid value for 'sAttachmentName', must be conform to the pattern /^.{0,75}$/.";
        }

        if ($this->container['eAttachmentPrivacy'] === null) {
            $invalidProperties[] = "'eAttachmentPrivacy' can't be null";
        }
        if (!is_null($this->container['fkiUserIDSpecific']) && ($this->container['fkiUserIDSpecific'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiUserIDSpecific', must be bigger than or equal to 0.";
        }

        if ($this->container['eAttachmentType'] === null) {
            $invalidProperties[] = "'eAttachmentType' can't be null";
        }
        if ($this->container['iAttachmentSize'] === null) {
            $invalidProperties[] = "'iAttachmentSize' can't be null";
        }
        if (($this->container['iAttachmentSize'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'iAttachmentSize', must be smaller than or equal to 4294967295.";
        }

        if (($this->container['iAttachmentSize'] < 0)) {
            $invalidProperties[] = "invalid value for 'iAttachmentSize', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['iAttachmentEDMmoduleflag']) && ($this->container['iAttachmentEDMmoduleflag'] > 255)) {
            $invalidProperties[] = "invalid value for 'iAttachmentEDMmoduleflag', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['iAttachmentEDMmoduleflag']) && ($this->container['iAttachmentEDMmoduleflag'] < 0)) {
            $invalidProperties[] = "invalid value for 'iAttachmentEDMmoduleflag', must be bigger than or equal to 0.";
        }

        if ($this->container['sAttachmentMD5'] === null) {
            $invalidProperties[] = "'sAttachmentMD5' can't be null";
        }
	//if (!preg_match("/^.{0,32}$/", $this->container['sAttachmentMD5'])) {
        if (!is_null($this->container['sAttachmentMD5']) && !preg_match("/(*UTF8)^.{0,32}$/", $this->container['sAttachmentMD5'])) {
            $invalidProperties[] = "invalid value for 'sAttachmentMD5', must be conform to the pattern /^.{0,32}$/.";
        }

        if ($this->container['bAttachmentDeleted'] === null) {
            $invalidProperties[] = "'bAttachmentDeleted' can't be null";
        }
        if ($this->container['bAttachmentValid'] === null) {
            $invalidProperties[] = "'bAttachmentValid' can't be null";
        }
        if ($this->container['eAttachmentVerified'] === null) {
            $invalidProperties[] = "'eAttachmentVerified' can't be null";
        }
	//if (!is_null($this->container['tAttachmentRejectioncomment']) && !preg_match("/^.{0,65535}$/", $this->container['tAttachmentRejectioncomment'])) {
        if (!is_null($this->container['tAttachmentRejectioncomment']) && !preg_match("/(*UTF8)^.{0,65535}$/", $this->container['tAttachmentRejectioncomment'])) {
            $invalidProperties[] = "invalid value for 'tAttachmentRejectioncomment', must be conform to the pattern /^.{0,65535}$/.";
        }

        if (!is_null($this->container['fkiUserIDOwner']) && ($this->container['fkiUserIDOwner'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiUserIDOwner', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pkiAttachmentID
     *
     * @return int
     */
    public function getPkiAttachmentID()
    {
	//return $this->container['pkiAttachmentID'];
        return $this->container['pkiAttachmentID'];
    }

    /**
     * Sets pkiAttachmentID
     *
     * @param int $pkiAttachmentID The unique ID of the Attachment.
     *
     * @return self
     */
    public function setPkiAttachmentID($pkiAttachmentID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($pkiAttachmentID)) {
            //throw new \InvalidArgumentException('non-nullable pkiAttachmentID cannot be null');
        //}

	//if (($pkiAttachmentID < 0)) {
        if (($pkiAttachmentID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $pkiAttachmentID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiAttachmentID)?'null':'"'.$pkiAttachmentID.'"').' for pkiAttachmentID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['pkiAttachmentID'] = $pkiAttachmentID;
        $this->container['pkiAttachmentID'] = (is_null($pkiAttachmentID) ? null : (int) $pkiAttachmentID);

        return $this;
    }

    /**
     * Gets fkiComputerID
     *
     * @return int|null
     */
    public function getFkiComputerID()
    {
	//return $this->container['fkiComputerID'];
        return $this->container['fkiComputerID'];
    }

    /**
     * Sets fkiComputerID
     *
     * @param int|null $fkiComputerID The unique ID of the Computer
     *
     * @return self
     */
    public function setFkiComputerID($fkiComputerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiComputerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiComputerID cannot be null');
        //}

	//if (($fkiComputerID > 65535)) {
        if (!is_null($fkiComputerID) && ($fkiComputerID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiComputerID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiComputerID)?'null':'"'.$fkiComputerID.'"').' for fkiComputerID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiComputerID < 1)) {
        if (!is_null($fkiComputerID) && ($fkiComputerID < 1)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiComputerID when calling CustomAttachmentResponse., must be bigger than or equal to 1.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiComputerID)?'null':'"'.$fkiComputerID.'"').' for fkiComputerID when calling CustomAttachmentResponse., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiComputerID'] = $fkiComputerID;
        $this->container['fkiComputerID'] = (is_null($fkiComputerID) ? null : (int) $fkiComputerID);

        return $this;
    }

    /**
     * Gets fkiAdjustmentID
     *
     * @return int|null
     */
    public function getFkiAdjustmentID()
    {
	//return $this->container['fkiAdjustmentID'];
        return $this->container['fkiAdjustmentID'];
    }

    /**
     * Sets fkiAdjustmentID
     *
     * @param int|null $fkiAdjustmentID The unique ID of the Adjustment
     *
     * @return self
     */
    public function setFkiAdjustmentID($fkiAdjustmentID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiAdjustmentID)) {
            //throw new \InvalidArgumentException('non-nullable fkiAdjustmentID cannot be null');
        //}

	//if (($fkiAdjustmentID > 65535)) {
        if (!is_null($fkiAdjustmentID) && ($fkiAdjustmentID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiAdjustmentID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiAdjustmentID)?'null':'"'.$fkiAdjustmentID.'"').' for fkiAdjustmentID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiAdjustmentID < 0)) {
        if (!is_null($fkiAdjustmentID) && ($fkiAdjustmentID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiAdjustmentID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiAdjustmentID)?'null':'"'.$fkiAdjustmentID.'"').' for fkiAdjustmentID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiAdjustmentID'] = $fkiAdjustmentID;
        $this->container['fkiAdjustmentID'] = (is_null($fkiAdjustmentID) ? null : (int) $fkiAdjustmentID);

        return $this;
    }

    /**
     * Gets fkiAgentID
     *
     * @return int|null
     */
    public function getFkiAgentID()
    {
	//return $this->container['fkiAgentID'];
        return $this->container['fkiAgentID'];
    }

    /**
     * Sets fkiAgentID
     *
     * @param int|null $fkiAgentID The unique ID of the Agent.
     *
     * @return self
     */
    public function setFkiAgentID($fkiAgentID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiAgentID)) {
            //throw new \InvalidArgumentException('non-nullable fkiAgentID cannot be null');
        //}

	//if (($fkiAgentID < 0)) {
        if (!is_null($fkiAgentID) && ($fkiAgentID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiAgentID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiAgentID)?'null':'"'.$fkiAgentID.'"').' for fkiAgentID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiAgentID'] = $fkiAgentID;
        $this->container['fkiAgentID'] = (is_null($fkiAgentID) ? null : (int) $fkiAgentID);

        return $this;
    }

    /**
     * Gets fkiBankaccountID
     *
     * @return int|null
     */
    public function getFkiBankaccountID()
    {
	//return $this->container['fkiBankaccountID'];
        return $this->container['fkiBankaccountID'];
    }

    /**
     * Sets fkiBankaccountID
     *
     * @param int|null $fkiBankaccountID The unique ID of the Bankaccount
     *
     * @return self
     */
    public function setFkiBankaccountID($fkiBankaccountID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiBankaccountID)) {
            //throw new \InvalidArgumentException('non-nullable fkiBankaccountID cannot be null');
        //}

	//if (($fkiBankaccountID > 255)) {
        if (!is_null($fkiBankaccountID) && ($fkiBankaccountID > 255)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiBankaccountID when calling CustomAttachmentResponse., must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiBankaccountID)?'null':'"'.$fkiBankaccountID.'"').' for fkiBankaccountID when calling CustomAttachmentResponse., must be smaller than or equal to 255.');
        }
	//if (($fkiBankaccountID < 0)) {
        if (!is_null($fkiBankaccountID) && ($fkiBankaccountID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiBankaccountID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiBankaccountID)?'null':'"'.$fkiBankaccountID.'"').' for fkiBankaccountID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiBankaccountID'] = $fkiBankaccountID;
        $this->container['fkiBankaccountID'] = (is_null($fkiBankaccountID) ? null : (int) $fkiBankaccountID);

        return $this;
    }

    /**
     * Gets fkiBrokerID
     *
     * @return int|null
     */
    public function getFkiBrokerID()
    {
	//return $this->container['fkiBrokerID'];
        return $this->container['fkiBrokerID'];
    }

    /**
     * Sets fkiBrokerID
     *
     * @param int|null $fkiBrokerID The unique ID of the Broker.
     *
     * @return self
     */
    public function setFkiBrokerID($fkiBrokerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiBrokerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiBrokerID cannot be null');
        //}

	//if (($fkiBrokerID < 0)) {
        if (!is_null($fkiBrokerID) && ($fkiBrokerID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiBrokerID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiBrokerID)?'null':'"'.$fkiBrokerID.'"').' for fkiBrokerID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiBrokerID'] = $fkiBrokerID;
        $this->container['fkiBrokerID'] = (is_null($fkiBrokerID) ? null : (int) $fkiBrokerID);

        return $this;
    }

    /**
     * Gets fkiCommissionadvanceID
     *
     * @return int|null
     */
    public function getFkiCommissionadvanceID()
    {
	//return $this->container['fkiCommissionadvanceID'];
        return $this->container['fkiCommissionadvanceID'];
    }

    /**
     * Sets fkiCommissionadvanceID
     *
     * @param int|null $fkiCommissionadvanceID The unique ID of the Commissionadvance
     *
     * @return self
     */
    public function setFkiCommissionadvanceID($fkiCommissionadvanceID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiCommissionadvanceID)) {
            //throw new \InvalidArgumentException('non-nullable fkiCommissionadvanceID cannot be null');
        //}

	//if (($fkiCommissionadvanceID > 65535)) {
        if (!is_null($fkiCommissionadvanceID) && ($fkiCommissionadvanceID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiCommissionadvanceID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiCommissionadvanceID)?'null':'"'.$fkiCommissionadvanceID.'"').' for fkiCommissionadvanceID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiCommissionadvanceID < 0)) {
        if (!is_null($fkiCommissionadvanceID) && ($fkiCommissionadvanceID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiCommissionadvanceID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiCommissionadvanceID)?'null':'"'.$fkiCommissionadvanceID.'"').' for fkiCommissionadvanceID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiCommissionadvanceID'] = $fkiCommissionadvanceID;
        $this->container['fkiCommissionadvanceID'] = (is_null($fkiCommissionadvanceID) ? null : (int) $fkiCommissionadvanceID);

        return $this;
    }

    /**
     * Gets fkiCommunicationID
     *
     * @return int|null
     */
    public function getFkiCommunicationID()
    {
	//return $this->container['fkiCommunicationID'];
        return $this->container['fkiCommunicationID'];
    }

    /**
     * Sets fkiCommunicationID
     *
     * @param int|null $fkiCommunicationID The unique ID of the Communication.
     *
     * @return self
     */
    public function setFkiCommunicationID($fkiCommunicationID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiCommunicationID)) {
            //throw new \InvalidArgumentException('non-nullable fkiCommunicationID cannot be null');
        //}

	//if (($fkiCommunicationID < 0)) {
        if (!is_null($fkiCommunicationID) && ($fkiCommunicationID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiCommunicationID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiCommunicationID)?'null':'"'.$fkiCommunicationID.'"').' for fkiCommunicationID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiCommunicationID'] = $fkiCommunicationID;
        $this->container['fkiCommunicationID'] = (is_null($fkiCommunicationID) ? null : (int) $fkiCommunicationID);

        return $this;
    }

    /**
     * Gets fkiCustomerID
     *
     * @return int|null
     */
    public function getFkiCustomerID()
    {
	//return $this->container['fkiCustomerID'];
        return $this->container['fkiCustomerID'];
    }

    /**
     * Sets fkiCustomerID
     *
     * @param int|null $fkiCustomerID The unique ID of the Customer.
     *
     * @return self
     */
    public function setFkiCustomerID($fkiCustomerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiCustomerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiCustomerID cannot be null');
        //}

	//if (($fkiCustomerID < 0)) {
        if (!is_null($fkiCustomerID) && ($fkiCustomerID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiCustomerID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiCustomerID)?'null':'"'.$fkiCustomerID.'"').' for fkiCustomerID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiCustomerID'] = $fkiCustomerID;
        $this->container['fkiCustomerID'] = (is_null($fkiCustomerID) ? null : (int) $fkiCustomerID);

        return $this;
    }

    /**
     * Gets fkiCustomertemplateID
     *
     * @return int|null
     */
    public function getFkiCustomertemplateID()
    {
	//return $this->container['fkiCustomertemplateID'];
        return $this->container['fkiCustomertemplateID'];
    }

    /**
     * Sets fkiCustomertemplateID
     *
     * @param int|null $fkiCustomertemplateID The unique ID of the Customertemplate
     *
     * @return self
     */
    public function setFkiCustomertemplateID($fkiCustomertemplateID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiCustomertemplateID)) {
            //throw new \InvalidArgumentException('non-nullable fkiCustomertemplateID cannot be null');
        //}

	//if (($fkiCustomertemplateID > 65535)) {
        if (!is_null($fkiCustomertemplateID) && ($fkiCustomertemplateID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiCustomertemplateID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiCustomertemplateID)?'null':'"'.$fkiCustomertemplateID.'"').' for fkiCustomertemplateID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiCustomertemplateID < 0)) {
        if (!is_null($fkiCustomertemplateID) && ($fkiCustomertemplateID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiCustomertemplateID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiCustomertemplateID)?'null':'"'.$fkiCustomertemplateID.'"').' for fkiCustomertemplateID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiCustomertemplateID'] = $fkiCustomertemplateID;
        $this->container['fkiCustomertemplateID'] = (is_null($fkiCustomertemplateID) ? null : (int) $fkiCustomertemplateID);

        return $this;
    }

    /**
     * Gets fkiDepositID
     *
     * @return int|null
     */
    public function getFkiDepositID()
    {
	//return $this->container['fkiDepositID'];
        return $this->container['fkiDepositID'];
    }

    /**
     * Sets fkiDepositID
     *
     * @param int|null $fkiDepositID The unique ID of the Deposit
     *
     * @return self
     */
    public function setFkiDepositID($fkiDepositID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiDepositID)) {
            //throw new \InvalidArgumentException('non-nullable fkiDepositID cannot be null');
        //}

	//if (($fkiDepositID > 16777215)) {
        if (!is_null($fkiDepositID) && ($fkiDepositID > 16777215)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiDepositID when calling CustomAttachmentResponse., must be smaller than or equal to 16777215.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiDepositID)?'null':'"'.$fkiDepositID.'"').' for fkiDepositID when calling CustomAttachmentResponse., must be smaller than or equal to 16777215.');
        }
	//if (($fkiDepositID < 0)) {
        if (!is_null($fkiDepositID) && ($fkiDepositID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiDepositID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiDepositID)?'null':'"'.$fkiDepositID.'"').' for fkiDepositID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiDepositID'] = $fkiDepositID;
        $this->container['fkiDepositID'] = (is_null($fkiDepositID) ? null : (int) $fkiDepositID);

        return $this;
    }

    /**
     * Gets fkiDeposittransitchequeID
     *
     * @return int|null
     */
    public function getFkiDeposittransitchequeID()
    {
	//return $this->container['fkiDeposittransitchequeID'];
        return $this->container['fkiDeposittransitchequeID'];
    }

    /**
     * Sets fkiDeposittransitchequeID
     *
     * @param int|null $fkiDeposittransitchequeID The unique ID of the Deposittransitcheque
     *
     * @return self
     */
    public function setFkiDeposittransitchequeID($fkiDeposittransitchequeID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiDeposittransitchequeID)) {
            //throw new \InvalidArgumentException('non-nullable fkiDeposittransitchequeID cannot be null');
        //}

	//if (($fkiDeposittransitchequeID > 65535)) {
        if (!is_null($fkiDeposittransitchequeID) && ($fkiDeposittransitchequeID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiDeposittransitchequeID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiDeposittransitchequeID)?'null':'"'.$fkiDeposittransitchequeID.'"').' for fkiDeposittransitchequeID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiDeposittransitchequeID < 0)) {
        if (!is_null($fkiDeposittransitchequeID) && ($fkiDeposittransitchequeID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiDeposittransitchequeID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiDeposittransitchequeID)?'null':'"'.$fkiDeposittransitchequeID.'"').' for fkiDeposittransitchequeID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiDeposittransitchequeID'] = $fkiDeposittransitchequeID;
        $this->container['fkiDeposittransitchequeID'] = (is_null($fkiDeposittransitchequeID) ? null : (int) $fkiDeposittransitchequeID);

        return $this;
    }

    /**
     * Gets fkiElectronicfundstransferID
     *
     * @return int|null
     */
    public function getFkiElectronicfundstransferID()
    {
	//return $this->container['fkiElectronicfundstransferID'];
        return $this->container['fkiElectronicfundstransferID'];
    }

    /**
     * Sets fkiElectronicfundstransferID
     *
     * @param int|null $fkiElectronicfundstransferID The unique ID of the Electronicfundstransfer
     *
     * @return self
     */
    public function setFkiElectronicfundstransferID($fkiElectronicfundstransferID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiElectronicfundstransferID)) {
            //throw new \InvalidArgumentException('non-nullable fkiElectronicfundstransferID cannot be null');
        //}

	//if (($fkiElectronicfundstransferID > 65535)) {
        if (!is_null($fkiElectronicfundstransferID) && ($fkiElectronicfundstransferID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiElectronicfundstransferID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiElectronicfundstransferID)?'null':'"'.$fkiElectronicfundstransferID.'"').' for fkiElectronicfundstransferID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiElectronicfundstransferID < 1)) {
        if (!is_null($fkiElectronicfundstransferID) && ($fkiElectronicfundstransferID < 1)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiElectronicfundstransferID when calling CustomAttachmentResponse., must be bigger than or equal to 1.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiElectronicfundstransferID)?'null':'"'.$fkiElectronicfundstransferID.'"').' for fkiElectronicfundstransferID when calling CustomAttachmentResponse., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiElectronicfundstransferID'] = $fkiElectronicfundstransferID;
        $this->container['fkiElectronicfundstransferID'] = (is_null($fkiElectronicfundstransferID) ? null : (int) $fkiElectronicfundstransferID);

        return $this;
    }

    /**
     * Gets fkiEmployeeID
     *
     * @return int|null
     */
    public function getFkiEmployeeID()
    {
	//return $this->container['fkiEmployeeID'];
        return $this->container['fkiEmployeeID'];
    }

    /**
     * Sets fkiEmployeeID
     *
     * @param int|null $fkiEmployeeID The unique ID of the Employee.
     *
     * @return self
     */
    public function setFkiEmployeeID($fkiEmployeeID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEmployeeID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEmployeeID cannot be null');
        //}

	//if (($fkiEmployeeID < 0)) {
        if (!is_null($fkiEmployeeID) && ($fkiEmployeeID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEmployeeID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEmployeeID)?'null':'"'.$fkiEmployeeID.'"').' for fkiEmployeeID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEmployeeID'] = $fkiEmployeeID;
        $this->container['fkiEmployeeID'] = (is_null($fkiEmployeeID) ? null : (int) $fkiEmployeeID);

        return $this;
    }

    /**
     * Gets fkiExternalbrokerID
     *
     * @return int|null
     */
    public function getFkiExternalbrokerID()
    {
	//return $this->container['fkiExternalbrokerID'];
        return $this->container['fkiExternalbrokerID'];
    }

    /**
     * Sets fkiExternalbrokerID
     *
     * @param int|null $fkiExternalbrokerID The unique ID of the Externalbroker.
     *
     * @return self
     */
    public function setFkiExternalbrokerID($fkiExternalbrokerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiExternalbrokerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiExternalbrokerID cannot be null');
        //}

	//if (($fkiExternalbrokerID < 0)) {
        if (!is_null($fkiExternalbrokerID) && ($fkiExternalbrokerID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiExternalbrokerID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiExternalbrokerID)?'null':'"'.$fkiExternalbrokerID.'"').' for fkiExternalbrokerID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiExternalbrokerID'] = $fkiExternalbrokerID;
        $this->container['fkiExternalbrokerID'] = (is_null($fkiExternalbrokerID) ? null : (int) $fkiExternalbrokerID);

        return $this;
    }

    /**
     * Gets fkiEzcomadvanceserverID
     *
     * @return int|null
     */
    public function getFkiEzcomadvanceserverID()
    {
	//return $this->container['fkiEzcomadvanceserverID'];
        return $this->container['fkiEzcomadvanceserverID'];
    }

    /**
     * Sets fkiEzcomadvanceserverID
     *
     * @param int|null $fkiEzcomadvanceserverID The unique ID of the Ezcomadvanceserver
     *
     * @return self
     */
    public function setFkiEzcomadvanceserverID($fkiEzcomadvanceserverID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzcomadvanceserverID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzcomadvanceserverID cannot be null');
        //}

	//if (($fkiEzcomadvanceserverID > 16777215)) {
        if (!is_null($fkiEzcomadvanceserverID) && ($fkiEzcomadvanceserverID > 16777215)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzcomadvanceserverID when calling CustomAttachmentResponse., must be smaller than or equal to 16777215.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzcomadvanceserverID)?'null':'"'.$fkiEzcomadvanceserverID.'"').' for fkiEzcomadvanceserverID when calling CustomAttachmentResponse., must be smaller than or equal to 16777215.');
        }
	//if (($fkiEzcomadvanceserverID < 0)) {
        if (!is_null($fkiEzcomadvanceserverID) && ($fkiEzcomadvanceserverID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzcomadvanceserverID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzcomadvanceserverID)?'null':'"'.$fkiEzcomadvanceserverID.'"').' for fkiEzcomadvanceserverID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzcomadvanceserverID'] = $fkiEzcomadvanceserverID;
        $this->container['fkiEzcomadvanceserverID'] = (is_null($fkiEzcomadvanceserverID) ? null : (int) $fkiEzcomadvanceserverID);

        return $this;
    }

    /**
     * Gets fkiEzcomcompanyID
     *
     * @return int|null
     */
    public function getFkiEzcomcompanyID()
    {
	//return $this->container['fkiEzcomcompanyID'];
        return $this->container['fkiEzcomcompanyID'];
    }

    /**
     * Sets fkiEzcomcompanyID
     *
     * @param int|null $fkiEzcomcompanyID The unique ID of the Ezcomcompany
     *
     * @return self
     */
    public function setFkiEzcomcompanyID($fkiEzcomcompanyID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzcomcompanyID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzcomcompanyID cannot be null');
        //}

	//if (($fkiEzcomcompanyID > 65535)) {
        if (!is_null($fkiEzcomcompanyID) && ($fkiEzcomcompanyID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzcomcompanyID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzcomcompanyID)?'null':'"'.$fkiEzcomcompanyID.'"').' for fkiEzcomcompanyID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiEzcomcompanyID < 0)) {
        if (!is_null($fkiEzcomcompanyID) && ($fkiEzcomcompanyID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzcomcompanyID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzcomcompanyID)?'null':'"'.$fkiEzcomcompanyID.'"').' for fkiEzcomcompanyID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzcomcompanyID'] = $fkiEzcomcompanyID;
        $this->container['fkiEzcomcompanyID'] = (is_null($fkiEzcomcompanyID) ? null : (int) $fkiEzcomcompanyID);

        return $this;
    }

    /**
     * Gets fkiEzsigndocumentID
     *
     * @return int|null
     */
    public function getFkiEzsigndocumentID()
    {
	//return $this->container['fkiEzsigndocumentID'];
        return $this->container['fkiEzsigndocumentID'];
    }

    /**
     * Sets fkiEzsigndocumentID
     *
     * @param int|null $fkiEzsigndocumentID The unique ID of the Ezsigndocument
     *
     * @return self
     */
    public function setFkiEzsigndocumentID($fkiEzsigndocumentID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzsigndocumentID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzsigndocumentID cannot be null');
        //}

	//if (($fkiEzsigndocumentID < 0)) {
        if (!is_null($fkiEzsigndocumentID) && ($fkiEzsigndocumentID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzsigndocumentID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzsigndocumentID)?'null':'"'.$fkiEzsigndocumentID.'"').' for fkiEzsigndocumentID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzsigndocumentID'] = $fkiEzsigndocumentID;
        $this->container['fkiEzsigndocumentID'] = (is_null($fkiEzsigndocumentID) ? null : (int) $fkiEzsigndocumentID);

        return $this;
    }

    /**
     * Gets fkiGhacqcontractID
     *
     * @return int|null
     */
    public function getFkiGhacqcontractID()
    {
	//return $this->container['fkiGhacqcontractID'];
        return $this->container['fkiGhacqcontractID'];
    }

    /**
     * Sets fkiGhacqcontractID
     *
     * @param int|null $fkiGhacqcontractID The unique ID of the Ghacqcontract
     *
     * @return self
     */
    public function setFkiGhacqcontractID($fkiGhacqcontractID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiGhacqcontractID)) {
            //throw new \InvalidArgumentException('non-nullable fkiGhacqcontractID cannot be null');
        //}

	//if (($fkiGhacqcontractID > 16777215)) {
        if (!is_null($fkiGhacqcontractID) && ($fkiGhacqcontractID > 16777215)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiGhacqcontractID when calling CustomAttachmentResponse., must be smaller than or equal to 16777215.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiGhacqcontractID)?'null':'"'.$fkiGhacqcontractID.'"').' for fkiGhacqcontractID when calling CustomAttachmentResponse., must be smaller than or equal to 16777215.');
        }
	//if (($fkiGhacqcontractID < 0)) {
        if (!is_null($fkiGhacqcontractID) && ($fkiGhacqcontractID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiGhacqcontractID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiGhacqcontractID)?'null':'"'.$fkiGhacqcontractID.'"').' for fkiGhacqcontractID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiGhacqcontractID'] = $fkiGhacqcontractID;
        $this->container['fkiGhacqcontractID'] = (is_null($fkiGhacqcontractID) ? null : (int) $fkiGhacqcontractID);

        return $this;
    }

    /**
     * Gets fkiInscriptionID
     *
     * @return int|null
     */
    public function getFkiInscriptionID()
    {
	//return $this->container['fkiInscriptionID'];
        return $this->container['fkiInscriptionID'];
    }

    /**
     * Sets fkiInscriptionID
     *
     * @param int|null $fkiInscriptionID The unique ID of the Inscription.
     *
     * @return self
     */
    public function setFkiInscriptionID($fkiInscriptionID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiInscriptionID)) {
            //throw new \InvalidArgumentException('non-nullable fkiInscriptionID cannot be null');
        //}

	//if (($fkiInscriptionID < 0)) {
        if (!is_null($fkiInscriptionID) && ($fkiInscriptionID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiInscriptionID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiInscriptionID)?'null':'"'.$fkiInscriptionID.'"').' for fkiInscriptionID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiInscriptionID'] = $fkiInscriptionID;
        $this->container['fkiInscriptionID'] = (is_null($fkiInscriptionID) ? null : (int) $fkiInscriptionID);

        return $this;
    }

    /**
     * Gets fkiInscriptiontempID
     *
     * @return int|null
     */
    public function getFkiInscriptiontempID()
    {
	//return $this->container['fkiInscriptiontempID'];
        return $this->container['fkiInscriptiontempID'];
    }

    /**
     * Sets fkiInscriptiontempID
     *
     * @param int|null $fkiInscriptiontempID The unique ID of the Inscriptiontemp
     *
     * @return self
     */
    public function setFkiInscriptiontempID($fkiInscriptiontempID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiInscriptiontempID)) {
            //throw new \InvalidArgumentException('non-nullable fkiInscriptiontempID cannot be null');
        //}

	//if (($fkiInscriptiontempID > 16777215)) {
        if (!is_null($fkiInscriptiontempID) && ($fkiInscriptiontempID > 16777215)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiInscriptiontempID when calling CustomAttachmentResponse., must be smaller than or equal to 16777215.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiInscriptiontempID)?'null':'"'.$fkiInscriptiontempID.'"').' for fkiInscriptiontempID when calling CustomAttachmentResponse., must be smaller than or equal to 16777215.');
        }
	//if (($fkiInscriptiontempID < 1)) {
        if (!is_null($fkiInscriptiontempID) && ($fkiInscriptiontempID < 1)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiInscriptiontempID when calling CustomAttachmentResponse., must be bigger than or equal to 1.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiInscriptiontempID)?'null':'"'.$fkiInscriptiontempID.'"').' for fkiInscriptiontempID when calling CustomAttachmentResponse., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiInscriptiontempID'] = $fkiInscriptiontempID;
        $this->container['fkiInscriptiontempID'] = (is_null($fkiInscriptiontempID) ? null : (int) $fkiInscriptiontempID);

        return $this;
    }

    /**
     * Gets fkiInscriptionnotauthenticatedID
     *
     * @return int|null
     */
    public function getFkiInscriptionnotauthenticatedID()
    {
	//return $this->container['fkiInscriptionnotauthenticatedID'];
        return $this->container['fkiInscriptionnotauthenticatedID'];
    }

    /**
     * Sets fkiInscriptionnotauthenticatedID
     *
     * @param int|null $fkiInscriptionnotauthenticatedID The unique ID of the Inscriptionnotauthenticated.
     *
     * @return self
     */
    public function setFkiInscriptionnotauthenticatedID($fkiInscriptionnotauthenticatedID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiInscriptionnotauthenticatedID)) {
            //throw new \InvalidArgumentException('non-nullable fkiInscriptionnotauthenticatedID cannot be null');
        //}

	//if (($fkiInscriptionnotauthenticatedID < 0)) {
        if (!is_null($fkiInscriptionnotauthenticatedID) && ($fkiInscriptionnotauthenticatedID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiInscriptionnotauthenticatedID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiInscriptionnotauthenticatedID)?'null':'"'.$fkiInscriptionnotauthenticatedID.'"').' for fkiInscriptionnotauthenticatedID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiInscriptionnotauthenticatedID'] = $fkiInscriptionnotauthenticatedID;
        $this->container['fkiInscriptionnotauthenticatedID'] = (is_null($fkiInscriptionnotauthenticatedID) ? null : (int) $fkiInscriptionnotauthenticatedID);

        return $this;
    }

    /**
     * Gets fkiInvoiceID
     *
     * @return int|null
     */
    public function getFkiInvoiceID()
    {
	//return $this->container['fkiInvoiceID'];
        return $this->container['fkiInvoiceID'];
    }

    /**
     * Sets fkiInvoiceID
     *
     * @param int|null $fkiInvoiceID The unique ID of the Invoice.
     *
     * @return self
     */
    public function setFkiInvoiceID($fkiInvoiceID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiInvoiceID)) {
            //throw new \InvalidArgumentException('non-nullable fkiInvoiceID cannot be null');
        //}

	//if (($fkiInvoiceID < 0)) {
        if (!is_null($fkiInvoiceID) && ($fkiInvoiceID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiInvoiceID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiInvoiceID)?'null':'"'.$fkiInvoiceID.'"').' for fkiInvoiceID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiInvoiceID'] = $fkiInvoiceID;
        $this->container['fkiInvoiceID'] = (is_null($fkiInvoiceID) ? null : (int) $fkiInvoiceID);

        return $this;
    }

    /**
     * Gets fkiBuyercontractID
     *
     * @return int|null
     */
    public function getFkiBuyercontractID()
    {
	//return $this->container['fkiBuyercontractID'];
        return $this->container['fkiBuyercontractID'];
    }

    /**
     * Sets fkiBuyercontractID
     *
     * @param int|null $fkiBuyercontractID The unique ID of the Buyercontract
     *
     * @return self
     */
    public function setFkiBuyercontractID($fkiBuyercontractID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiBuyercontractID)) {
            //throw new \InvalidArgumentException('non-nullable fkiBuyercontractID cannot be null');
        //}

	//if (($fkiBuyercontractID > 65535)) {
        if (!is_null($fkiBuyercontractID) && ($fkiBuyercontractID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiBuyercontractID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiBuyercontractID)?'null':'"'.$fkiBuyercontractID.'"').' for fkiBuyercontractID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiBuyercontractID < 1)) {
        if (!is_null($fkiBuyercontractID) && ($fkiBuyercontractID < 1)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiBuyercontractID when calling CustomAttachmentResponse., must be bigger than or equal to 1.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiBuyercontractID)?'null':'"'.$fkiBuyercontractID.'"').' for fkiBuyercontractID when calling CustomAttachmentResponse., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiBuyercontractID'] = $fkiBuyercontractID;
        $this->container['fkiBuyercontractID'] = (is_null($fkiBuyercontractID) ? null : (int) $fkiBuyercontractID);

        return $this;
    }

    /**
     * Gets fkiFranchisebrokerID
     *
     * @return int|null
     */
    public function getFkiFranchisebrokerID()
    {
	//return $this->container['fkiFranchisebrokerID'];
        return $this->container['fkiFranchisebrokerID'];
    }

    /**
     * Sets fkiFranchisebrokerID
     *
     * @param int|null $fkiFranchisebrokerID The unique ID of the Franchisebroker
     *
     * @return self
     */
    public function setFkiFranchisebrokerID($fkiFranchisebrokerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiFranchisebrokerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiFranchisebrokerID cannot be null');
        //}

	//if (($fkiFranchisebrokerID < 0)) {
        if (!is_null($fkiFranchisebrokerID) && ($fkiFranchisebrokerID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiFranchisebrokerID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiFranchisebrokerID)?'null':'"'.$fkiFranchisebrokerID.'"').' for fkiFranchisebrokerID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiFranchisebrokerID'] = $fkiFranchisebrokerID;
        $this->container['fkiFranchisebrokerID'] = (is_null($fkiFranchisebrokerID) ? null : (int) $fkiFranchisebrokerID);

        return $this;
    }

    /**
     * Gets fkiFranchiseagenceID
     *
     * @return int|null
     */
    public function getFkiFranchiseagenceID()
    {
	//return $this->container['fkiFranchiseagenceID'];
        return $this->container['fkiFranchiseagenceID'];
    }

    /**
     * Sets fkiFranchiseagenceID
     *
     * @param int|null $fkiFranchiseagenceID The unique ID of the Franchiseagence
     *
     * @return self
     */
    public function setFkiFranchiseagenceID($fkiFranchiseagenceID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiFranchiseagenceID)) {
            //throw new \InvalidArgumentException('non-nullable fkiFranchiseagenceID cannot be null');
        //}

	//if (($fkiFranchiseagenceID > 65535)) {
        if (!is_null($fkiFranchiseagenceID) && ($fkiFranchiseagenceID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiFranchiseagenceID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiFranchiseagenceID)?'null':'"'.$fkiFranchiseagenceID.'"').' for fkiFranchiseagenceID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiFranchiseagenceID < 0)) {
        if (!is_null($fkiFranchiseagenceID) && ($fkiFranchiseagenceID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiFranchiseagenceID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiFranchiseagenceID)?'null':'"'.$fkiFranchiseagenceID.'"').' for fkiFranchiseagenceID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiFranchiseagenceID'] = $fkiFranchiseagenceID;
        $this->container['fkiFranchiseagenceID'] = (is_null($fkiFranchiseagenceID) ? null : (int) $fkiFranchiseagenceID);

        return $this;
    }

    /**
     * Gets fkiFranchiseofficeID
     *
     * @return int|null
     */
    public function getFkiFranchiseofficeID()
    {
	//return $this->container['fkiFranchiseofficeID'];
        return $this->container['fkiFranchiseofficeID'];
    }

    /**
     * Sets fkiFranchiseofficeID
     *
     * @param int|null $fkiFranchiseofficeID The unique ID of the Franchisereoffice
     *
     * @return self
     */
    public function setFkiFranchiseofficeID($fkiFranchiseofficeID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiFranchiseofficeID)) {
            //throw new \InvalidArgumentException('non-nullable fkiFranchiseofficeID cannot be null');
        //}

	//if (($fkiFranchiseofficeID < 0)) {
        if (!is_null($fkiFranchiseofficeID) && ($fkiFranchiseofficeID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiFranchiseofficeID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiFranchiseofficeID)?'null':'"'.$fkiFranchiseofficeID.'"').' for fkiFranchiseofficeID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiFranchiseofficeID'] = $fkiFranchiseofficeID;
        $this->container['fkiFranchiseofficeID'] = (is_null($fkiFranchiseofficeID) ? null : (int) $fkiFranchiseofficeID);

        return $this;
    }

    /**
     * Gets fkiFranchisefranchiseID
     *
     * @return int|null
     */
    public function getFkiFranchisefranchiseID()
    {
	//return $this->container['fkiFranchisefranchiseID'];
        return $this->container['fkiFranchisefranchiseID'];
    }

    /**
     * Sets fkiFranchisefranchiseID
     *
     * @param int|null $fkiFranchisefranchiseID The unique ID of the Franchisefranchise
     *
     * @return self
     */
    public function setFkiFranchisefranchiseID($fkiFranchisefranchiseID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiFranchisefranchiseID)) {
            //throw new \InvalidArgumentException('non-nullable fkiFranchisefranchiseID cannot be null');
        //}

	//if (($fkiFranchisefranchiseID > 65535)) {
        if (!is_null($fkiFranchisefranchiseID) && ($fkiFranchisefranchiseID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiFranchisefranchiseID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiFranchisefranchiseID)?'null':'"'.$fkiFranchisefranchiseID.'"').' for fkiFranchisefranchiseID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiFranchisefranchiseID < 0)) {
        if (!is_null($fkiFranchisefranchiseID) && ($fkiFranchisefranchiseID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiFranchisefranchiseID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiFranchisefranchiseID)?'null':'"'.$fkiFranchisefranchiseID.'"').' for fkiFranchisefranchiseID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiFranchisefranchiseID'] = $fkiFranchisefranchiseID;
        $this->container['fkiFranchisefranchiseID'] = (is_null($fkiFranchisefranchiseID) ? null : (int) $fkiFranchisefranchiseID);

        return $this;
    }

    /**
     * Gets fkiFranchisecomplaintID
     *
     * @return int|null
     */
    public function getFkiFranchisecomplaintID()
    {
	//return $this->container['fkiFranchisecomplaintID'];
        return $this->container['fkiFranchisecomplaintID'];
    }

    /**
     * Sets fkiFranchisecomplaintID
     *
     * @param int|null $fkiFranchisecomplaintID The unique ID of the Franchisecomplaint
     *
     * @return self
     */
    public function setFkiFranchisecomplaintID($fkiFranchisecomplaintID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiFranchisecomplaintID)) {
            //throw new \InvalidArgumentException('non-nullable fkiFranchisecomplaintID cannot be null');
        //}

	//if (($fkiFranchisecomplaintID > 65535)) {
        if (!is_null($fkiFranchisecomplaintID) && ($fkiFranchisecomplaintID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiFranchisecomplaintID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiFranchisecomplaintID)?'null':'"'.$fkiFranchisecomplaintID.'"').' for fkiFranchisecomplaintID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiFranchisecomplaintID < 0)) {
        if (!is_null($fkiFranchisecomplaintID) && ($fkiFranchisecomplaintID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiFranchisecomplaintID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiFranchisecomplaintID)?'null':'"'.$fkiFranchisecomplaintID.'"').' for fkiFranchisecomplaintID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiFranchisecomplaintID'] = $fkiFranchisecomplaintID;
        $this->container['fkiFranchisecomplaintID'] = (is_null($fkiFranchisecomplaintID) ? null : (int) $fkiFranchisecomplaintID);

        return $this;
    }

    /**
     * Gets fkiLeadID
     *
     * @return int|null
     */
    public function getFkiLeadID()
    {
	//return $this->container['fkiLeadID'];
        return $this->container['fkiLeadID'];
    }

    /**
     * Sets fkiLeadID
     *
     * @param int|null $fkiLeadID The unique ID of the Lead
     *
     * @return self
     */
    public function setFkiLeadID($fkiLeadID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiLeadID)) {
            //throw new \InvalidArgumentException('non-nullable fkiLeadID cannot be null');
        //}

	//if (($fkiLeadID > 65535)) {
        if (!is_null($fkiLeadID) && ($fkiLeadID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiLeadID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiLeadID)?'null':'"'.$fkiLeadID.'"').' for fkiLeadID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiLeadID < 0)) {
        if (!is_null($fkiLeadID) && ($fkiLeadID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiLeadID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiLeadID)?'null':'"'.$fkiLeadID.'"').' for fkiLeadID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiLeadID'] = $fkiLeadID;
        $this->container['fkiLeadID'] = (is_null($fkiLeadID) ? null : (int) $fkiLeadID);

        return $this;
    }

    /**
     * Gets fkiMarketingprogramID
     *
     * @return int|null
     */
    public function getFkiMarketingprogramID()
    {
	//return $this->container['fkiMarketingprogramID'];
        return $this->container['fkiMarketingprogramID'];
    }

    /**
     * Sets fkiMarketingprogramID
     *
     * @param int|null $fkiMarketingprogramID The unique ID of the Marketingprogram
     *
     * @return self
     */
    public function setFkiMarketingprogramID($fkiMarketingprogramID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiMarketingprogramID)) {
            //throw new \InvalidArgumentException('non-nullable fkiMarketingprogramID cannot be null');
        //}

	//if (($fkiMarketingprogramID > 255)) {
        if (!is_null($fkiMarketingprogramID) && ($fkiMarketingprogramID > 255)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiMarketingprogramID when calling CustomAttachmentResponse., must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiMarketingprogramID)?'null':'"'.$fkiMarketingprogramID.'"').' for fkiMarketingprogramID when calling CustomAttachmentResponse., must be smaller than or equal to 255.');
        }
	//if (($fkiMarketingprogramID < 0)) {
        if (!is_null($fkiMarketingprogramID) && ($fkiMarketingprogramID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiMarketingprogramID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiMarketingprogramID)?'null':'"'.$fkiMarketingprogramID.'"').' for fkiMarketingprogramID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiMarketingprogramID'] = $fkiMarketingprogramID;
        $this->container['fkiMarketingprogramID'] = (is_null($fkiMarketingprogramID) ? null : (int) $fkiMarketingprogramID);

        return $this;
    }

    /**
     * Gets fkiMarketingfollowID
     *
     * @return int|null
     */
    public function getFkiMarketingfollowID()
    {
	//return $this->container['fkiMarketingfollowID'];
        return $this->container['fkiMarketingfollowID'];
    }

    /**
     * Sets fkiMarketingfollowID
     *
     * @param int|null $fkiMarketingfollowID The unique ID of the Marketingfollow
     *
     * @return self
     */
    public function setFkiMarketingfollowID($fkiMarketingfollowID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiMarketingfollowID)) {
            //throw new \InvalidArgumentException('non-nullable fkiMarketingfollowID cannot be null');
        //}

	//if (($fkiMarketingfollowID > 65535)) {
        if (!is_null($fkiMarketingfollowID) && ($fkiMarketingfollowID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiMarketingfollowID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiMarketingfollowID)?'null':'"'.$fkiMarketingfollowID.'"').' for fkiMarketingfollowID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiMarketingfollowID < 0)) {
        if (!is_null($fkiMarketingfollowID) && ($fkiMarketingfollowID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiMarketingfollowID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiMarketingfollowID)?'null':'"'.$fkiMarketingfollowID.'"').' for fkiMarketingfollowID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiMarketingfollowID'] = $fkiMarketingfollowID;
        $this->container['fkiMarketingfollowID'] = (is_null($fkiMarketingfollowID) ? null : (int) $fkiMarketingfollowID);

        return $this;
    }

    /**
     * Gets fkiNotaryID
     *
     * @return int|null
     */
    public function getFkiNotaryID()
    {
	//return $this->container['fkiNotaryID'];
        return $this->container['fkiNotaryID'];
    }

    /**
     * Sets fkiNotaryID
     *
     * @param int|null $fkiNotaryID The unique ID of the Notary.
     *
     * @return self
     */
    public function setFkiNotaryID($fkiNotaryID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiNotaryID)) {
            //throw new \InvalidArgumentException('non-nullable fkiNotaryID cannot be null');
        //}

	//if (($fkiNotaryID < 0)) {
        if (!is_null($fkiNotaryID) && ($fkiNotaryID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiNotaryID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiNotaryID)?'null':'"'.$fkiNotaryID.'"').' for fkiNotaryID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiNotaryID'] = $fkiNotaryID;
        $this->container['fkiNotaryID'] = (is_null($fkiNotaryID) ? null : (int) $fkiNotaryID);

        return $this;
    }

    /**
     * Gets fkiOfficetaxreportID
     *
     * @return int|null
     */
    public function getFkiOfficetaxreportID()
    {
	//return $this->container['fkiOfficetaxreportID'];
        return $this->container['fkiOfficetaxreportID'];
    }

    /**
     * Sets fkiOfficetaxreportID
     *
     * @param int|null $fkiOfficetaxreportID The unique ID of the Officetaxreport
     *
     * @return self
     */
    public function setFkiOfficetaxreportID($fkiOfficetaxreportID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiOfficetaxreportID)) {
            //throw new \InvalidArgumentException('non-nullable fkiOfficetaxreportID cannot be null');
        //}

	//if (($fkiOfficetaxreportID > 65535)) {
        if (!is_null($fkiOfficetaxreportID) && ($fkiOfficetaxreportID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiOfficetaxreportID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiOfficetaxreportID)?'null':'"'.$fkiOfficetaxreportID.'"').' for fkiOfficetaxreportID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiOfficetaxreportID < 0)) {
        if (!is_null($fkiOfficetaxreportID) && ($fkiOfficetaxreportID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiOfficetaxreportID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiOfficetaxreportID)?'null':'"'.$fkiOfficetaxreportID.'"').' for fkiOfficetaxreportID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiOfficetaxreportID'] = $fkiOfficetaxreportID;
        $this->container['fkiOfficetaxreportID'] = (is_null($fkiOfficetaxreportID) ? null : (int) $fkiOfficetaxreportID);

        return $this;
    }

    /**
     * Gets fkiOtherincomeID
     *
     * @return int|null
     */
    public function getFkiOtherincomeID()
    {
	//return $this->container['fkiOtherincomeID'];
        return $this->container['fkiOtherincomeID'];
    }

    /**
     * Sets fkiOtherincomeID
     *
     * @param int|null $fkiOtherincomeID The unique ID of the Otherincome
     *
     * @return self
     */
    public function setFkiOtherincomeID($fkiOtherincomeID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiOtherincomeID)) {
            //throw new \InvalidArgumentException('non-nullable fkiOtherincomeID cannot be null');
        //}

	//if (($fkiOtherincomeID > 65535)) {
        if (!is_null($fkiOtherincomeID) && ($fkiOtherincomeID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiOtherincomeID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiOtherincomeID)?'null':'"'.$fkiOtherincomeID.'"').' for fkiOtherincomeID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiOtherincomeID < 1)) {
        if (!is_null($fkiOtherincomeID) && ($fkiOtherincomeID < 1)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiOtherincomeID when calling CustomAttachmentResponse., must be bigger than or equal to 1.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiOtherincomeID)?'null':'"'.$fkiOtherincomeID.'"').' for fkiOtherincomeID when calling CustomAttachmentResponse., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiOtherincomeID'] = $fkiOtherincomeID;
        $this->container['fkiOtherincomeID'] = (is_null($fkiOtherincomeID) ? null : (int) $fkiOtherincomeID);

        return $this;
    }

    /**
     * Gets fkiPaymentpreparationID
     *
     * @return int|null
     */
    public function getFkiPaymentpreparationID()
    {
	//return $this->container['fkiPaymentpreparationID'];
        return $this->container['fkiPaymentpreparationID'];
    }

    /**
     * Sets fkiPaymentpreparationID
     *
     * @param int|null $fkiPaymentpreparationID The unique ID of the Paymentpreparation
     *
     * @return self
     */
    public function setFkiPaymentpreparationID($fkiPaymentpreparationID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiPaymentpreparationID)) {
            //throw new \InvalidArgumentException('non-nullable fkiPaymentpreparationID cannot be null');
        //}

	//if (($fkiPaymentpreparationID > 16777215)) {
        if (!is_null($fkiPaymentpreparationID) && ($fkiPaymentpreparationID > 16777215)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiPaymentpreparationID when calling CustomAttachmentResponse., must be smaller than or equal to 16777215.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiPaymentpreparationID)?'null':'"'.$fkiPaymentpreparationID.'"').' for fkiPaymentpreparationID when calling CustomAttachmentResponse., must be smaller than or equal to 16777215.');
        }
	//if (($fkiPaymentpreparationID < 0)) {
        if (!is_null($fkiPaymentpreparationID) && ($fkiPaymentpreparationID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiPaymentpreparationID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiPaymentpreparationID)?'null':'"'.$fkiPaymentpreparationID.'"').' for fkiPaymentpreparationID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiPaymentpreparationID'] = $fkiPaymentpreparationID;
        $this->container['fkiPaymentpreparationID'] = (is_null($fkiPaymentpreparationID) ? null : (int) $fkiPaymentpreparationID);

        return $this;
    }

    /**
     * Gets fkiPurchaseID
     *
     * @return int|null
     */
    public function getFkiPurchaseID()
    {
	//return $this->container['fkiPurchaseID'];
        return $this->container['fkiPurchaseID'];
    }

    /**
     * Sets fkiPurchaseID
     *
     * @param int|null $fkiPurchaseID The unique ID of the Purchase
     *
     * @return self
     */
    public function setFkiPurchaseID($fkiPurchaseID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiPurchaseID)) {
            //throw new \InvalidArgumentException('non-nullable fkiPurchaseID cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiPurchaseID'] = $fkiPurchaseID;
        $this->container['fkiPurchaseID'] = (is_null($fkiPurchaseID) ? null : (int) $fkiPurchaseID);

        return $this;
    }

    /**
     * Gets fkiSalaryID
     *
     * @return int|null
     */
    public function getFkiSalaryID()
    {
	//return $this->container['fkiSalaryID'];
        return $this->container['fkiSalaryID'];
    }

    /**
     * Sets fkiSalaryID
     *
     * @param int|null $fkiSalaryID The unique ID of the Salary
     *
     * @return self
     */
    public function setFkiSalaryID($fkiSalaryID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiSalaryID)) {
            //throw new \InvalidArgumentException('non-nullable fkiSalaryID cannot be null');
        //}

	//if (($fkiSalaryID > 16777215)) {
        if (!is_null($fkiSalaryID) && ($fkiSalaryID > 16777215)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiSalaryID when calling CustomAttachmentResponse., must be smaller than or equal to 16777215.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiSalaryID)?'null':'"'.$fkiSalaryID.'"').' for fkiSalaryID when calling CustomAttachmentResponse., must be smaller than or equal to 16777215.');
        }
	//if (($fkiSalaryID < 0)) {
        if (!is_null($fkiSalaryID) && ($fkiSalaryID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiSalaryID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiSalaryID)?'null':'"'.$fkiSalaryID.'"').' for fkiSalaryID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiSalaryID'] = $fkiSalaryID;
        $this->container['fkiSalaryID'] = (is_null($fkiSalaryID) ? null : (int) $fkiSalaryID);

        return $this;
    }

    /**
     * Gets fkiSupplierID
     *
     * @return int|null
     */
    public function getFkiSupplierID()
    {
	//return $this->container['fkiSupplierID'];
        return $this->container['fkiSupplierID'];
    }

    /**
     * Sets fkiSupplierID
     *
     * @param int|null $fkiSupplierID The unique ID of the Supplier.
     *
     * @return self
     */
    public function setFkiSupplierID($fkiSupplierID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiSupplierID)) {
            //throw new \InvalidArgumentException('non-nullable fkiSupplierID cannot be null');
        //}

	//if (($fkiSupplierID < 0)) {
        if (!is_null($fkiSupplierID) && ($fkiSupplierID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiSupplierID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiSupplierID)?'null':'"'.$fkiSupplierID.'"').' for fkiSupplierID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiSupplierID'] = $fkiSupplierID;
        $this->container['fkiSupplierID'] = (is_null($fkiSupplierID) ? null : (int) $fkiSupplierID);

        return $this;
    }

    /**
     * Gets fkiTranqcontractID
     *
     * @return int|null
     */
    public function getFkiTranqcontractID()
    {
	//return $this->container['fkiTranqcontractID'];
        return $this->container['fkiTranqcontractID'];
    }

    /**
     * Sets fkiTranqcontractID
     *
     * @param int|null $fkiTranqcontractID The unique ID of the Tranqcontract
     *
     * @return self
     */
    public function setFkiTranqcontractID($fkiTranqcontractID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiTranqcontractID)) {
            //throw new \InvalidArgumentException('non-nullable fkiTranqcontractID cannot be null');
        //}

	//if (($fkiTranqcontractID > 16777215)) {
        if (!is_null($fkiTranqcontractID) && ($fkiTranqcontractID > 16777215)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiTranqcontractID when calling CustomAttachmentResponse., must be smaller than or equal to 16777215.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiTranqcontractID)?'null':'"'.$fkiTranqcontractID.'"').' for fkiTranqcontractID when calling CustomAttachmentResponse., must be smaller than or equal to 16777215.');
        }
	//if (($fkiTranqcontractID < 0)) {
        if (!is_null($fkiTranqcontractID) && ($fkiTranqcontractID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiTranqcontractID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiTranqcontractID)?'null':'"'.$fkiTranqcontractID.'"').' for fkiTranqcontractID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiTranqcontractID'] = $fkiTranqcontractID;
        $this->container['fkiTranqcontractID'] = (is_null($fkiTranqcontractID) ? null : (int) $fkiTranqcontractID);

        return $this;
    }

    /**
     * Gets fkiTemplateID
     *
     * @return int|null
     */
    public function getFkiTemplateID()
    {
	//return $this->container['fkiTemplateID'];
        return $this->container['fkiTemplateID'];
    }

    /**
     * Sets fkiTemplateID
     *
     * @param int|null $fkiTemplateID The unique ID of the Template
     *
     * @return self
     */
    public function setFkiTemplateID($fkiTemplateID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiTemplateID)) {
            //throw new \InvalidArgumentException('non-nullable fkiTemplateID cannot be null');
        //}

	//if (($fkiTemplateID > 65535)) {
        if (!is_null($fkiTemplateID) && ($fkiTemplateID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiTemplateID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiTemplateID)?'null':'"'.$fkiTemplateID.'"').' for fkiTemplateID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiTemplateID < 0)) {
        if (!is_null($fkiTemplateID) && ($fkiTemplateID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiTemplateID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiTemplateID)?'null':'"'.$fkiTemplateID.'"').' for fkiTemplateID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiTemplateID'] = $fkiTemplateID;
        $this->container['fkiTemplateID'] = (is_null($fkiTemplateID) ? null : (int) $fkiTemplateID);

        return $this;
    }

    /**
     * Gets fkiInscriptionchecklistID
     *
     * @return int|null
     */
    public function getFkiInscriptionchecklistID()
    {
	//return $this->container['fkiInscriptionchecklistID'];
        return $this->container['fkiInscriptionchecklistID'];
    }

    /**
     * Sets fkiInscriptionchecklistID
     *
     * @param int|null $fkiInscriptionchecklistID The unique ID of the Inscriptionchecklist
     *
     * @return self
     */
    public function setFkiInscriptionchecklistID($fkiInscriptionchecklistID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiInscriptionchecklistID)) {
            //throw new \InvalidArgumentException('non-nullable fkiInscriptionchecklistID cannot be null');
        //}

	//if (($fkiInscriptionchecklistID > 16777215)) {
        if (!is_null($fkiInscriptionchecklistID) && ($fkiInscriptionchecklistID > 16777215)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiInscriptionchecklistID when calling CustomAttachmentResponse., must be smaller than or equal to 16777215.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiInscriptionchecklistID)?'null':'"'.$fkiInscriptionchecklistID.'"').' for fkiInscriptionchecklistID when calling CustomAttachmentResponse., must be smaller than or equal to 16777215.');
        }
	//if (($fkiInscriptionchecklistID < 0)) {
        if (!is_null($fkiInscriptionchecklistID) && ($fkiInscriptionchecklistID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiInscriptionchecklistID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiInscriptionchecklistID)?'null':'"'.$fkiInscriptionchecklistID.'"').' for fkiInscriptionchecklistID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiInscriptionchecklistID'] = $fkiInscriptionchecklistID;
        $this->container['fkiInscriptionchecklistID'] = (is_null($fkiInscriptionchecklistID) ? null : (int) $fkiInscriptionchecklistID);

        return $this;
    }

    /**
     * Gets fkiFolderID
     *
     * @return int|null
     */
    public function getFkiFolderID()
    {
	//return $this->container['fkiFolderID'];
        return $this->container['fkiFolderID'];
    }

    /**
     * Sets fkiFolderID
     *
     * @param int|null $fkiFolderID The unique ID of the Folder
     *
     * @return self
     */
    public function setFkiFolderID($fkiFolderID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiFolderID)) {
            //throw new \InvalidArgumentException('non-nullable fkiFolderID cannot be null');
        //}

	//if (($fkiFolderID > 65535)) {
        if (!is_null($fkiFolderID) && ($fkiFolderID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiFolderID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiFolderID)?'null':'"'.$fkiFolderID.'"').' for fkiFolderID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiFolderID < 0)) {
        if (!is_null($fkiFolderID) && ($fkiFolderID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiFolderID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiFolderID)?'null':'"'.$fkiFolderID.'"').' for fkiFolderID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiFolderID'] = $fkiFolderID;
        $this->container['fkiFolderID'] = (is_null($fkiFolderID) ? null : (int) $fkiFolderID);

        return $this;
    }

    /**
     * Gets fkiRejectedoffertopurchaseID
     *
     * @return int|null
     */
    public function getFkiRejectedoffertopurchaseID()
    {
	//return $this->container['fkiRejectedoffertopurchaseID'];
        return $this->container['fkiRejectedoffertopurchaseID'];
    }

    /**
     * Sets fkiRejectedoffertopurchaseID
     *
     * @param int|null $fkiRejectedoffertopurchaseID The unique ID of the Rejectedoffertopurchase
     *
     * @return self
     */
    public function setFkiRejectedoffertopurchaseID($fkiRejectedoffertopurchaseID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiRejectedoffertopurchaseID)) {
            //throw new \InvalidArgumentException('non-nullable fkiRejectedoffertopurchaseID cannot be null');
        //}

	//if (($fkiRejectedoffertopurchaseID > 65535)) {
        if (!is_null($fkiRejectedoffertopurchaseID) && ($fkiRejectedoffertopurchaseID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiRejectedoffertopurchaseID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiRejectedoffertopurchaseID)?'null':'"'.$fkiRejectedoffertopurchaseID.'"').' for fkiRejectedoffertopurchaseID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiRejectedoffertopurchaseID < 1)) {
        if (!is_null($fkiRejectedoffertopurchaseID) && ($fkiRejectedoffertopurchaseID < 1)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiRejectedoffertopurchaseID when calling CustomAttachmentResponse., must be bigger than or equal to 1.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiRejectedoffertopurchaseID)?'null':'"'.$fkiRejectedoffertopurchaseID.'"').' for fkiRejectedoffertopurchaseID when calling CustomAttachmentResponse., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiRejectedoffertopurchaseID'] = $fkiRejectedoffertopurchaseID;
        $this->container['fkiRejectedoffertopurchaseID'] = (is_null($fkiRejectedoffertopurchaseID) ? null : (int) $fkiRejectedoffertopurchaseID);

        return $this;
    }

    /**
     * Gets fkiDisclosureID
     *
     * @return int|null
     */
    public function getFkiDisclosureID()
    {
	//return $this->container['fkiDisclosureID'];
        return $this->container['fkiDisclosureID'];
    }

    /**
     * Sets fkiDisclosureID
     *
     * @param int|null $fkiDisclosureID The unique ID of the Disclosure
     *
     * @return self
     */
    public function setFkiDisclosureID($fkiDisclosureID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiDisclosureID)) {
            //throw new \InvalidArgumentException('non-nullable fkiDisclosureID cannot be null');
        //}

	//if (($fkiDisclosureID > 65535)) {
        if (!is_null($fkiDisclosureID) && ($fkiDisclosureID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiDisclosureID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiDisclosureID)?'null':'"'.$fkiDisclosureID.'"').' for fkiDisclosureID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiDisclosureID < 0)) {
        if (!is_null($fkiDisclosureID) && ($fkiDisclosureID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiDisclosureID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiDisclosureID)?'null':'"'.$fkiDisclosureID.'"').' for fkiDisclosureID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiDisclosureID'] = $fkiDisclosureID;
        $this->container['fkiDisclosureID'] = (is_null($fkiDisclosureID) ? null : (int) $fkiDisclosureID);

        return $this;
    }

    /**
     * Gets fkiReconciliationID
     *
     * @return int|null
     */
    public function getFkiReconciliationID()
    {
	//return $this->container['fkiReconciliationID'];
        return $this->container['fkiReconciliationID'];
    }

    /**
     * Sets fkiReconciliationID
     *
     * @param int|null $fkiReconciliationID The unique ID of the Reconciliation
     *
     * @return self
     */
    public function setFkiReconciliationID($fkiReconciliationID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiReconciliationID)) {
            //throw new \InvalidArgumentException('non-nullable fkiReconciliationID cannot be null');
        //}

	//if (($fkiReconciliationID > 65535)) {
        if (!is_null($fkiReconciliationID) && ($fkiReconciliationID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiReconciliationID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiReconciliationID)?'null':'"'.$fkiReconciliationID.'"').' for fkiReconciliationID when calling CustomAttachmentResponse., must be smaller than or equal to 65535.');
        }
	//if (($fkiReconciliationID < 0)) {
        if (!is_null($fkiReconciliationID) && ($fkiReconciliationID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiReconciliationID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiReconciliationID)?'null':'"'.$fkiReconciliationID.'"').' for fkiReconciliationID when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiReconciliationID'] = $fkiReconciliationID;
        $this->container['fkiReconciliationID'] = (is_null($fkiReconciliationID) ? null : (int) $fkiReconciliationID);

        return $this;
    }

    /**
     * Gets fkiEzsigndocumentIDReference
     *
     * @return int|null
     */
    public function getFkiEzsigndocumentIDReference()
    {
	//return $this->container['fkiEzsigndocumentIDReference'];
        return $this->container['fkiEzsigndocumentIDReference'];
    }

    /**
     * Sets fkiEzsigndocumentIDReference
     *
     * @param int|null $fkiEzsigndocumentIDReference The unique ID of the Ezsigndocument
     *
     * @return self
     */
    public function setFkiEzsigndocumentIDReference($fkiEzsigndocumentIDReference)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzsigndocumentIDReference)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzsigndocumentIDReference cannot be null');
        //}

	//if (($fkiEzsigndocumentIDReference < 0)) {
        if (!is_null($fkiEzsigndocumentIDReference) && ($fkiEzsigndocumentIDReference < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzsigndocumentIDReference when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzsigndocumentIDReference)?'null':'"'.$fkiEzsigndocumentIDReference.'"').' for fkiEzsigndocumentIDReference when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzsigndocumentIDReference'] = $fkiEzsigndocumentIDReference;
        $this->container['fkiEzsigndocumentIDReference'] = (is_null($fkiEzsigndocumentIDReference) ? null : (int) $fkiEzsigndocumentIDReference);

        return $this;
    }

    /**
     * Gets eAttachmentDocumenttype
     *
     * @return \eZmaxAPI\Model\FieldEAttachmentDocumenttype
     */
    public function getEAttachmentDocumenttype()
    {
	//return $this->container['eAttachmentDocumenttype'];
        return $this->container['eAttachmentDocumenttype'];
    }

    /**
     * Sets eAttachmentDocumenttype
     *
     * @param \eZmaxAPI\Model\FieldEAttachmentDocumenttype $eAttachmentDocumenttype eAttachmentDocumenttype
     *
     * @return self
     */
    public function setEAttachmentDocumenttype($eAttachmentDocumenttype)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eAttachmentDocumenttype)) {
            //throw new \InvalidArgumentException('non-nullable eAttachmentDocumenttype cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eAttachmentDocumenttype'] = $eAttachmentDocumenttype;
        $this->container['eAttachmentDocumenttype'] = $eAttachmentDocumenttype;

        return $this;
    }

    /**
     * Gets sAttachmentName
     *
     * @return string
     */
    public function getSAttachmentName()
    {
	//return $this->container['sAttachmentName'];
        return is_null($this->container['sAttachmentName']) ? null : trim($this->container['sAttachmentName']);
    }

    /**
     * Sets sAttachmentName
     *
     * @param string $sAttachmentName The name of the Attachment
     *
     * @return self
     */
    public function setSAttachmentName($sAttachmentName)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sAttachmentName)) {
            //throw new \InvalidArgumentException('non-nullable sAttachmentName cannot be null');
        //}

	//if ((!preg_match("/^.{0,75}$/", ObjectSerializer::toString($sAttachmentName)))) {
        if (!is_null($sAttachmentName) && (!preg_match("/(*UTF8)^.{0,75}$/", ObjectSerializer::toString($sAttachmentName)))) {
	    //throw new \InvalidArgumentException("invalid value for \$sAttachmentName when calling CustomAttachmentResponse., must conform to the pattern /^.{0,75}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($sAttachmentName)?'null':'"'.$sAttachmentName.'"')." for sAttachmentName when calling CustomAttachmentResponse., must conform to the pattern /^.{0,75}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sAttachmentName'] = $sAttachmentName;
        $this->container['sAttachmentName'] = (is_null($sAttachmentName) ? null : trim((string) $sAttachmentName));

        return $this;
    }

    /**
     * Gets eAttachmentPrivacy
     *
     * @return \eZmaxAPI\Model\FieldEAttachmentPrivacy
     */
    public function getEAttachmentPrivacy()
    {
	//return $this->container['eAttachmentPrivacy'];
        return $this->container['eAttachmentPrivacy'];
    }

    /**
     * Sets eAttachmentPrivacy
     *
     * @param \eZmaxAPI\Model\FieldEAttachmentPrivacy $eAttachmentPrivacy eAttachmentPrivacy
     *
     * @return self
     */
    public function setEAttachmentPrivacy($eAttachmentPrivacy)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eAttachmentPrivacy)) {
            //throw new \InvalidArgumentException('non-nullable eAttachmentPrivacy cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eAttachmentPrivacy'] = $eAttachmentPrivacy;
        $this->container['eAttachmentPrivacy'] = $eAttachmentPrivacy;

        return $this;
    }

    /**
     * Gets fkiUserIDSpecific
     *
     * @return int|null
     */
    public function getFkiUserIDSpecific()
    {
	//return $this->container['fkiUserIDSpecific'];
        return $this->container['fkiUserIDSpecific'];
    }

    /**
     * Sets fkiUserIDSpecific
     *
     * @param int|null $fkiUserIDSpecific The unique ID of the User
     *
     * @return self
     */
    public function setFkiUserIDSpecific($fkiUserIDSpecific)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiUserIDSpecific)) {
            //throw new \InvalidArgumentException('non-nullable fkiUserIDSpecific cannot be null');
        //}

	//if (($fkiUserIDSpecific < 0)) {
        if (!is_null($fkiUserIDSpecific) && ($fkiUserIDSpecific < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiUserIDSpecific when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiUserIDSpecific)?'null':'"'.$fkiUserIDSpecific.'"').' for fkiUserIDSpecific when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiUserIDSpecific'] = $fkiUserIDSpecific;
        $this->container['fkiUserIDSpecific'] = (is_null($fkiUserIDSpecific) ? null : (int) $fkiUserIDSpecific);

        return $this;
    }

    /**
     * Gets eAttachmentType
     *
     * @return \eZmaxAPI\Model\FieldEAttachmentType
     */
    public function getEAttachmentType()
    {
	//return $this->container['eAttachmentType'];
        return $this->container['eAttachmentType'];
    }

    /**
     * Sets eAttachmentType
     *
     * @param \eZmaxAPI\Model\FieldEAttachmentType $eAttachmentType eAttachmentType
     *
     * @return self
     */
    public function setEAttachmentType($eAttachmentType)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eAttachmentType)) {
            //throw new \InvalidArgumentException('non-nullable eAttachmentType cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eAttachmentType'] = $eAttachmentType;
        $this->container['eAttachmentType'] = $eAttachmentType;

        return $this;
    }

    /**
     * Gets iAttachmentSize
     *
     * @return int
     */
    public function getIAttachmentSize()
    {
	//return $this->container['iAttachmentSize'];
        return $this->container['iAttachmentSize'];
    }

    /**
     * Sets iAttachmentSize
     *
     * @param int $iAttachmentSize The size of the Attachment
     *
     * @return self
     */
    public function setIAttachmentSize($iAttachmentSize)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iAttachmentSize)) {
            //throw new \InvalidArgumentException('non-nullable iAttachmentSize cannot be null');
        //}

	//if (($iAttachmentSize > 4294967295)) {
        if (($iAttachmentSize > 4294967295)) {
	    //throw new \InvalidArgumentException('invalid value for $iAttachmentSize when calling CustomAttachmentResponse., must be smaller than or equal to 4294967295.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iAttachmentSize)?'null':'"'.$iAttachmentSize.'"').' for iAttachmentSize when calling CustomAttachmentResponse., must be smaller than or equal to 4294967295.');
        }
	//if (($iAttachmentSize < 0)) {
        if (($iAttachmentSize < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $iAttachmentSize when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iAttachmentSize)?'null':'"'.$iAttachmentSize.'"').' for iAttachmentSize when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iAttachmentSize'] = $iAttachmentSize;
        $this->container['iAttachmentSize'] = (is_null($iAttachmentSize) ? null : (int) $iAttachmentSize);

        return $this;
    }

    /**
     * Gets iAttachmentEDMmoduleflag
     *
     * @return int|null
     */
    public function getIAttachmentEDMmoduleflag()
    {
	//return $this->container['iAttachmentEDMmoduleflag'];
        return $this->container['iAttachmentEDMmoduleflag'];
    }

    /**
     * Sets iAttachmentEDMmoduleflag
     *
     * @param int|null $iAttachmentEDMmoduleflag The edmmoduleflag of the Attachment
     *
     * @return self
     */
    public function setIAttachmentEDMmoduleflag($iAttachmentEDMmoduleflag)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iAttachmentEDMmoduleflag)) {
            //throw new \InvalidArgumentException('non-nullable iAttachmentEDMmoduleflag cannot be null');
        //}

	//if (($iAttachmentEDMmoduleflag > 255)) {
        if (!is_null($iAttachmentEDMmoduleflag) && ($iAttachmentEDMmoduleflag > 255)) {
	    //throw new \InvalidArgumentException('invalid value for $iAttachmentEDMmoduleflag when calling CustomAttachmentResponse., must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iAttachmentEDMmoduleflag)?'null':'"'.$iAttachmentEDMmoduleflag.'"').' for iAttachmentEDMmoduleflag when calling CustomAttachmentResponse., must be smaller than or equal to 255.');
        }
	//if (($iAttachmentEDMmoduleflag < 0)) {
        if (!is_null($iAttachmentEDMmoduleflag) && ($iAttachmentEDMmoduleflag < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $iAttachmentEDMmoduleflag when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iAttachmentEDMmoduleflag)?'null':'"'.$iAttachmentEDMmoduleflag.'"').' for iAttachmentEDMmoduleflag when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iAttachmentEDMmoduleflag'] = $iAttachmentEDMmoduleflag;
        $this->container['iAttachmentEDMmoduleflag'] = (is_null($iAttachmentEDMmoduleflag) ? null : (int) $iAttachmentEDMmoduleflag);

        return $this;
    }

    /**
     * Gets sAttachmentMD5
     *
     * @return string
     */
    public function getSAttachmentMD5()
    {
	//return $this->container['sAttachmentMD5'];
        return is_null($this->container['sAttachmentMD5']) ? null : trim($this->container['sAttachmentMD5']);
    }

    /**
     * Sets sAttachmentMD5
     *
     * @param string $sAttachmentMD5 The md5 of the Attachment
     *
     * @return self
     */
    public function setSAttachmentMD5($sAttachmentMD5)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sAttachmentMD5)) {
            //throw new \InvalidArgumentException('non-nullable sAttachmentMD5 cannot be null');
        //}

	//if ((!preg_match("/^.{0,32}$/", ObjectSerializer::toString($sAttachmentMD5)))) {
        if (!is_null($sAttachmentMD5) && (!preg_match("/(*UTF8)^.{0,32}$/", ObjectSerializer::toString($sAttachmentMD5)))) {
	    //throw new \InvalidArgumentException("invalid value for \$sAttachmentMD5 when calling CustomAttachmentResponse., must conform to the pattern /^.{0,32}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($sAttachmentMD5)?'null':'"'.$sAttachmentMD5.'"')." for sAttachmentMD5 when calling CustomAttachmentResponse., must conform to the pattern /^.{0,32}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sAttachmentMD5'] = $sAttachmentMD5;
        $this->container['sAttachmentMD5'] = (is_null($sAttachmentMD5) ? null : trim((string) $sAttachmentMD5));

        return $this;
    }

    /**
     * Gets bAttachmentDeleted
     *
     * @return bool
     */
    public function getBAttachmentDeleted()
    {
	//return $this->container['bAttachmentDeleted'];
        return $this->container['bAttachmentDeleted'];
    }

    /**
     * Sets bAttachmentDeleted
     *
     * @param bool $bAttachmentDeleted Whether if it's deleted
     *
     * @return self
     */
    public function setBAttachmentDeleted($bAttachmentDeleted)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bAttachmentDeleted)) {
            //throw new \InvalidArgumentException('non-nullable bAttachmentDeleted cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bAttachmentDeleted'] = $bAttachmentDeleted;
        $this->container['bAttachmentDeleted'] = (is_null($bAttachmentDeleted) ? null : (bool) $bAttachmentDeleted);

        return $this;
    }

    /**
     * Gets bAttachmentValid
     *
     * @return bool
     */
    public function getBAttachmentValid()
    {
	//return $this->container['bAttachmentValid'];
        return $this->container['bAttachmentValid'];
    }

    /**
     * Sets bAttachmentValid
     *
     * @param bool $bAttachmentValid Whether if it's valid
     *
     * @return self
     */
    public function setBAttachmentValid($bAttachmentValid)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bAttachmentValid)) {
            //throw new \InvalidArgumentException('non-nullable bAttachmentValid cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bAttachmentValid'] = $bAttachmentValid;
        $this->container['bAttachmentValid'] = (is_null($bAttachmentValid) ? null : (bool) $bAttachmentValid);

        return $this;
    }

    /**
     * Gets eAttachmentVerified
     *
     * @return \eZmaxAPI\Model\FieldEAttachmentVerified
     */
    public function getEAttachmentVerified()
    {
	//return $this->container['eAttachmentVerified'];
        return $this->container['eAttachmentVerified'];
    }

    /**
     * Sets eAttachmentVerified
     *
     * @param \eZmaxAPI\Model\FieldEAttachmentVerified $eAttachmentVerified eAttachmentVerified
     *
     * @return self
     */
    public function setEAttachmentVerified($eAttachmentVerified)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eAttachmentVerified)) {
            //throw new \InvalidArgumentException('non-nullable eAttachmentVerified cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eAttachmentVerified'] = $eAttachmentVerified;
        $this->container['eAttachmentVerified'] = $eAttachmentVerified;

        return $this;
    }

    /**
     * Gets tAttachmentRejectioncomment
     *
     * @return string|null
     */
    public function getTAttachmentRejectioncomment()
    {
	//return $this->container['tAttachmentRejectioncomment'];
        return is_null($this->container['tAttachmentRejectioncomment']) ? null : trim($this->container['tAttachmentRejectioncomment']);
    }

    /**
     * Sets tAttachmentRejectioncomment
     *
     * @param string|null $tAttachmentRejectioncomment The rejectioncomment of the Attachment
     *
     * @return self
     */
    public function setTAttachmentRejectioncomment($tAttachmentRejectioncomment)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($tAttachmentRejectioncomment)) {
            //throw new \InvalidArgumentException('non-nullable tAttachmentRejectioncomment cannot be null');
        //}

	//if ((!preg_match("/^.{0,65535}$/", ObjectSerializer::toString($tAttachmentRejectioncomment)))) {
        if (!is_null($tAttachmentRejectioncomment) && (!preg_match("/(*UTF8)^.{0,65535}$/", ObjectSerializer::toString($tAttachmentRejectioncomment)))) {
	    //throw new \InvalidArgumentException("invalid value for \$tAttachmentRejectioncomment when calling CustomAttachmentResponse., must conform to the pattern /^.{0,65535}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($tAttachmentRejectioncomment)?'null':'"'.$tAttachmentRejectioncomment.'"')." for tAttachmentRejectioncomment when calling CustomAttachmentResponse., must conform to the pattern /^.{0,65535}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['tAttachmentRejectioncomment'] = $tAttachmentRejectioncomment;
        $this->container['tAttachmentRejectioncomment'] = (is_null($tAttachmentRejectioncomment) ? null : trim((string) $tAttachmentRejectioncomment));

        return $this;
    }

    /**
     * Gets fkiUserIDOwner
     *
     * @return int|null
     */
    public function getFkiUserIDOwner()
    {
	//return $this->container['fkiUserIDOwner'];
        return $this->container['fkiUserIDOwner'];
    }

    /**
     * Sets fkiUserIDOwner
     *
     * @param int|null $fkiUserIDOwner The unique ID of the User
     *
     * @return self
     */
    public function setFkiUserIDOwner($fkiUserIDOwner)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiUserIDOwner)) {
            //throw new \InvalidArgumentException('non-nullable fkiUserIDOwner cannot be null');
        //}

	//if (($fkiUserIDOwner < 0)) {
        if (!is_null($fkiUserIDOwner) && ($fkiUserIDOwner < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiUserIDOwner when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiUserIDOwner)?'null':'"'.$fkiUserIDOwner.'"').' for fkiUserIDOwner when calling CustomAttachmentResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiUserIDOwner'] = $fkiUserIDOwner;
        $this->container['fkiUserIDOwner'] = (is_null($fkiUserIDOwner) ? null : (int) $fkiUserIDOwner);

        return $this;
    }

    /**
     * Gets objAudit
     *
     * @return \eZmaxAPI\Model\CommonAudit|null
     */
    public function getObjAudit()
    {
	//return $this->container['objAudit'];
        return $this->container['objAudit'];
    }

    /**
     * Sets objAudit
     *
     * @param \eZmaxAPI\Model\CommonAudit|null $objAudit objAudit
     *
     * @return self
     */
    public function setObjAudit($objAudit)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($objAudit)) {
            //throw new \InvalidArgumentException('non-nullable objAudit cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['objAudit'] = $objAudit;
        $this->container['objAudit'] = $objAudit;

        return $this;
    }

    /**
     * Gets objAttachmentProof
     *
     * @return \eZmaxAPI\Model\AttachmentResponseCompound|null
     */
    public function getObjAttachmentProof()
    {
	//return $this->container['objAttachmentProof'];
        return $this->container['objAttachmentProof'];
    }

    /**
     * Sets objAttachmentProof
     *
     * @param \eZmaxAPI\Model\AttachmentResponseCompound|null $objAttachmentProof objAttachmentProof
     *
     * @return self
     */
    public function setObjAttachmentProof($objAttachmentProof)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($objAttachmentProof)) {
            //throw new \InvalidArgumentException('non-nullable objAttachmentProof cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['objAttachmentProof'] = $objAttachmentProof;
        $this->container['objAttachmentProof'] = $objAttachmentProof;

        return $this;
    }

    /**
     * Gets objAttachmentProofdocument
     *
     * @return \eZmaxAPI\Model\AttachmentResponseCompound|null
     */
    public function getObjAttachmentProofdocument()
    {
	//return $this->container['objAttachmentProofdocument'];
        return $this->container['objAttachmentProofdocument'];
    }

    /**
     * Sets objAttachmentProofdocument
     *
     * @param \eZmaxAPI\Model\AttachmentResponseCompound|null $objAttachmentProofdocument objAttachmentProofdocument
     *
     * @return self
     */
    public function setObjAttachmentProofdocument($objAttachmentProofdocument)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($objAttachmentProofdocument)) {
            //throw new \InvalidArgumentException('non-nullable objAttachmentProofdocument cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['objAttachmentProofdocument'] = $objAttachmentProofdocument;
        $this->container['objAttachmentProofdocument'] = $objAttachmentProofdocument;

        return $this;
    }

    /**
     * Gets aObjAttachmentAttachment
     *
     * @return \eZmaxAPI\Model\AttachmentResponseCompound[]|null
     */
    public function getAObjAttachmentAttachment()
    {
	//return $this->container['aObjAttachmentAttachment'];
        return $this->container['aObjAttachmentAttachment'];
    }

    /**
     * Sets aObjAttachmentAttachment
     *
     * @param \eZmaxAPI\Model\AttachmentResponseCompound[]|null $aObjAttachmentAttachment aObjAttachmentAttachment
     *
     * @return self
     */
    public function setAObjAttachmentAttachment($aObjAttachmentAttachment)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($aObjAttachmentAttachment)) {
            //throw new \InvalidArgumentException('non-nullable aObjAttachmentAttachment cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['aObjAttachmentAttachment'] = $aObjAttachmentAttachment;
        $this->container['aObjAttachmentAttachment'] = $aObjAttachmentAttachment;

        return $this;
    }

    /**
     * Gets aObjAttachmentVersion
     *
     * @return \eZmaxAPI\Model\AttachmentResponseCompound[]|null
     */
    public function getAObjAttachmentVersion()
    {
	//return $this->container['aObjAttachmentVersion'];
        return $this->container['aObjAttachmentVersion'];
    }

    /**
     * Sets aObjAttachmentVersion
     *
     * @param \eZmaxAPI\Model\AttachmentResponseCompound[]|null $aObjAttachmentVersion aObjAttachmentVersion
     *
     * @return self
     */
    public function setAObjAttachmentVersion($aObjAttachmentVersion)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($aObjAttachmentVersion)) {
            //throw new \InvalidArgumentException('non-nullable aObjAttachmentVersion cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['aObjAttachmentVersion'] = $aObjAttachmentVersion;
        $this->container['aObjAttachmentVersion'] = $aObjAttachmentVersion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


