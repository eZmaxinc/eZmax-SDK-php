<?php
/**
 * CommunicationrecipientRequestCompound
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * CommunicationrecipientRequestCompound Class Doc Comment
 *
 * @category Class
 * @description A Communicationrecipient Object and children
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CommunicationrecipientRequestCompound implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'communicationrecipient-RequestCompound';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pkiCommunicationrecipientID' => 'int',
        'fkiAgentID' => 'int',
        'fkiAgentincorporationID' => 'int',
        'fkiBrokerID' => 'int',
        'fkiCustomerID' => 'int',
        'fkiEmployeeID' => 'int',
        'fkiAssistantID' => 'int',
        'fkiExternalbrokerID' => 'int',
        'fkiEzsignsignerID' => 'int',
        'fkiNotaryID' => 'int',
        'fkiSupplierID' => 'int',
        'fkiUserID' => 'int',
        'eCommunicationrecipientType' => '\eZmaxAPI\Model\FieldECommunicationrecipientType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pkiCommunicationrecipientID' => null,
        'fkiAgentID' => null,
        'fkiAgentincorporationID' => null,
        'fkiBrokerID' => null,
        'fkiCustomerID' => null,
        'fkiEmployeeID' => null,
        'fkiAssistantID' => null,
        'fkiExternalbrokerID' => null,
        'fkiEzsignsignerID' => null,
        'fkiNotaryID' => null,
        'fkiSupplierID' => null,
        'fkiUserID' => null,
        'eCommunicationrecipientType' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pkiCommunicationrecipientID' => false,
		'fkiAgentID' => false,
		'fkiAgentincorporationID' => false,
		'fkiBrokerID' => false,
		'fkiCustomerID' => false,
		'fkiEmployeeID' => false,
		'fkiAssistantID' => false,
		'fkiExternalbrokerID' => false,
		'fkiEzsignsignerID' => false,
		'fkiNotaryID' => false,
		'fkiSupplierID' => false,
		'fkiUserID' => false,
		'eCommunicationrecipientType' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pkiCommunicationrecipientID' => 'pkiCommunicationrecipientID',
        'fkiAgentID' => 'fkiAgentID',
        'fkiAgentincorporationID' => 'fkiAgentincorporationID',
        'fkiBrokerID' => 'fkiBrokerID',
        'fkiCustomerID' => 'fkiCustomerID',
        'fkiEmployeeID' => 'fkiEmployeeID',
        'fkiAssistantID' => 'fkiAssistantID',
        'fkiExternalbrokerID' => 'fkiExternalbrokerID',
        'fkiEzsignsignerID' => 'fkiEzsignsignerID',
        'fkiNotaryID' => 'fkiNotaryID',
        'fkiSupplierID' => 'fkiSupplierID',
        'fkiUserID' => 'fkiUserID',
        'eCommunicationrecipientType' => 'eCommunicationrecipientType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pkiCommunicationrecipientID' => 'setPkiCommunicationrecipientID',
        'fkiAgentID' => 'setFkiAgentID',
        'fkiAgentincorporationID' => 'setFkiAgentincorporationID',
        'fkiBrokerID' => 'setFkiBrokerID',
        'fkiCustomerID' => 'setFkiCustomerID',
        'fkiEmployeeID' => 'setFkiEmployeeID',
        'fkiAssistantID' => 'setFkiAssistantID',
        'fkiExternalbrokerID' => 'setFkiExternalbrokerID',
        'fkiEzsignsignerID' => 'setFkiEzsignsignerID',
        'fkiNotaryID' => 'setFkiNotaryID',
        'fkiSupplierID' => 'setFkiSupplierID',
        'fkiUserID' => 'setFkiUserID',
        'eCommunicationrecipientType' => 'setECommunicationrecipientType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pkiCommunicationrecipientID' => 'getPkiCommunicationrecipientID',
        'fkiAgentID' => 'getFkiAgentID',
        'fkiAgentincorporationID' => 'getFkiAgentincorporationID',
        'fkiBrokerID' => 'getFkiBrokerID',
        'fkiCustomerID' => 'getFkiCustomerID',
        'fkiEmployeeID' => 'getFkiEmployeeID',
        'fkiAssistantID' => 'getFkiAssistantID',
        'fkiExternalbrokerID' => 'getFkiExternalbrokerID',
        'fkiEzsignsignerID' => 'getFkiEzsignsignerID',
        'fkiNotaryID' => 'getFkiNotaryID',
        'fkiSupplierID' => 'getFkiSupplierID',
        'fkiUserID' => 'getFkiUserID',
        'eCommunicationrecipientType' => 'getECommunicationrecipientType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pkiCommunicationrecipientID', $data ?? [], null);
        $this->setIfExists('fkiAgentID', $data ?? [], null);
        $this->setIfExists('fkiAgentincorporationID', $data ?? [], null);
        $this->setIfExists('fkiBrokerID', $data ?? [], null);
        $this->setIfExists('fkiCustomerID', $data ?? [], null);
        $this->setIfExists('fkiEmployeeID', $data ?? [], null);
        $this->setIfExists('fkiAssistantID', $data ?? [], null);
        $this->setIfExists('fkiExternalbrokerID', $data ?? [], null);
        $this->setIfExists('fkiEzsignsignerID', $data ?? [], null);
        $this->setIfExists('fkiNotaryID', $data ?? [], null);
        $this->setIfExists('fkiSupplierID', $data ?? [], null);
        $this->setIfExists('fkiUserID', $data ?? [], null);
        $this->setIfExists('eCommunicationrecipientType', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['pkiCommunicationrecipientID']) && ($this->container['pkiCommunicationrecipientID'] < 0)) {
            $invalidProperties[] = "invalid value for 'pkiCommunicationrecipientID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiAgentID']) && ($this->container['fkiAgentID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiAgentID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiAgentincorporationID']) && ($this->container['fkiAgentincorporationID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiAgentincorporationID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiBrokerID']) && ($this->container['fkiBrokerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiBrokerID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiCustomerID']) && ($this->container['fkiCustomerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiCustomerID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEmployeeID']) && ($this->container['fkiEmployeeID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEmployeeID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiAssistantID']) && ($this->container['fkiAssistantID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiAssistantID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiExternalbrokerID']) && ($this->container['fkiExternalbrokerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiExternalbrokerID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzsignsignerID']) && ($this->container['fkiEzsignsignerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzsignsignerID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiNotaryID']) && ($this->container['fkiNotaryID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiNotaryID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiSupplierID']) && ($this->container['fkiSupplierID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiSupplierID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiUserID']) && ($this->container['fkiUserID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiUserID', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pkiCommunicationrecipientID
     *
     * @return int|null
     */
    public function getPkiCommunicationrecipientID()
    {
        return $this->container['pkiCommunicationrecipientID'];
    }

    /**
     * Sets pkiCommunicationrecipientID
     *
     * @param int|null $pkiCommunicationrecipientID The unique ID of the Communicationrecipient.
     *
     * @return self
     */
    public function setPkiCommunicationrecipientID($pkiCommunicationrecipientID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($pkiCommunicationrecipientID)) {
            //throw new \InvalidArgumentException('non-nullable pkiCommunicationrecipientID cannot be null');
        //}

//        if (($pkiCommunicationrecipientID < 0)) {
        if (!is_null($pkiCommunicationrecipientID) && ($pkiCommunicationrecipientID < 0)) {
            throw new \InvalidArgumentException('invalid value for $pkiCommunicationrecipientID when calling CommunicationrecipientRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['pkiCommunicationrecipientID'] = $pkiCommunicationrecipientID;
        $this->container['pkiCommunicationrecipientID'] = (is_null($pkiCommunicationrecipientID) ? null : (int) $pkiCommunicationrecipientID);

        return $this;
    }

    /**
     * Gets fkiAgentID
     *
     * @return int|null
     */
    public function getFkiAgentID()
    {
        return $this->container['fkiAgentID'];
    }

    /**
     * Sets fkiAgentID
     *
     * @param int|null $fkiAgentID The unique ID of the Agent.
     *
     * @return self
     */
    public function setFkiAgentID($fkiAgentID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiAgentID)) {
            //throw new \InvalidArgumentException('non-nullable fkiAgentID cannot be null');
        //}

//        if (($fkiAgentID < 0)) {
        if (!is_null($fkiAgentID) && ($fkiAgentID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiAgentID when calling CommunicationrecipientRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiAgentID'] = $fkiAgentID;
        $this->container['fkiAgentID'] = (is_null($fkiAgentID) ? null : (int) $fkiAgentID);

        return $this;
    }

    /**
     * Gets fkiAgentincorporationID
     *
     * @return int|null
     */
    public function getFkiAgentincorporationID()
    {
        return $this->container['fkiAgentincorporationID'];
    }

    /**
     * Sets fkiAgentincorporationID
     *
     * @param int|null $fkiAgentincorporationID The unique ID of the Agentincorporation.
     *
     * @return self
     */
    public function setFkiAgentincorporationID($fkiAgentincorporationID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiAgentincorporationID)) {
            //throw new \InvalidArgumentException('non-nullable fkiAgentincorporationID cannot be null');
        //}

//        if (($fkiAgentincorporationID < 0)) {
        if (!is_null($fkiAgentincorporationID) && ($fkiAgentincorporationID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiAgentincorporationID when calling CommunicationrecipientRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiAgentincorporationID'] = $fkiAgentincorporationID;
        $this->container['fkiAgentincorporationID'] = (is_null($fkiAgentincorporationID) ? null : (int) $fkiAgentincorporationID);

        return $this;
    }

    /**
     * Gets fkiBrokerID
     *
     * @return int|null
     */
    public function getFkiBrokerID()
    {
        return $this->container['fkiBrokerID'];
    }

    /**
     * Sets fkiBrokerID
     *
     * @param int|null $fkiBrokerID The unique ID of the Broker.
     *
     * @return self
     */
    public function setFkiBrokerID($fkiBrokerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiBrokerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiBrokerID cannot be null');
        //}

//        if (($fkiBrokerID < 0)) {
        if (!is_null($fkiBrokerID) && ($fkiBrokerID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiBrokerID when calling CommunicationrecipientRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiBrokerID'] = $fkiBrokerID;
        $this->container['fkiBrokerID'] = (is_null($fkiBrokerID) ? null : (int) $fkiBrokerID);

        return $this;
    }

    /**
     * Gets fkiCustomerID
     *
     * @return int|null
     */
    public function getFkiCustomerID()
    {
        return $this->container['fkiCustomerID'];
    }

    /**
     * Sets fkiCustomerID
     *
     * @param int|null $fkiCustomerID The unique ID of the Customer.
     *
     * @return self
     */
    public function setFkiCustomerID($fkiCustomerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiCustomerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiCustomerID cannot be null');
        //}

//        if (($fkiCustomerID < 0)) {
        if (!is_null($fkiCustomerID) && ($fkiCustomerID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiCustomerID when calling CommunicationrecipientRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiCustomerID'] = $fkiCustomerID;
        $this->container['fkiCustomerID'] = (is_null($fkiCustomerID) ? null : (int) $fkiCustomerID);

        return $this;
    }

    /**
     * Gets fkiEmployeeID
     *
     * @return int|null
     */
    public function getFkiEmployeeID()
    {
        return $this->container['fkiEmployeeID'];
    }

    /**
     * Sets fkiEmployeeID
     *
     * @param int|null $fkiEmployeeID The unique ID of the Employee.
     *
     * @return self
     */
    public function setFkiEmployeeID($fkiEmployeeID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEmployeeID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEmployeeID cannot be null');
        //}

//        if (($fkiEmployeeID < 0)) {
        if (!is_null($fkiEmployeeID) && ($fkiEmployeeID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiEmployeeID when calling CommunicationrecipientRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEmployeeID'] = $fkiEmployeeID;
        $this->container['fkiEmployeeID'] = (is_null($fkiEmployeeID) ? null : (int) $fkiEmployeeID);

        return $this;
    }

    /**
     * Gets fkiAssistantID
     *
     * @return int|null
     */
    public function getFkiAssistantID()
    {
        return $this->container['fkiAssistantID'];
    }

    /**
     * Sets fkiAssistantID
     *
     * @param int|null $fkiAssistantID The unique ID of the Assistant.
     *
     * @return self
     */
    public function setFkiAssistantID($fkiAssistantID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiAssistantID)) {
            //throw new \InvalidArgumentException('non-nullable fkiAssistantID cannot be null');
        //}

//        if (($fkiAssistantID < 0)) {
        if (!is_null($fkiAssistantID) && ($fkiAssistantID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiAssistantID when calling CommunicationrecipientRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiAssistantID'] = $fkiAssistantID;
        $this->container['fkiAssistantID'] = (is_null($fkiAssistantID) ? null : (int) $fkiAssistantID);

        return $this;
    }

    /**
     * Gets fkiExternalbrokerID
     *
     * @return int|null
     */
    public function getFkiExternalbrokerID()
    {
        return $this->container['fkiExternalbrokerID'];
    }

    /**
     * Sets fkiExternalbrokerID
     *
     * @param int|null $fkiExternalbrokerID The unique ID of the Externalbroker.
     *
     * @return self
     */
    public function setFkiExternalbrokerID($fkiExternalbrokerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiExternalbrokerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiExternalbrokerID cannot be null');
        //}

//        if (($fkiExternalbrokerID < 0)) {
        if (!is_null($fkiExternalbrokerID) && ($fkiExternalbrokerID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiExternalbrokerID when calling CommunicationrecipientRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiExternalbrokerID'] = $fkiExternalbrokerID;
        $this->container['fkiExternalbrokerID'] = (is_null($fkiExternalbrokerID) ? null : (int) $fkiExternalbrokerID);

        return $this;
    }

    /**
     * Gets fkiEzsignsignerID
     *
     * @return int|null
     */
    public function getFkiEzsignsignerID()
    {
        return $this->container['fkiEzsignsignerID'];
    }

    /**
     * Sets fkiEzsignsignerID
     *
     * @param int|null $fkiEzsignsignerID The unique ID of the Ezsignsigner
     *
     * @return self
     */
    public function setFkiEzsignsignerID($fkiEzsignsignerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzsignsignerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzsignsignerID cannot be null');
        //}

//        if (($fkiEzsignsignerID < 0)) {
        if (!is_null($fkiEzsignsignerID) && ($fkiEzsignsignerID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiEzsignsignerID when calling CommunicationrecipientRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzsignsignerID'] = $fkiEzsignsignerID;
        $this->container['fkiEzsignsignerID'] = (is_null($fkiEzsignsignerID) ? null : (int) $fkiEzsignsignerID);

        return $this;
    }

    /**
     * Gets fkiNotaryID
     *
     * @return int|null
     */
    public function getFkiNotaryID()
    {
        return $this->container['fkiNotaryID'];
    }

    /**
     * Sets fkiNotaryID
     *
     * @param int|null $fkiNotaryID The unique ID of the Notary.
     *
     * @return self
     */
    public function setFkiNotaryID($fkiNotaryID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiNotaryID)) {
            //throw new \InvalidArgumentException('non-nullable fkiNotaryID cannot be null');
        //}

//        if (($fkiNotaryID < 0)) {
        if (!is_null($fkiNotaryID) && ($fkiNotaryID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiNotaryID when calling CommunicationrecipientRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiNotaryID'] = $fkiNotaryID;
        $this->container['fkiNotaryID'] = (is_null($fkiNotaryID) ? null : (int) $fkiNotaryID);

        return $this;
    }

    /**
     * Gets fkiSupplierID
     *
     * @return int|null
     */
    public function getFkiSupplierID()
    {
        return $this->container['fkiSupplierID'];
    }

    /**
     * Sets fkiSupplierID
     *
     * @param int|null $fkiSupplierID The unique ID of the Supplier.
     *
     * @return self
     */
    public function setFkiSupplierID($fkiSupplierID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiSupplierID)) {
            //throw new \InvalidArgumentException('non-nullable fkiSupplierID cannot be null');
        //}

//        if (($fkiSupplierID < 0)) {
        if (!is_null($fkiSupplierID) && ($fkiSupplierID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiSupplierID when calling CommunicationrecipientRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiSupplierID'] = $fkiSupplierID;
        $this->container['fkiSupplierID'] = (is_null($fkiSupplierID) ? null : (int) $fkiSupplierID);

        return $this;
    }

    /**
     * Gets fkiUserID
     *
     * @return int|null
     */
    public function getFkiUserID()
    {
        return $this->container['fkiUserID'];
    }

    /**
     * Sets fkiUserID
     *
     * @param int|null $fkiUserID The unique ID of the User
     *
     * @return self
     */
    public function setFkiUserID($fkiUserID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiUserID)) {
            //throw new \InvalidArgumentException('non-nullable fkiUserID cannot be null');
        //}

//        if (($fkiUserID < 0)) {
        if (!is_null($fkiUserID) && ($fkiUserID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiUserID when calling CommunicationrecipientRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiUserID'] = $fkiUserID;
        $this->container['fkiUserID'] = (is_null($fkiUserID) ? null : (int) $fkiUserID);

        return $this;
    }

    /**
     * Gets eCommunicationrecipientType
     *
     * @return \eZmaxAPI\Model\FieldECommunicationrecipientType|null
     */
    public function getECommunicationrecipientType()
    {
        return $this->container['eCommunicationrecipientType'];
    }

    /**
     * Sets eCommunicationrecipientType
     *
     * @param \eZmaxAPI\Model\FieldECommunicationrecipientType|null $eCommunicationrecipientType eCommunicationrecipientType
     *
     * @return self
     */
    public function setECommunicationrecipientType($eCommunicationrecipientType)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eCommunicationrecipientType)) {
            //throw new \InvalidArgumentException('non-nullable eCommunicationrecipientType cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eCommunicationrecipientType'] = $eCommunicationrecipientType;
        $this->container['eCommunicationrecipientType'] = $eCommunicationrecipientType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


