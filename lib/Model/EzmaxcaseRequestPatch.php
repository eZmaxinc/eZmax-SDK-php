<?php
/**
 * EzmaxcaseRequestPatch
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * EzmaxcaseRequestPatch Class Doc Comment
 *
 * @category Class
 * @description An Ezmaxcase Object
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EzmaxcaseRequestPatch implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ezmaxcase-RequestPatch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fkiEzmaxcasequeueID' => 'int',
        'fkiEzmaxcasepriorityID' => 'int',
        'fkiEzmaxcasestateID' => 'int',
        'fkiEzmaxfeaturerequestID' => 'int',
        'fkiEzmaxknownissueID' => 'int',
        'fkiUserIDOwner' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fkiEzmaxcasequeueID' => null,
        'fkiEzmaxcasepriorityID' => null,
        'fkiEzmaxcasestateID' => null,
        'fkiEzmaxfeaturerequestID' => null,
        'fkiEzmaxknownissueID' => null,
        'fkiUserIDOwner' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fkiEzmaxcasequeueID' => false,
		'fkiEzmaxcasepriorityID' => false,
		'fkiEzmaxcasestateID' => false,
		'fkiEzmaxfeaturerequestID' => false,
		'fkiEzmaxknownissueID' => false,
		'fkiUserIDOwner' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fkiEzmaxcasequeueID' => 'fkiEzmaxcasequeueID',
        'fkiEzmaxcasepriorityID' => 'fkiEzmaxcasepriorityID',
        'fkiEzmaxcasestateID' => 'fkiEzmaxcasestateID',
        'fkiEzmaxfeaturerequestID' => 'fkiEzmaxfeaturerequestID',
        'fkiEzmaxknownissueID' => 'fkiEzmaxknownissueID',
        'fkiUserIDOwner' => 'fkiUserIDOwner'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fkiEzmaxcasequeueID' => 'setFkiEzmaxcasequeueID',
        'fkiEzmaxcasepriorityID' => 'setFkiEzmaxcasepriorityID',
        'fkiEzmaxcasestateID' => 'setFkiEzmaxcasestateID',
        'fkiEzmaxfeaturerequestID' => 'setFkiEzmaxfeaturerequestID',
        'fkiEzmaxknownissueID' => 'setFkiEzmaxknownissueID',
        'fkiUserIDOwner' => 'setFkiUserIDOwner'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fkiEzmaxcasequeueID' => 'getFkiEzmaxcasequeueID',
        'fkiEzmaxcasepriorityID' => 'getFkiEzmaxcasepriorityID',
        'fkiEzmaxcasestateID' => 'getFkiEzmaxcasestateID',
        'fkiEzmaxfeaturerequestID' => 'getFkiEzmaxfeaturerequestID',
        'fkiEzmaxknownissueID' => 'getFkiEzmaxknownissueID',
        'fkiUserIDOwner' => 'getFkiUserIDOwner'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('fkiEzmaxcasequeueID', $data ?? [], null);
        $this->setIfExists('fkiEzmaxcasepriorityID', $data ?? [], null);
        $this->setIfExists('fkiEzmaxcasestateID', $data ?? [], null);
        $this->setIfExists('fkiEzmaxfeaturerequestID', $data ?? [], null);
        $this->setIfExists('fkiEzmaxknownissueID', $data ?? [], null);
        $this->setIfExists('fkiUserIDOwner', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['fkiEzmaxcasequeueID']) && ($this->container['fkiEzmaxcasequeueID'] > 255)) {
            $invalidProperties[] = "invalid value for 'fkiEzmaxcasequeueID', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['fkiEzmaxcasequeueID']) && ($this->container['fkiEzmaxcasequeueID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzmaxcasequeueID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzmaxcasepriorityID']) && ($this->container['fkiEzmaxcasepriorityID'] > 255)) {
            $invalidProperties[] = "invalid value for 'fkiEzmaxcasepriorityID', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['fkiEzmaxcasepriorityID']) && ($this->container['fkiEzmaxcasepriorityID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzmaxcasepriorityID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzmaxcasestateID']) && ($this->container['fkiEzmaxcasestateID'] > 255)) {
            $invalidProperties[] = "invalid value for 'fkiEzmaxcasestateID', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['fkiEzmaxcasestateID']) && ($this->container['fkiEzmaxcasestateID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzmaxcasestateID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzmaxfeaturerequestID']) && ($this->container['fkiEzmaxfeaturerequestID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiEzmaxfeaturerequestID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiEzmaxfeaturerequestID']) && ($this->container['fkiEzmaxfeaturerequestID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzmaxfeaturerequestID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzmaxknownissueID']) && ($this->container['fkiEzmaxknownissueID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiEzmaxknownissueID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiEzmaxknownissueID']) && ($this->container['fkiEzmaxknownissueID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzmaxknownissueID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiUserIDOwner']) && ($this->container['fkiUserIDOwner'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiUserIDOwner', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fkiEzmaxcasequeueID
     *
     * @return int|null
     */
    public function getFkiEzmaxcasequeueID()
    {
	//return $this->container['fkiEzmaxcasequeueID'];
        return $this->container['fkiEzmaxcasequeueID'];
    }

    /**
     * Sets fkiEzmaxcasequeueID
     *
     * @param int|null $fkiEzmaxcasequeueID The unique ID of the Ezmaxcasequeue
     *
     * @return self
     */
    public function setFkiEzmaxcasequeueID($fkiEzmaxcasequeueID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzmaxcasequeueID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzmaxcasequeueID cannot be null');
        //}

	//if (($fkiEzmaxcasequeueID > 255)) {
        if (!is_null($fkiEzmaxcasequeueID) && ($fkiEzmaxcasequeueID > 255)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzmaxcasequeueID when calling EzmaxcaseRequestPatch., must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzmaxcasequeueID)?'null':'"'.$fkiEzmaxcasequeueID.'"').' for fkiEzmaxcasequeueID when calling EzmaxcaseRequestPatch., must be smaller than or equal to 255.');
        }
	//if (($fkiEzmaxcasequeueID < 0)) {
        if (!is_null($fkiEzmaxcasequeueID) && ($fkiEzmaxcasequeueID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzmaxcasequeueID when calling EzmaxcaseRequestPatch., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzmaxcasequeueID)?'null':'"'.$fkiEzmaxcasequeueID.'"').' for fkiEzmaxcasequeueID when calling EzmaxcaseRequestPatch., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzmaxcasequeueID'] = $fkiEzmaxcasequeueID;
        $this->container['fkiEzmaxcasequeueID'] = (is_null($fkiEzmaxcasequeueID) ? null : (int) $fkiEzmaxcasequeueID);

        return $this;
    }

    /**
     * Gets fkiEzmaxcasepriorityID
     *
     * @return int|null
     */
    public function getFkiEzmaxcasepriorityID()
    {
	//return $this->container['fkiEzmaxcasepriorityID'];
        return $this->container['fkiEzmaxcasepriorityID'];
    }

    /**
     * Sets fkiEzmaxcasepriorityID
     *
     * @param int|null $fkiEzmaxcasepriorityID The unique ID of the Ezmaxcasepriority
     *
     * @return self
     */
    public function setFkiEzmaxcasepriorityID($fkiEzmaxcasepriorityID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzmaxcasepriorityID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzmaxcasepriorityID cannot be null');
        //}

	//if (($fkiEzmaxcasepriorityID > 255)) {
        if (!is_null($fkiEzmaxcasepriorityID) && ($fkiEzmaxcasepriorityID > 255)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzmaxcasepriorityID when calling EzmaxcaseRequestPatch., must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzmaxcasepriorityID)?'null':'"'.$fkiEzmaxcasepriorityID.'"').' for fkiEzmaxcasepriorityID when calling EzmaxcaseRequestPatch., must be smaller than or equal to 255.');
        }
	//if (($fkiEzmaxcasepriorityID < 0)) {
        if (!is_null($fkiEzmaxcasepriorityID) && ($fkiEzmaxcasepriorityID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzmaxcasepriorityID when calling EzmaxcaseRequestPatch., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzmaxcasepriorityID)?'null':'"'.$fkiEzmaxcasepriorityID.'"').' for fkiEzmaxcasepriorityID when calling EzmaxcaseRequestPatch., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzmaxcasepriorityID'] = $fkiEzmaxcasepriorityID;
        $this->container['fkiEzmaxcasepriorityID'] = (is_null($fkiEzmaxcasepriorityID) ? null : (int) $fkiEzmaxcasepriorityID);

        return $this;
    }

    /**
     * Gets fkiEzmaxcasestateID
     *
     * @return int|null
     */
    public function getFkiEzmaxcasestateID()
    {
	//return $this->container['fkiEzmaxcasestateID'];
        return $this->container['fkiEzmaxcasestateID'];
    }

    /**
     * Sets fkiEzmaxcasestateID
     *
     * @param int|null $fkiEzmaxcasestateID The unique ID of the Ezmaxcasestate
     *
     * @return self
     */
    public function setFkiEzmaxcasestateID($fkiEzmaxcasestateID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzmaxcasestateID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzmaxcasestateID cannot be null');
        //}

	//if (($fkiEzmaxcasestateID > 255)) {
        if (!is_null($fkiEzmaxcasestateID) && ($fkiEzmaxcasestateID > 255)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzmaxcasestateID when calling EzmaxcaseRequestPatch., must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzmaxcasestateID)?'null':'"'.$fkiEzmaxcasestateID.'"').' for fkiEzmaxcasestateID when calling EzmaxcaseRequestPatch., must be smaller than or equal to 255.');
        }
	//if (($fkiEzmaxcasestateID < 0)) {
        if (!is_null($fkiEzmaxcasestateID) && ($fkiEzmaxcasestateID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzmaxcasestateID when calling EzmaxcaseRequestPatch., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzmaxcasestateID)?'null':'"'.$fkiEzmaxcasestateID.'"').' for fkiEzmaxcasestateID when calling EzmaxcaseRequestPatch., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzmaxcasestateID'] = $fkiEzmaxcasestateID;
        $this->container['fkiEzmaxcasestateID'] = (is_null($fkiEzmaxcasestateID) ? null : (int) $fkiEzmaxcasestateID);

        return $this;
    }

    /**
     * Gets fkiEzmaxfeaturerequestID
     *
     * @return int|null
     */
    public function getFkiEzmaxfeaturerequestID()
    {
	//return $this->container['fkiEzmaxfeaturerequestID'];
        return $this->container['fkiEzmaxfeaturerequestID'];
    }

    /**
     * Sets fkiEzmaxfeaturerequestID
     *
     * @param int|null $fkiEzmaxfeaturerequestID The unique ID of the Ezmaxfeaturerequest
     *
     * @return self
     */
    public function setFkiEzmaxfeaturerequestID($fkiEzmaxfeaturerequestID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzmaxfeaturerequestID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzmaxfeaturerequestID cannot be null');
        //}

	//if (($fkiEzmaxfeaturerequestID > 65535)) {
        if (!is_null($fkiEzmaxfeaturerequestID) && ($fkiEzmaxfeaturerequestID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzmaxfeaturerequestID when calling EzmaxcaseRequestPatch., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzmaxfeaturerequestID)?'null':'"'.$fkiEzmaxfeaturerequestID.'"').' for fkiEzmaxfeaturerequestID when calling EzmaxcaseRequestPatch., must be smaller than or equal to 65535.');
        }
	//if (($fkiEzmaxfeaturerequestID < 0)) {
        if (!is_null($fkiEzmaxfeaturerequestID) && ($fkiEzmaxfeaturerequestID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzmaxfeaturerequestID when calling EzmaxcaseRequestPatch., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzmaxfeaturerequestID)?'null':'"'.$fkiEzmaxfeaturerequestID.'"').' for fkiEzmaxfeaturerequestID when calling EzmaxcaseRequestPatch., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzmaxfeaturerequestID'] = $fkiEzmaxfeaturerequestID;
        $this->container['fkiEzmaxfeaturerequestID'] = (is_null($fkiEzmaxfeaturerequestID) ? null : (int) $fkiEzmaxfeaturerequestID);

        return $this;
    }

    /**
     * Gets fkiEzmaxknownissueID
     *
     * @return int|null
     */
    public function getFkiEzmaxknownissueID()
    {
	//return $this->container['fkiEzmaxknownissueID'];
        return $this->container['fkiEzmaxknownissueID'];
    }

    /**
     * Sets fkiEzmaxknownissueID
     *
     * @param int|null $fkiEzmaxknownissueID The unique ID of the Ezmaxknownissue
     *
     * @return self
     */
    public function setFkiEzmaxknownissueID($fkiEzmaxknownissueID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzmaxknownissueID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzmaxknownissueID cannot be null');
        //}

	//if (($fkiEzmaxknownissueID > 65535)) {
        if (!is_null($fkiEzmaxknownissueID) && ($fkiEzmaxknownissueID > 65535)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzmaxknownissueID when calling EzmaxcaseRequestPatch., must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzmaxknownissueID)?'null':'"'.$fkiEzmaxknownissueID.'"').' for fkiEzmaxknownissueID when calling EzmaxcaseRequestPatch., must be smaller than or equal to 65535.');
        }
	//if (($fkiEzmaxknownissueID < 0)) {
        if (!is_null($fkiEzmaxknownissueID) && ($fkiEzmaxknownissueID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzmaxknownissueID when calling EzmaxcaseRequestPatch., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzmaxknownissueID)?'null':'"'.$fkiEzmaxknownissueID.'"').' for fkiEzmaxknownissueID when calling EzmaxcaseRequestPatch., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzmaxknownissueID'] = $fkiEzmaxknownissueID;
        $this->container['fkiEzmaxknownissueID'] = (is_null($fkiEzmaxknownissueID) ? null : (int) $fkiEzmaxknownissueID);

        return $this;
    }

    /**
     * Gets fkiUserIDOwner
     *
     * @return int|null
     */
    public function getFkiUserIDOwner()
    {
	//return $this->container['fkiUserIDOwner'];
        return $this->container['fkiUserIDOwner'];
    }

    /**
     * Sets fkiUserIDOwner
     *
     * @param int|null $fkiUserIDOwner The unique ID of the User
     *
     * @return self
     */
    public function setFkiUserIDOwner($fkiUserIDOwner)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiUserIDOwner)) {
            //throw new \InvalidArgumentException('non-nullable fkiUserIDOwner cannot be null');
        //}

	//if (($fkiUserIDOwner < 0)) {
        if (!is_null($fkiUserIDOwner) && ($fkiUserIDOwner < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiUserIDOwner when calling EzmaxcaseRequestPatch., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiUserIDOwner)?'null':'"'.$fkiUserIDOwner.'"').' for fkiUserIDOwner when calling EzmaxcaseRequestPatch., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiUserIDOwner'] = $fkiUserIDOwner;
        $this->container['fkiUserIDOwner'] = (is_null($fkiUserIDOwner) ? null : (int) $fkiUserIDOwner);

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


