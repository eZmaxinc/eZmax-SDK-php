<?php
/**
 * EzsignsignerRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign application.  We provide SDKs for customers. They are generated using OpenAPI codegen, we encourage customers to use them as we also provide samples for them.  You can choose to build your own implementation manually or can use any compatible OpenAPI 3.0 generator like Swagger Codegen, OpenAPI codegen or any commercial generators.  If you need helping understanding how to use this API, don't waste too much time looging for it. Contact support-api@ezmax.ca, we're here to help. We are developpers so we know programmers don't like bad documentation. If you don't find what you need in the documentation, let us know, we'll improve it and put you rapidly up on track.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * EzsignsignerRequest Class Doc Comment
 *
 * @category Class
 * @description An Ezsignsigner Object
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EzsignsignerRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ezsignsigner-Request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fkiTaxassignmentID' => 'int',
        'eEzsignsignerLogintype' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'fkiTaxassignmentID' => null,
        'eEzsignsignerLogintype' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fkiTaxassignmentID' => 'fkiTaxassignmentID',
        'eEzsignsignerLogintype' => 'eEzsignsignerLogintype'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fkiTaxassignmentID' => 'setFkiTaxassignmentID',
        'eEzsignsignerLogintype' => 'setEEzsignsignerLogintype'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fkiTaxassignmentID' => 'getFkiTaxassignmentID',
        'eEzsignsignerLogintype' => 'getEEzsignsignerLogintype'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const E_EZSIGNSIGNER_LOGINTYPE_PASSWORD = 'Password';
    const E_EZSIGNSIGNER_LOGINTYPE_PASSWORD_PHONE = 'PasswordPhone';
    const E_EZSIGNSIGNER_LOGINTYPE_PASSWORD_QUESTION = 'PasswordQuestion';
    const E_EZSIGNSIGNER_LOGINTYPE_PHONE = 'Phone';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEEzsignsignerLogintypeAllowableValues()
    {
        return [
            self::E_EZSIGNSIGNER_LOGINTYPE_PASSWORD,
            self::E_EZSIGNSIGNER_LOGINTYPE_PASSWORD_PHONE,
            self::E_EZSIGNSIGNER_LOGINTYPE_PASSWORD_QUESTION,
            self::E_EZSIGNSIGNER_LOGINTYPE_PHONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fkiTaxassignmentID'] = isset($data['fkiTaxassignmentID']) ? $data['fkiTaxassignmentID'] : null;
        $this->container['eEzsignsignerLogintype'] = isset($data['eEzsignsignerLogintype']) ? $data['eEzsignsignerLogintype'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['fkiTaxassignmentID'] === null) {
            $invalidProperties[] = "'fkiTaxassignmentID' can't be null";
        }
        if (($this->container['fkiTaxassignmentID'] > 15)) {
            $invalidProperties[] = "invalid value for 'fkiTaxassignmentID', must be smaller than or equal to 15.";
        }

        if (($this->container['fkiTaxassignmentID'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiTaxassignmentID', must be bigger than or equal to 1.";
        }

        if ($this->container['eEzsignsignerLogintype'] === null) {
            $invalidProperties[] = "'eEzsignsignerLogintype' can't be null";
        }
        $allowedValues = $this->getEEzsignsignerLogintypeAllowableValues();
        if (!is_null($this->container['eEzsignsignerLogintype']) && !in_array($this->container['eEzsignsignerLogintype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'eEzsignsignerLogintype', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fkiTaxassignmentID
     *
     * @return int
     */
    public function getFkiTaxassignmentID()
    {
        return $this->container['fkiTaxassignmentID'];
    }

    /**
     * Sets fkiTaxassignmentID
     *
     * @param int $fkiTaxassignmentID The ID of the tax assignment, Valid values are: 1. No tax 2. GST 3. HST (ON) 4. HST (NB) 5. HST (NS) 6. HST (NL) 7. HST (PE) 8. GST + QST (QC) 9. GST + QST (QC) Non-Recoverable 10. GST + PST (BC) 11. GST + PST (SK) 12. GST + RST (MB) 13. GST + PST (BC) Non-Recoverable 14. GST + PST (SK) Non-Recoverable 15. GST + RST (MB) Non-Recoverable
     *
     * @return $this
     */
    public function setFkiTaxassignmentID($fkiTaxassignmentID)
    {

        if (($fkiTaxassignmentID > 15)) {
            throw new \InvalidArgumentException('invalid value for $fkiTaxassignmentID when calling EzsignsignerRequest., must be smaller than or equal to 15.');
        }
        if (($fkiTaxassignmentID < 1)) {
            throw new \InvalidArgumentException('invalid value for $fkiTaxassignmentID when calling EzsignsignerRequest., must be bigger than or equal to 1.');
        }

        $this->container['fkiTaxassignmentID'] = $fkiTaxassignmentID;

        return $this;
    }

    /**
     * Gets eEzsignsignerLogintype
     *
     * @return string
     */
    public function getEEzsignsignerLogintype()
    {
        return $this->container['eEzsignsignerLogintype'];
    }

    /**
     * Sets eEzsignsignerLogintype
     *
     * @param string $eEzsignsignerLogintype The method the Ezsignsigner will authenticate to the signing platform.  1. **Password** means the Ezsignsigner will receive a secure link by email. 2. **PasswordPhone** means the Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. 3. **PasswordQuestion** means the Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer. 4. **Phone** means the Ezsignsigner will only be able to sign \"In-Person\" and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign.
     *
     * @return $this
     */
    public function setEEzsignsignerLogintype($eEzsignsignerLogintype)
    {
        $allowedValues = $this->getEEzsignsignerLogintypeAllowableValues();
        if (!in_array($eEzsignsignerLogintype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'eEzsignsignerLogintype', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eEzsignsignerLogintype'] = $eEzsignsignerLogintype;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


