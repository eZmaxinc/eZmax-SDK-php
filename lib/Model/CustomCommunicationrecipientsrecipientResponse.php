<?php
/**
 * CustomCommunicationrecipientsrecipientResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * CustomCommunicationrecipientsrecipientResponse Class Doc Comment
 *
 * @category Class
 * @description Generic AutocompleteElement Response
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomCommunicationrecipientsrecipientResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Custom-Communicationrecipientsrecipient-Response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fkiAgentID' => 'int',
        'fkiBrokerID' => 'int',
        'fkiContactID' => 'int',
        'fkiCustomerID' => 'int',
        'fkiEmployeeID' => 'int',
        'fkiEzsignsignerID' => 'int',
        'fkiFranchiseofficeID' => 'int',
        'fkiUserID' => 'int',
        'fkiAgentincorporationID' => 'int',
        'fkiAssistantID' => 'int',
        'fkiExternalbrokerID' => 'int',
        'fkiEzcomagentID' => 'int',
        'fkiNotaryID' => 'int',
        'fkiRewardmemberID' => 'int',
        'fkiSupplierID' => 'int',
        'eCommunicationrecipientsrecipientObjecttype' => 'string',
        'objContactName' => '\eZmaxAPI\Model\CustomContactNameResponse',
        'objEmail' => '\eZmaxAPI\Model\EmailResponseCompound',
        'objPhoneFax' => '\eZmaxAPI\Model\PhoneResponseCompound',
        'objPhoneSMS' => '\eZmaxAPI\Model\PhoneResponseCompound'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fkiAgentID' => null,
        'fkiBrokerID' => null,
        'fkiContactID' => null,
        'fkiCustomerID' => null,
        'fkiEmployeeID' => null,
        'fkiEzsignsignerID' => null,
        'fkiFranchiseofficeID' => null,
        'fkiUserID' => null,
        'fkiAgentincorporationID' => null,
        'fkiAssistantID' => null,
        'fkiExternalbrokerID' => null,
        'fkiEzcomagentID' => null,
        'fkiNotaryID' => null,
        'fkiRewardmemberID' => null,
        'fkiSupplierID' => null,
        'eCommunicationrecipientsrecipientObjecttype' => null,
        'objContactName' => null,
        'objEmail' => null,
        'objPhoneFax' => null,
        'objPhoneSMS' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fkiAgentID' => false,
		'fkiBrokerID' => false,
		'fkiContactID' => false,
		'fkiCustomerID' => false,
		'fkiEmployeeID' => false,
		'fkiEzsignsignerID' => false,
		'fkiFranchiseofficeID' => false,
		'fkiUserID' => false,
		'fkiAgentincorporationID' => false,
		'fkiAssistantID' => false,
		'fkiExternalbrokerID' => false,
		'fkiEzcomagentID' => false,
		'fkiNotaryID' => false,
		'fkiRewardmemberID' => false,
		'fkiSupplierID' => false,
		'eCommunicationrecipientsrecipientObjecttype' => false,
		'objContactName' => false,
		'objEmail' => false,
		'objPhoneFax' => false,
		'objPhoneSMS' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fkiAgentID' => 'fkiAgentID',
        'fkiBrokerID' => 'fkiBrokerID',
        'fkiContactID' => 'fkiContactID',
        'fkiCustomerID' => 'fkiCustomerID',
        'fkiEmployeeID' => 'fkiEmployeeID',
        'fkiEzsignsignerID' => 'fkiEzsignsignerID',
        'fkiFranchiseofficeID' => 'fkiFranchiseofficeID',
        'fkiUserID' => 'fkiUserID',
        'fkiAgentincorporationID' => 'fkiAgentincorporationID',
        'fkiAssistantID' => 'fkiAssistantID',
        'fkiExternalbrokerID' => 'fkiExternalbrokerID',
        'fkiEzcomagentID' => 'fkiEzcomagentID',
        'fkiNotaryID' => 'fkiNotaryID',
        'fkiRewardmemberID' => 'fkiRewardmemberID',
        'fkiSupplierID' => 'fkiSupplierID',
        'eCommunicationrecipientsrecipientObjecttype' => 'eCommunicationrecipientsrecipientObjecttype',
        'objContactName' => 'objContactName',
        'objEmail' => 'objEmail',
        'objPhoneFax' => 'objPhoneFax',
        'objPhoneSMS' => 'objPhoneSMS'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fkiAgentID' => 'setFkiAgentID',
        'fkiBrokerID' => 'setFkiBrokerID',
        'fkiContactID' => 'setFkiContactID',
        'fkiCustomerID' => 'setFkiCustomerID',
        'fkiEmployeeID' => 'setFkiEmployeeID',
        'fkiEzsignsignerID' => 'setFkiEzsignsignerID',
        'fkiFranchiseofficeID' => 'setFkiFranchiseofficeID',
        'fkiUserID' => 'setFkiUserID',
        'fkiAgentincorporationID' => 'setFkiAgentincorporationID',
        'fkiAssistantID' => 'setFkiAssistantID',
        'fkiExternalbrokerID' => 'setFkiExternalbrokerID',
        'fkiEzcomagentID' => 'setFkiEzcomagentID',
        'fkiNotaryID' => 'setFkiNotaryID',
        'fkiRewardmemberID' => 'setFkiRewardmemberID',
        'fkiSupplierID' => 'setFkiSupplierID',
        'eCommunicationrecipientsrecipientObjecttype' => 'setECommunicationrecipientsrecipientObjecttype',
        'objContactName' => 'setObjContactName',
        'objEmail' => 'setObjEmail',
        'objPhoneFax' => 'setObjPhoneFax',
        'objPhoneSMS' => 'setObjPhoneSMS'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fkiAgentID' => 'getFkiAgentID',
        'fkiBrokerID' => 'getFkiBrokerID',
        'fkiContactID' => 'getFkiContactID',
        'fkiCustomerID' => 'getFkiCustomerID',
        'fkiEmployeeID' => 'getFkiEmployeeID',
        'fkiEzsignsignerID' => 'getFkiEzsignsignerID',
        'fkiFranchiseofficeID' => 'getFkiFranchiseofficeID',
        'fkiUserID' => 'getFkiUserID',
        'fkiAgentincorporationID' => 'getFkiAgentincorporationID',
        'fkiAssistantID' => 'getFkiAssistantID',
        'fkiExternalbrokerID' => 'getFkiExternalbrokerID',
        'fkiEzcomagentID' => 'getFkiEzcomagentID',
        'fkiNotaryID' => 'getFkiNotaryID',
        'fkiRewardmemberID' => 'getFkiRewardmemberID',
        'fkiSupplierID' => 'getFkiSupplierID',
        'eCommunicationrecipientsrecipientObjecttype' => 'getECommunicationrecipientsrecipientObjecttype',
        'objContactName' => 'getObjContactName',
        'objEmail' => 'getObjEmail',
        'objPhoneFax' => 'getObjPhoneFax',
        'objPhoneSMS' => 'getObjPhoneSMS'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_AGENT = 'Agent';
    public const E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_AGENTINCORPORATION = 'Agentincorporation';
    public const E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_ASSISTANT = 'Assistant';
    public const E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_BROKER = 'Broker';
    public const E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_CONTACT = 'Contact';
    public const E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_CUSTOMER = 'Customer';
    public const E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_EMPLOYEE = 'Employee';
    public const E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_EXTERNALBROKER = 'Externalbroker';
    public const E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_EZCOMAGENT = 'Ezcomagent';
    public const E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_EZCOMCOMPANY = 'Ezcomcompany';
    public const E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_EZSIGNSIGNER = 'Ezsignsigner';
    public const E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_FRANCHISEOFFICE = 'Franchiseoffice';
    public const E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_NOTARY = 'Notary';
    public const E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_REWARDMEMBER = 'Rewardmember';
    public const E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_SUPPLIER = 'Supplier';
    public const E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_USER = 'User';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getECommunicationrecipientsrecipientObjecttypeAllowableValues()
    {
        return [
            self::E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_AGENT,
            self::E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_AGENTINCORPORATION,
            self::E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_ASSISTANT,
            self::E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_BROKER,
            self::E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_CONTACT,
            self::E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_CUSTOMER,
            self::E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_EMPLOYEE,
            self::E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_EXTERNALBROKER,
            self::E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_EZCOMAGENT,
            self::E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_EZCOMCOMPANY,
            self::E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_EZSIGNSIGNER,
            self::E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_FRANCHISEOFFICE,
            self::E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_NOTARY,
            self::E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_REWARDMEMBER,
            self::E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_SUPPLIER,
            self::E_COMMUNICATIONRECIPIENTSRECIPIENT_OBJECTTYPE_USER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('fkiAgentID', $data ?? [], null);
        $this->setIfExists('fkiBrokerID', $data ?? [], null);
        $this->setIfExists('fkiContactID', $data ?? [], null);
        $this->setIfExists('fkiCustomerID', $data ?? [], null);
        $this->setIfExists('fkiEmployeeID', $data ?? [], null);
        $this->setIfExists('fkiEzsignsignerID', $data ?? [], null);
        $this->setIfExists('fkiFranchiseofficeID', $data ?? [], null);
        $this->setIfExists('fkiUserID', $data ?? [], null);
        $this->setIfExists('fkiAgentincorporationID', $data ?? [], null);
        $this->setIfExists('fkiAssistantID', $data ?? [], null);
        $this->setIfExists('fkiExternalbrokerID', $data ?? [], null);
        $this->setIfExists('fkiEzcomagentID', $data ?? [], null);
        $this->setIfExists('fkiNotaryID', $data ?? [], null);
        $this->setIfExists('fkiRewardmemberID', $data ?? [], null);
        $this->setIfExists('fkiSupplierID', $data ?? [], null);
        $this->setIfExists('eCommunicationrecipientsrecipientObjecttype', $data ?? [], null);
        $this->setIfExists('objContactName', $data ?? [], null);
        $this->setIfExists('objEmail', $data ?? [], null);
        $this->setIfExists('objPhoneFax', $data ?? [], null);
        $this->setIfExists('objPhoneSMS', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['fkiAgentID']) && ($this->container['fkiAgentID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiAgentID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiBrokerID']) && ($this->container['fkiBrokerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiBrokerID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiContactID']) && ($this->container['fkiContactID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiContactID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiCustomerID']) && ($this->container['fkiCustomerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiCustomerID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEmployeeID']) && ($this->container['fkiEmployeeID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEmployeeID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzsignsignerID']) && ($this->container['fkiEzsignsignerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzsignsignerID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiFranchiseofficeID']) && ($this->container['fkiFranchiseofficeID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiFranchiseofficeID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiUserID']) && ($this->container['fkiUserID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiUserID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiAgentincorporationID']) && ($this->container['fkiAgentincorporationID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiAgentincorporationID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiAssistantID']) && ($this->container['fkiAssistantID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiAssistantID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiExternalbrokerID']) && ($this->container['fkiExternalbrokerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiExternalbrokerID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzcomagentID']) && ($this->container['fkiEzcomagentID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzcomagentID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiNotaryID']) && ($this->container['fkiNotaryID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiNotaryID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiRewardmemberID']) && ($this->container['fkiRewardmemberID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiRewardmemberID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiSupplierID']) && ($this->container['fkiSupplierID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiSupplierID', must be bigger than or equal to 0.";
        }

        if ($this->container['eCommunicationrecipientsrecipientObjecttype'] === null) {
            $invalidProperties[] = "'eCommunicationrecipientsrecipientObjecttype' can't be null";
        }
        $allowedValues = $this->getECommunicationrecipientsrecipientObjecttypeAllowableValues();
        if (!is_null($this->container['eCommunicationrecipientsrecipientObjecttype']) && !in_array($this->container['eCommunicationrecipientsrecipientObjecttype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eCommunicationrecipientsrecipientObjecttype', must be one of '%s'",
                $this->container['eCommunicationrecipientsrecipientObjecttype'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['objContactName'] === null) {
            $invalidProperties[] = "'objContactName' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fkiAgentID
     *
     * @return int|null
     */
    public function getFkiAgentID()
    {
        return $this->container['fkiAgentID'];
    }

    /**
     * Sets fkiAgentID
     *
     * @param int|null $fkiAgentID The unique ID of the Agent.
     *
     * @return self
     */
    public function setFkiAgentID($fkiAgentID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiAgentID)) {
            //throw new \InvalidArgumentException('non-nullable fkiAgentID cannot be null');
        //}

//        if (($fkiAgentID < 0)) {
        if (!is_null($fkiAgentID) && ($fkiAgentID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiAgentID when calling CustomCommunicationrecipientsrecipientResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiAgentID'] = $fkiAgentID;
        $this->container['fkiAgentID'] = (is_null($fkiAgentID) ? null : (int) $fkiAgentID);

        return $this;
    }

    /**
     * Gets fkiBrokerID
     *
     * @return int|null
     */
    public function getFkiBrokerID()
    {
        return $this->container['fkiBrokerID'];
    }

    /**
     * Sets fkiBrokerID
     *
     * @param int|null $fkiBrokerID The unique ID of the Broker.
     *
     * @return self
     */
    public function setFkiBrokerID($fkiBrokerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiBrokerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiBrokerID cannot be null');
        //}

//        if (($fkiBrokerID < 0)) {
        if (!is_null($fkiBrokerID) && ($fkiBrokerID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiBrokerID when calling CustomCommunicationrecipientsrecipientResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiBrokerID'] = $fkiBrokerID;
        $this->container['fkiBrokerID'] = (is_null($fkiBrokerID) ? null : (int) $fkiBrokerID);

        return $this;
    }

    /**
     * Gets fkiContactID
     *
     * @return int|null
     */
    public function getFkiContactID()
    {
        return $this->container['fkiContactID'];
    }

    /**
     * Sets fkiContactID
     *
     * @param int|null $fkiContactID The unique ID of the Contact
     *
     * @return self
     */
    public function setFkiContactID($fkiContactID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiContactID)) {
            //throw new \InvalidArgumentException('non-nullable fkiContactID cannot be null');
        //}

//        if (($fkiContactID < 0)) {
        if (!is_null($fkiContactID) && ($fkiContactID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiContactID when calling CustomCommunicationrecipientsrecipientResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiContactID'] = $fkiContactID;
        $this->container['fkiContactID'] = (is_null($fkiContactID) ? null : (int) $fkiContactID);

        return $this;
    }

    /**
     * Gets fkiCustomerID
     *
     * @return int|null
     */
    public function getFkiCustomerID()
    {
        return $this->container['fkiCustomerID'];
    }

    /**
     * Sets fkiCustomerID
     *
     * @param int|null $fkiCustomerID The unique ID of the Customer.
     *
     * @return self
     */
    public function setFkiCustomerID($fkiCustomerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiCustomerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiCustomerID cannot be null');
        //}

//        if (($fkiCustomerID < 0)) {
        if (!is_null($fkiCustomerID) && ($fkiCustomerID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiCustomerID when calling CustomCommunicationrecipientsrecipientResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiCustomerID'] = $fkiCustomerID;
        $this->container['fkiCustomerID'] = (is_null($fkiCustomerID) ? null : (int) $fkiCustomerID);

        return $this;
    }

    /**
     * Gets fkiEmployeeID
     *
     * @return int|null
     */
    public function getFkiEmployeeID()
    {
        return $this->container['fkiEmployeeID'];
    }

    /**
     * Sets fkiEmployeeID
     *
     * @param int|null $fkiEmployeeID The unique ID of the Employee.
     *
     * @return self
     */
    public function setFkiEmployeeID($fkiEmployeeID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEmployeeID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEmployeeID cannot be null');
        //}

//        if (($fkiEmployeeID < 0)) {
        if (!is_null($fkiEmployeeID) && ($fkiEmployeeID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiEmployeeID when calling CustomCommunicationrecipientsrecipientResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEmployeeID'] = $fkiEmployeeID;
        $this->container['fkiEmployeeID'] = (is_null($fkiEmployeeID) ? null : (int) $fkiEmployeeID);

        return $this;
    }

    /**
     * Gets fkiEzsignsignerID
     *
     * @return int|null
     */
    public function getFkiEzsignsignerID()
    {
        return $this->container['fkiEzsignsignerID'];
    }

    /**
     * Sets fkiEzsignsignerID
     *
     * @param int|null $fkiEzsignsignerID The unique ID of the Ezsignsigner
     *
     * @return self
     */
    public function setFkiEzsignsignerID($fkiEzsignsignerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzsignsignerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzsignsignerID cannot be null');
        //}

//        if (($fkiEzsignsignerID < 0)) {
        if (!is_null($fkiEzsignsignerID) && ($fkiEzsignsignerID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiEzsignsignerID when calling CustomCommunicationrecipientsrecipientResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzsignsignerID'] = $fkiEzsignsignerID;
        $this->container['fkiEzsignsignerID'] = (is_null($fkiEzsignsignerID) ? null : (int) $fkiEzsignsignerID);

        return $this;
    }

    /**
     * Gets fkiFranchiseofficeID
     *
     * @return int|null
     */
    public function getFkiFranchiseofficeID()
    {
        return $this->container['fkiFranchiseofficeID'];
    }

    /**
     * Sets fkiFranchiseofficeID
     *
     * @param int|null $fkiFranchiseofficeID The unique ID of the Franchisereoffice
     *
     * @return self
     */
    public function setFkiFranchiseofficeID($fkiFranchiseofficeID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiFranchiseofficeID)) {
            //throw new \InvalidArgumentException('non-nullable fkiFranchiseofficeID cannot be null');
        //}

//        if (($fkiFranchiseofficeID < 0)) {
        if (!is_null($fkiFranchiseofficeID) && ($fkiFranchiseofficeID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiFranchiseofficeID when calling CustomCommunicationrecipientsrecipientResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiFranchiseofficeID'] = $fkiFranchiseofficeID;
        $this->container['fkiFranchiseofficeID'] = (is_null($fkiFranchiseofficeID) ? null : (int) $fkiFranchiseofficeID);

        return $this;
    }

    /**
     * Gets fkiUserID
     *
     * @return int|null
     */
    public function getFkiUserID()
    {
        return $this->container['fkiUserID'];
    }

    /**
     * Sets fkiUserID
     *
     * @param int|null $fkiUserID The unique ID of the User
     *
     * @return self
     */
    public function setFkiUserID($fkiUserID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiUserID)) {
            //throw new \InvalidArgumentException('non-nullable fkiUserID cannot be null');
        //}

//        if (($fkiUserID < 0)) {
        if (!is_null($fkiUserID) && ($fkiUserID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiUserID when calling CustomCommunicationrecipientsrecipientResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiUserID'] = $fkiUserID;
        $this->container['fkiUserID'] = (is_null($fkiUserID) ? null : (int) $fkiUserID);

        return $this;
    }

    /**
     * Gets fkiAgentincorporationID
     *
     * @return int|null
     */
    public function getFkiAgentincorporationID()
    {
        return $this->container['fkiAgentincorporationID'];
    }

    /**
     * Sets fkiAgentincorporationID
     *
     * @param int|null $fkiAgentincorporationID The unique ID of the Agentincorporation.
     *
     * @return self
     */
    public function setFkiAgentincorporationID($fkiAgentincorporationID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiAgentincorporationID)) {
            //throw new \InvalidArgumentException('non-nullable fkiAgentincorporationID cannot be null');
        //}

//        if (($fkiAgentincorporationID < 0)) {
        if (!is_null($fkiAgentincorporationID) && ($fkiAgentincorporationID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiAgentincorporationID when calling CustomCommunicationrecipientsrecipientResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiAgentincorporationID'] = $fkiAgentincorporationID;
        $this->container['fkiAgentincorporationID'] = (is_null($fkiAgentincorporationID) ? null : (int) $fkiAgentincorporationID);

        return $this;
    }

    /**
     * Gets fkiAssistantID
     *
     * @return int|null
     */
    public function getFkiAssistantID()
    {
        return $this->container['fkiAssistantID'];
    }

    /**
     * Sets fkiAssistantID
     *
     * @param int|null $fkiAssistantID The unique ID of the Assistant.
     *
     * @return self
     */
    public function setFkiAssistantID($fkiAssistantID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiAssistantID)) {
            //throw new \InvalidArgumentException('non-nullable fkiAssistantID cannot be null');
        //}

//        if (($fkiAssistantID < 0)) {
        if (!is_null($fkiAssistantID) && ($fkiAssistantID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiAssistantID when calling CustomCommunicationrecipientsrecipientResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiAssistantID'] = $fkiAssistantID;
        $this->container['fkiAssistantID'] = (is_null($fkiAssistantID) ? null : (int) $fkiAssistantID);

        return $this;
    }

    /**
     * Gets fkiExternalbrokerID
     *
     * @return int|null
     */
    public function getFkiExternalbrokerID()
    {
        return $this->container['fkiExternalbrokerID'];
    }

    /**
     * Sets fkiExternalbrokerID
     *
     * @param int|null $fkiExternalbrokerID The unique ID of the Externalbroker.
     *
     * @return self
     */
    public function setFkiExternalbrokerID($fkiExternalbrokerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiExternalbrokerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiExternalbrokerID cannot be null');
        //}

//        if (($fkiExternalbrokerID < 0)) {
        if (!is_null($fkiExternalbrokerID) && ($fkiExternalbrokerID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiExternalbrokerID when calling CustomCommunicationrecipientsrecipientResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiExternalbrokerID'] = $fkiExternalbrokerID;
        $this->container['fkiExternalbrokerID'] = (is_null($fkiExternalbrokerID) ? null : (int) $fkiExternalbrokerID);

        return $this;
    }

    /**
     * Gets fkiEzcomagentID
     *
     * @return int|null
     */
    public function getFkiEzcomagentID()
    {
        return $this->container['fkiEzcomagentID'];
    }

    /**
     * Sets fkiEzcomagentID
     *
     * @param int|null $fkiEzcomagentID The unique ID of the Ezcomagent.
     *
     * @return self
     */
    public function setFkiEzcomagentID($fkiEzcomagentID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzcomagentID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzcomagentID cannot be null');
        //}

//        if (($fkiEzcomagentID < 0)) {
        if (!is_null($fkiEzcomagentID) && ($fkiEzcomagentID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiEzcomagentID when calling CustomCommunicationrecipientsrecipientResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzcomagentID'] = $fkiEzcomagentID;
        $this->container['fkiEzcomagentID'] = (is_null($fkiEzcomagentID) ? null : (int) $fkiEzcomagentID);

        return $this;
    }

    /**
     * Gets fkiNotaryID
     *
     * @return int|null
     */
    public function getFkiNotaryID()
    {
        return $this->container['fkiNotaryID'];
    }

    /**
     * Sets fkiNotaryID
     *
     * @param int|null $fkiNotaryID The unique ID of the Notary.
     *
     * @return self
     */
    public function setFkiNotaryID($fkiNotaryID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiNotaryID)) {
            //throw new \InvalidArgumentException('non-nullable fkiNotaryID cannot be null');
        //}

//        if (($fkiNotaryID < 0)) {
        if (!is_null($fkiNotaryID) && ($fkiNotaryID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiNotaryID when calling CustomCommunicationrecipientsrecipientResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiNotaryID'] = $fkiNotaryID;
        $this->container['fkiNotaryID'] = (is_null($fkiNotaryID) ? null : (int) $fkiNotaryID);

        return $this;
    }

    /**
     * Gets fkiRewardmemberID
     *
     * @return int|null
     */
    public function getFkiRewardmemberID()
    {
        return $this->container['fkiRewardmemberID'];
    }

    /**
     * Sets fkiRewardmemberID
     *
     * @param int|null $fkiRewardmemberID The unique ID of the Rewardmember.
     *
     * @return self
     */
    public function setFkiRewardmemberID($fkiRewardmemberID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiRewardmemberID)) {
            //throw new \InvalidArgumentException('non-nullable fkiRewardmemberID cannot be null');
        //}

//        if (($fkiRewardmemberID < 0)) {
        if (!is_null($fkiRewardmemberID) && ($fkiRewardmemberID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiRewardmemberID when calling CustomCommunicationrecipientsrecipientResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiRewardmemberID'] = $fkiRewardmemberID;
        $this->container['fkiRewardmemberID'] = (is_null($fkiRewardmemberID) ? null : (int) $fkiRewardmemberID);

        return $this;
    }

    /**
     * Gets fkiSupplierID
     *
     * @return int|null
     */
    public function getFkiSupplierID()
    {
        return $this->container['fkiSupplierID'];
    }

    /**
     * Sets fkiSupplierID
     *
     * @param int|null $fkiSupplierID The unique ID of the Supplier.
     *
     * @return self
     */
    public function setFkiSupplierID($fkiSupplierID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiSupplierID)) {
            //throw new \InvalidArgumentException('non-nullable fkiSupplierID cannot be null');
        //}

//        if (($fkiSupplierID < 0)) {
        if (!is_null($fkiSupplierID) && ($fkiSupplierID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiSupplierID when calling CustomCommunicationrecipientsrecipientResponse., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiSupplierID'] = $fkiSupplierID;
        $this->container['fkiSupplierID'] = (is_null($fkiSupplierID) ? null : (int) $fkiSupplierID);

        return $this;
    }

    /**
     * Gets eCommunicationrecipientsrecipientObjecttype
     *
     * @return string
     */
    public function getECommunicationrecipientsrecipientObjecttype()
    {
        return is_null($this->container['eCommunicationrecipientsrecipientObjecttype']) ? null : trim($this->container['eCommunicationrecipientsrecipientObjecttype']);
    }

    /**
     * Sets eCommunicationrecipientsrecipientObjecttype
     *
     * @param string $eCommunicationrecipientsrecipientObjecttype eCommunicationrecipientsrecipientObjecttype
     *
     * @return self
     */
    public function setECommunicationrecipientsrecipientObjecttype($eCommunicationrecipientsrecipientObjecttype)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eCommunicationrecipientsrecipientObjecttype)) {
            //throw new \InvalidArgumentException('non-nullable eCommunicationrecipientsrecipientObjecttype cannot be null');
        //}
        $allowedValues = $this->getECommunicationrecipientsrecipientObjecttypeAllowableValues();
        if (!in_array($eCommunicationrecipientsrecipientObjecttype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eCommunicationrecipientsrecipientObjecttype', must be one of '%s'",
                    $eCommunicationrecipientsrecipientObjecttype,
                    implode("', '", $allowedValues)
                )
            );
        }
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eCommunicationrecipientsrecipientObjecttype'] = $eCommunicationrecipientsrecipientObjecttype;
        $this->container['eCommunicationrecipientsrecipientObjecttype'] = (is_null($eCommunicationrecipientsrecipientObjecttype) ? null : trim((string) $eCommunicationrecipientsrecipientObjecttype));

        return $this;
    }

    /**
     * Gets objContactName
     *
     * @return \eZmaxAPI\Model\CustomContactNameResponse
     */
    public function getObjContactName()
    {
        return $this->container['objContactName'];
    }

    /**
     * Sets objContactName
     *
     * @param \eZmaxAPI\Model\CustomContactNameResponse $objContactName objContactName
     *
     * @return self
     */
    public function setObjContactName($objContactName)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($objContactName)) {
            //throw new \InvalidArgumentException('non-nullable objContactName cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['objContactName'] = $objContactName;
        $this->container['objContactName'] = $objContactName;

        return $this;
    }

    /**
     * Gets objEmail
     *
     * @return \eZmaxAPI\Model\EmailResponseCompound|null
     */
    public function getObjEmail()
    {
        return $this->container['objEmail'];
    }

    /**
     * Sets objEmail
     *
     * @param \eZmaxAPI\Model\EmailResponseCompound|null $objEmail objEmail
     *
     * @return self
     */
    public function setObjEmail($objEmail)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($objEmail)) {
            //throw new \InvalidArgumentException('non-nullable objEmail cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['objEmail'] = $objEmail;
        $this->container['objEmail'] = $objEmail;

        return $this;
    }

    /**
     * Gets objPhoneFax
     *
     * @return \eZmaxAPI\Model\PhoneResponseCompound|null
     */
    public function getObjPhoneFax()
    {
        return $this->container['objPhoneFax'];
    }

    /**
     * Sets objPhoneFax
     *
     * @param \eZmaxAPI\Model\PhoneResponseCompound|null $objPhoneFax objPhoneFax
     *
     * @return self
     */
    public function setObjPhoneFax($objPhoneFax)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($objPhoneFax)) {
            //throw new \InvalidArgumentException('non-nullable objPhoneFax cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['objPhoneFax'] = $objPhoneFax;
        $this->container['objPhoneFax'] = $objPhoneFax;

        return $this;
    }

    /**
     * Gets objPhoneSMS
     *
     * @return \eZmaxAPI\Model\PhoneResponseCompound|null
     */
    public function getObjPhoneSMS()
    {
        return $this->container['objPhoneSMS'];
    }

    /**
     * Sets objPhoneSMS
     *
     * @param \eZmaxAPI\Model\PhoneResponseCompound|null $objPhoneSMS objPhoneSMS
     *
     * @return self
     */
    public function setObjPhoneSMS($objPhoneSMS)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($objPhoneSMS)) {
            //throw new \InvalidArgumentException('non-nullable objPhoneSMS cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['objPhoneSMS'] = $objPhoneSMS;
        $this->container['objPhoneSMS'] = $objPhoneSMS;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


