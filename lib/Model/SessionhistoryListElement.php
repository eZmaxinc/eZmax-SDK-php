<?php
/**
 * SessionhistoryListElement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * SessionhistoryListElement Class Doc Comment
 *
 * @category Class
 * @description A Sessionhistory List Element
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SessionhistoryListElement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'sessionhistory-ListElement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pkiSessionhistoryID' => 'int',
        'fkiComputerID' => 'int',
        'fkiUserID' => 'int',
        'dtSessionhistoryFirsthit' => 'string',
        'dtSessionhistoryLasthit' => 'string',
        'eSessionhistoryEndby' => '\eZmaxAPI\Model\FieldESessionhistoryEndby',
        'sComputerDescription' => 'string',
        'sSessionhistoryDuration' => 'string',
        'sSessionhistoryIP' => 'string',
        'sUserLoginname' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pkiSessionhistoryID' => null,
        'fkiComputerID' => null,
        'fkiUserID' => null,
        'dtSessionhistoryFirsthit' => null,
        'dtSessionhistoryLasthit' => null,
        'eSessionhistoryEndby' => null,
        'sComputerDescription' => null,
        'sSessionhistoryDuration' => null,
        'sSessionhistoryIP' => null,
        'sUserLoginname' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pkiSessionhistoryID' => false,
		'fkiComputerID' => false,
		'fkiUserID' => false,
		'dtSessionhistoryFirsthit' => false,
		'dtSessionhistoryLasthit' => false,
		'eSessionhistoryEndby' => false,
		'sComputerDescription' => false,
		'sSessionhistoryDuration' => false,
		'sSessionhistoryIP' => false,
		'sUserLoginname' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pkiSessionhistoryID' => 'pkiSessionhistoryID',
        'fkiComputerID' => 'fkiComputerID',
        'fkiUserID' => 'fkiUserID',
        'dtSessionhistoryFirsthit' => 'dtSessionhistoryFirsthit',
        'dtSessionhistoryLasthit' => 'dtSessionhistoryLasthit',
        'eSessionhistoryEndby' => 'eSessionhistoryEndby',
        'sComputerDescription' => 'sComputerDescription',
        'sSessionhistoryDuration' => 'sSessionhistoryDuration',
        'sSessionhistoryIP' => 'sSessionhistoryIP',
        'sUserLoginname' => 'sUserLoginname'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pkiSessionhistoryID' => 'setPkiSessionhistoryID',
        'fkiComputerID' => 'setFkiComputerID',
        'fkiUserID' => 'setFkiUserID',
        'dtSessionhistoryFirsthit' => 'setDtSessionhistoryFirsthit',
        'dtSessionhistoryLasthit' => 'setDtSessionhistoryLasthit',
        'eSessionhistoryEndby' => 'setESessionhistoryEndby',
        'sComputerDescription' => 'setSComputerDescription',
        'sSessionhistoryDuration' => 'setSSessionhistoryDuration',
        'sSessionhistoryIP' => 'setSSessionhistoryIP',
        'sUserLoginname' => 'setSUserLoginname'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pkiSessionhistoryID' => 'getPkiSessionhistoryID',
        'fkiComputerID' => 'getFkiComputerID',
        'fkiUserID' => 'getFkiUserID',
        'dtSessionhistoryFirsthit' => 'getDtSessionhistoryFirsthit',
        'dtSessionhistoryLasthit' => 'getDtSessionhistoryLasthit',
        'eSessionhistoryEndby' => 'getESessionhistoryEndby',
        'sComputerDescription' => 'getSComputerDescription',
        'sSessionhistoryDuration' => 'getSSessionhistoryDuration',
        'sSessionhistoryIP' => 'getSSessionhistoryIP',
        'sUserLoginname' => 'getSUserLoginname'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pkiSessionhistoryID', $data ?? [], null);
        $this->setIfExists('fkiComputerID', $data ?? [], null);
        $this->setIfExists('fkiUserID', $data ?? [], null);
        $this->setIfExists('dtSessionhistoryFirsthit', $data ?? [], null);
        $this->setIfExists('dtSessionhistoryLasthit', $data ?? [], null);
        $this->setIfExists('eSessionhistoryEndby', $data ?? [], null);
        $this->setIfExists('sComputerDescription', $data ?? [], null);
        $this->setIfExists('sSessionhistoryDuration', $data ?? [], null);
        $this->setIfExists('sSessionhistoryIP', $data ?? [], null);
        $this->setIfExists('sUserLoginname', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pkiSessionhistoryID'] === null) {
            $invalidProperties[] = "'pkiSessionhistoryID' can't be null";
        }
        if (($this->container['pkiSessionhistoryID'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'pkiSessionhistoryID', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['pkiSessionhistoryID'] < 1)) {
            $invalidProperties[] = "invalid value for 'pkiSessionhistoryID', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fkiComputerID']) && ($this->container['fkiComputerID'] > 65535)) {
            $invalidProperties[] = "invalid value for 'fkiComputerID', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['fkiComputerID']) && ($this->container['fkiComputerID'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiComputerID', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fkiUserID']) && ($this->container['fkiUserID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiUserID', must be bigger than or equal to 0.";
        }

        if ($this->container['dtSessionhistoryFirsthit'] === null) {
            $invalidProperties[] = "'dtSessionhistoryFirsthit' can't be null";
        }
//        if (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", $this->container['dtSessionhistoryFirsthit'])) {
        if (!is_null($this->container['dtSessionhistoryFirsthit']) && !preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", $this->container['dtSessionhistoryFirsthit'])) {
            $invalidProperties[] = "invalid value for 'dtSessionhistoryFirsthit', must be conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/.";
        }

        if ($this->container['dtSessionhistoryLasthit'] === null) {
            $invalidProperties[] = "'dtSessionhistoryLasthit' can't be null";
        }
//        if (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", $this->container['dtSessionhistoryLasthit'])) {
        if (!is_null($this->container['dtSessionhistoryLasthit']) && !preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", $this->container['dtSessionhistoryLasthit'])) {
            $invalidProperties[] = "invalid value for 'dtSessionhistoryLasthit', must be conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/.";
        }

        if ($this->container['eSessionhistoryEndby'] === null) {
            $invalidProperties[] = "'eSessionhistoryEndby' can't be null";
        }
//        if (!is_null($this->container['sComputerDescription']) && !preg_match("/^.{0,50}$/", $this->container['sComputerDescription'])) {
        if (!is_null($this->container['sComputerDescription']) && !preg_match("/^.{0,50}$/", $this->container['sComputerDescription'])) {
            $invalidProperties[] = "invalid value for 'sComputerDescription', must be conform to the pattern /^.{0,50}$/.";
        }

        if ($this->container['sSessionhistoryDuration'] === null) {
            $invalidProperties[] = "'sSessionhistoryDuration' can't be null";
        }
//        if (!preg_match("/^(0[0-9]{1}|\\d{2,}):([0-5][0-9]):([0-5][0-9])$/", $this->container['sSessionhistoryDuration'])) {
        if (!is_null($this->container['sSessionhistoryDuration']) && !preg_match("/^(0[0-9]{1}|\\d{2,}):([0-5][0-9]):([0-5][0-9])$/", $this->container['sSessionhistoryDuration'])) {
            $invalidProperties[] = "invalid value for 'sSessionhistoryDuration', must be conform to the pattern /^(0[0-9]{1}|\\d{2,}):([0-5][0-9]):([0-5][0-9])$/.";
        }

        if ($this->container['sSessionhistoryIP'] === null) {
            $invalidProperties[] = "'sSessionhistoryIP' can't be null";
        }
//        if (!is_null($this->container['sUserLoginname']) && !preg_match("/^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4})|([a-zA-Z0-9]){1,32})$/", $this->container['sUserLoginname'])) {
        if (!is_null($this->container['sUserLoginname']) && !preg_match("/^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4})|([a-zA-Z0-9]){1,32})$/", $this->container['sUserLoginname'])) {
            $invalidProperties[] = "invalid value for 'sUserLoginname', must be conform to the pattern /^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4})|([a-zA-Z0-9]){1,32})$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pkiSessionhistoryID
     *
     * @return int
     */
    public function getPkiSessionhistoryID()
    {
        return $this->container['pkiSessionhistoryID'];
    }

    /**
     * Sets pkiSessionhistoryID
     *
     * @param int $pkiSessionhistoryID The unique ID of the Sessionhistory
     *
     * @return self
     */
    public function setPkiSessionhistoryID($pkiSessionhistoryID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($pkiSessionhistoryID)) {
            //throw new \InvalidArgumentException('non-nullable pkiSessionhistoryID cannot be null');
        //}

//        if (($pkiSessionhistoryID > 2147483647)) {
        if (($pkiSessionhistoryID > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $pkiSessionhistoryID when calling SessionhistoryListElement., must be smaller than or equal to 2147483647.');
        }
//        if (($pkiSessionhistoryID < 1)) {
        if (($pkiSessionhistoryID < 1)) {
            throw new \InvalidArgumentException('invalid value for $pkiSessionhistoryID when calling SessionhistoryListElement., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['pkiSessionhistoryID'] = $pkiSessionhistoryID;
        $this->container['pkiSessionhistoryID'] = (is_null($pkiSessionhistoryID) ? null : (int) $pkiSessionhistoryID);

        return $this;
    }

    /**
     * Gets fkiComputerID
     *
     * @return int|null
     */
    public function getFkiComputerID()
    {
        return $this->container['fkiComputerID'];
    }

    /**
     * Sets fkiComputerID
     *
     * @param int|null $fkiComputerID The unique ID of the Computer
     *
     * @return self
     */
    public function setFkiComputerID($fkiComputerID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiComputerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiComputerID cannot be null');
        //}

//        if (($fkiComputerID > 65535)) {
        if (!is_null($fkiComputerID) && ($fkiComputerID > 65535)) {
            throw new \InvalidArgumentException('invalid value for $fkiComputerID when calling SessionhistoryListElement., must be smaller than or equal to 65535.');
        }
//        if (($fkiComputerID < 1)) {
        if (!is_null($fkiComputerID) && ($fkiComputerID < 1)) {
            throw new \InvalidArgumentException('invalid value for $fkiComputerID when calling SessionhistoryListElement., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiComputerID'] = $fkiComputerID;
        $this->container['fkiComputerID'] = (is_null($fkiComputerID) ? null : (int) $fkiComputerID);

        return $this;
    }

    /**
     * Gets fkiUserID
     *
     * @return int|null
     */
    public function getFkiUserID()
    {
        return $this->container['fkiUserID'];
    }

    /**
     * Sets fkiUserID
     *
     * @param int|null $fkiUserID The unique ID of the User
     *
     * @return self
     */
    public function setFkiUserID($fkiUserID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiUserID)) {
            //throw new \InvalidArgumentException('non-nullable fkiUserID cannot be null');
        //}

//        if (($fkiUserID < 0)) {
        if (!is_null($fkiUserID) && ($fkiUserID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiUserID when calling SessionhistoryListElement., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiUserID'] = $fkiUserID;
        $this->container['fkiUserID'] = (is_null($fkiUserID) ? null : (int) $fkiUserID);

        return $this;
    }

    /**
     * Gets dtSessionhistoryFirsthit
     *
     * @return string
     */
    public function getDtSessionhistoryFirsthit()
    {
        return $this->container['dtSessionhistoryFirsthit'];
    }

    /**
     * Sets dtSessionhistoryFirsthit
     *
     * @param string $dtSessionhistoryFirsthit The first hit of the Sessionhistory
     *
     * @return self
     */
    public function setDtSessionhistoryFirsthit($dtSessionhistoryFirsthit)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtSessionhistoryFirsthit)) {
            //throw new \InvalidArgumentException('non-nullable dtSessionhistoryFirsthit cannot be null');
        //}

//        if ((!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", $dtSessionhistoryFirsthit))) {
        if (!is_null($dtSessionhistoryFirsthit) && (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", $dtSessionhistoryFirsthit))) {
            throw new \InvalidArgumentException("invalid value for \$dtSessionhistoryFirsthit when calling SessionhistoryListElement., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtSessionhistoryFirsthit'] = $dtSessionhistoryFirsthit;
        $this->container['dtSessionhistoryFirsthit'] = (is_null($dtSessionhistoryFirsthit) ? null : (string) $dtSessionhistoryFirsthit);

        return $this;
    }

    /**
     * Gets dtSessionhistoryLasthit
     *
     * @return string
     */
    public function getDtSessionhistoryLasthit()
    {
        return $this->container['dtSessionhistoryLasthit'];
    }

    /**
     * Sets dtSessionhistoryLasthit
     *
     * @param string $dtSessionhistoryLasthit The last hit of the Sessionhistory
     *
     * @return self
     */
    public function setDtSessionhistoryLasthit($dtSessionhistoryLasthit)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtSessionhistoryLasthit)) {
            //throw new \InvalidArgumentException('non-nullable dtSessionhistoryLasthit cannot be null');
        //}

//        if ((!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", $dtSessionhistoryLasthit))) {
        if (!is_null($dtSessionhistoryLasthit) && (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", $dtSessionhistoryLasthit))) {
            throw new \InvalidArgumentException("invalid value for \$dtSessionhistoryLasthit when calling SessionhistoryListElement., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtSessionhistoryLasthit'] = $dtSessionhistoryLasthit;
        $this->container['dtSessionhistoryLasthit'] = (is_null($dtSessionhistoryLasthit) ? null : (string) $dtSessionhistoryLasthit);

        return $this;
    }

    /**
     * Gets eSessionhistoryEndby
     *
     * @return \eZmaxAPI\Model\FieldESessionhistoryEndby
     */
    public function getESessionhistoryEndby()
    {
        return $this->container['eSessionhistoryEndby'];
    }

    /**
     * Sets eSessionhistoryEndby
     *
     * @param \eZmaxAPI\Model\FieldESessionhistoryEndby $eSessionhistoryEndby eSessionhistoryEndby
     *
     * @return self
     */
    public function setESessionhistoryEndby($eSessionhistoryEndby)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eSessionhistoryEndby)) {
            //throw new \InvalidArgumentException('non-nullable eSessionhistoryEndby cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eSessionhistoryEndby'] = $eSessionhistoryEndby;
        $this->container['eSessionhistoryEndby'] = $eSessionhistoryEndby;

        return $this;
    }

    /**
     * Gets sComputerDescription
     *
     * @return string|null
     */
    public function getSComputerDescription()
    {
        return $this->container['sComputerDescription'];
    }

    /**
     * Sets sComputerDescription
     *
     * @param string|null $sComputerDescription The description of the Computer
     *
     * @return self
     */
    public function setSComputerDescription($sComputerDescription)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sComputerDescription)) {
            //throw new \InvalidArgumentException('non-nullable sComputerDescription cannot be null');
        //}

//        if ((!preg_match("/^.{0,50}$/", $sComputerDescription))) {
        if (!is_null($sComputerDescription) && (!preg_match("/^.{0,50}$/", $sComputerDescription))) {
            throw new \InvalidArgumentException("invalid value for \$sComputerDescription when calling SessionhistoryListElement., must conform to the pattern /^.{0,50}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sComputerDescription'] = $sComputerDescription;
        $this->container['sComputerDescription'] = (is_null($sComputerDescription) ? null : (string) $sComputerDescription);

        return $this;
    }

    /**
     * Gets sSessionhistoryDuration
     *
     * @return string
     */
    public function getSSessionhistoryDuration()
    {
        return $this->container['sSessionhistoryDuration'];
    }

    /**
     * Sets sSessionhistoryDuration
     *
     * @param string $sSessionhistoryDuration The duration of the session
     *
     * @return self
     */
    public function setSSessionhistoryDuration($sSessionhistoryDuration)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sSessionhistoryDuration)) {
            //throw new \InvalidArgumentException('non-nullable sSessionhistoryDuration cannot be null');
        //}

//        if ((!preg_match("/^(0[0-9]{1}|\\d{2,}):([0-5][0-9]):([0-5][0-9])$/", $sSessionhistoryDuration))) {
        if (!is_null($sSessionhistoryDuration) && (!preg_match("/^(0[0-9]{1}|\\d{2,}):([0-5][0-9]):([0-5][0-9])$/", $sSessionhistoryDuration))) {
            throw new \InvalidArgumentException("invalid value for \$sSessionhistoryDuration when calling SessionhistoryListElement., must conform to the pattern /^(0[0-9]{1}|\\d{2,}):([0-5][0-9]):([0-5][0-9])$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sSessionhistoryDuration'] = $sSessionhistoryDuration;
        $this->container['sSessionhistoryDuration'] = (is_null($sSessionhistoryDuration) ? null : (string) $sSessionhistoryDuration);

        return $this;
    }

    /**
     * Gets sSessionhistoryIP
     *
     * @return string
     */
    public function getSSessionhistoryIP()
    {
        return $this->container['sSessionhistoryIP'];
    }

    /**
     * Sets sSessionhistoryIP
     *
     * @param string $sSessionhistoryIP Represent an IP address.
     *
     * @return self
     */
    public function setSSessionhistoryIP($sSessionhistoryIP)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sSessionhistoryIP)) {
            //throw new \InvalidArgumentException('non-nullable sSessionhistoryIP cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sSessionhistoryIP'] = $sSessionhistoryIP;
        $this->container['sSessionhistoryIP'] = (is_null($sSessionhistoryIP) ? null : (string) $sSessionhistoryIP);

        return $this;
    }

    /**
     * Gets sUserLoginname
     *
     * @return string|null
     */
    public function getSUserLoginname()
    {
        return $this->container['sUserLoginname'];
    }

    /**
     * Sets sUserLoginname
     *
     * @param string|null $sUserLoginname The login name of the User.
     *
     * @return self
     */
    public function setSUserLoginname($sUserLoginname)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sUserLoginname)) {
            //throw new \InvalidArgumentException('non-nullable sUserLoginname cannot be null');
        //}

//        if ((!preg_match("/^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4})|([a-zA-Z0-9]){1,32})$/", $sUserLoginname))) {
        if (!is_null($sUserLoginname) && (!preg_match("/^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4})|([a-zA-Z0-9]){1,32})$/", $sUserLoginname))) {
            throw new \InvalidArgumentException("invalid value for \$sUserLoginname when calling SessionhistoryListElement., must conform to the pattern /^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4})|([a-zA-Z0-9]){1,32})$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sUserLoginname'] = $sUserLoginname;
        $this->container['sUserLoginname'] = (is_null($sUserLoginname) ? null : (string) $sUserLoginname);

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


