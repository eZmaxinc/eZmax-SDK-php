<?php
/**
 * EzsigntemplateformfieldgroupRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.7
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * EzsigntemplateformfieldgroupRequest Class Doc Comment
 *
 * @category Class
 * @description A Ezsigntemplateformfieldgroup Object
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EzsigntemplateformfieldgroupRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ezsigntemplateformfieldgroup-Request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pkiEzsigntemplateformfieldgroupID' => 'int',
        'fkiEzsigntemplatedocumentID' => 'int',
        'eEzsigntemplateformfieldgroupType' => '\eZmaxAPI\Model\FieldEEzsigntemplateformfieldgroupType',
        'eEzsigntemplateformfieldgroupSignerrequirement' => '\eZmaxAPI\Model\FieldEEzsigntemplateformfieldgroupSignerrequirement',
        'sEzsigntemplateformfieldgroupLabel' => 'string',
        'iEzsigntemplateformfieldgroupStep' => 'int',
        'sEzsigntemplateformfieldgroupDefaultvalue' => 'string',
        'iEzsigntemplateformfieldgroupFilledmin' => 'int',
        'iEzsigntemplateformfieldgroupFilledmax' => 'int',
        'bEzsigntemplateformfieldgroupReadonly' => 'bool',
        'iEzsigntemplateformfieldgroupMaxlength' => 'int',
        'bEzsigntemplateformfieldgroupEncrypted' => 'bool',
        'sEzsigntemplateformfieldgroupRegexp' => 'string',
        'tEzsigntemplateformfieldgroupTooltip' => 'string',
        'eEzsigntemplateformfieldgroupTooltipposition' => '\eZmaxAPI\Model\FieldEEzsigntemplateformfieldgroupTooltipposition'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pkiEzsigntemplateformfieldgroupID' => null,
        'fkiEzsigntemplatedocumentID' => null,
        'eEzsigntemplateformfieldgroupType' => null,
        'eEzsigntemplateformfieldgroupSignerrequirement' => null,
        'sEzsigntemplateformfieldgroupLabel' => null,
        'iEzsigntemplateformfieldgroupStep' => null,
        'sEzsigntemplateformfieldgroupDefaultvalue' => null,
        'iEzsigntemplateformfieldgroupFilledmin' => null,
        'iEzsigntemplateformfieldgroupFilledmax' => null,
        'bEzsigntemplateformfieldgroupReadonly' => null,
        'iEzsigntemplateformfieldgroupMaxlength' => null,
        'bEzsigntemplateformfieldgroupEncrypted' => null,
        'sEzsigntemplateformfieldgroupRegexp' => null,
        'tEzsigntemplateformfieldgroupTooltip' => null,
        'eEzsigntemplateformfieldgroupTooltipposition' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pkiEzsigntemplateformfieldgroupID' => 'pkiEzsigntemplateformfieldgroupID',
        'fkiEzsigntemplatedocumentID' => 'fkiEzsigntemplatedocumentID',
        'eEzsigntemplateformfieldgroupType' => 'eEzsigntemplateformfieldgroupType',
        'eEzsigntemplateformfieldgroupSignerrequirement' => 'eEzsigntemplateformfieldgroupSignerrequirement',
        'sEzsigntemplateformfieldgroupLabel' => 'sEzsigntemplateformfieldgroupLabel',
        'iEzsigntemplateformfieldgroupStep' => 'iEzsigntemplateformfieldgroupStep',
        'sEzsigntemplateformfieldgroupDefaultvalue' => 'sEzsigntemplateformfieldgroupDefaultvalue',
        'iEzsigntemplateformfieldgroupFilledmin' => 'iEzsigntemplateformfieldgroupFilledmin',
        'iEzsigntemplateformfieldgroupFilledmax' => 'iEzsigntemplateformfieldgroupFilledmax',
        'bEzsigntemplateformfieldgroupReadonly' => 'bEzsigntemplateformfieldgroupReadonly',
        'iEzsigntemplateformfieldgroupMaxlength' => 'iEzsigntemplateformfieldgroupMaxlength',
        'bEzsigntemplateformfieldgroupEncrypted' => 'bEzsigntemplateformfieldgroupEncrypted',
        'sEzsigntemplateformfieldgroupRegexp' => 'sEzsigntemplateformfieldgroupRegexp',
        'tEzsigntemplateformfieldgroupTooltip' => 'tEzsigntemplateformfieldgroupTooltip',
        'eEzsigntemplateformfieldgroupTooltipposition' => 'eEzsigntemplateformfieldgroupTooltipposition'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pkiEzsigntemplateformfieldgroupID' => 'setPkiEzsigntemplateformfieldgroupID',
        'fkiEzsigntemplatedocumentID' => 'setFkiEzsigntemplatedocumentID',
        'eEzsigntemplateformfieldgroupType' => 'setEEzsigntemplateformfieldgroupType',
        'eEzsigntemplateformfieldgroupSignerrequirement' => 'setEEzsigntemplateformfieldgroupSignerrequirement',
        'sEzsigntemplateformfieldgroupLabel' => 'setSEzsigntemplateformfieldgroupLabel',
        'iEzsigntemplateformfieldgroupStep' => 'setIEzsigntemplateformfieldgroupStep',
        'sEzsigntemplateformfieldgroupDefaultvalue' => 'setSEzsigntemplateformfieldgroupDefaultvalue',
        'iEzsigntemplateformfieldgroupFilledmin' => 'setIEzsigntemplateformfieldgroupFilledmin',
        'iEzsigntemplateformfieldgroupFilledmax' => 'setIEzsigntemplateformfieldgroupFilledmax',
        'bEzsigntemplateformfieldgroupReadonly' => 'setBEzsigntemplateformfieldgroupReadonly',
        'iEzsigntemplateformfieldgroupMaxlength' => 'setIEzsigntemplateformfieldgroupMaxlength',
        'bEzsigntemplateformfieldgroupEncrypted' => 'setBEzsigntemplateformfieldgroupEncrypted',
        'sEzsigntemplateformfieldgroupRegexp' => 'setSEzsigntemplateformfieldgroupRegexp',
        'tEzsigntemplateformfieldgroupTooltip' => 'setTEzsigntemplateformfieldgroupTooltip',
        'eEzsigntemplateformfieldgroupTooltipposition' => 'setEEzsigntemplateformfieldgroupTooltipposition'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pkiEzsigntemplateformfieldgroupID' => 'getPkiEzsigntemplateformfieldgroupID',
        'fkiEzsigntemplatedocumentID' => 'getFkiEzsigntemplatedocumentID',
        'eEzsigntemplateformfieldgroupType' => 'getEEzsigntemplateformfieldgroupType',
        'eEzsigntemplateformfieldgroupSignerrequirement' => 'getEEzsigntemplateformfieldgroupSignerrequirement',
        'sEzsigntemplateformfieldgroupLabel' => 'getSEzsigntemplateformfieldgroupLabel',
        'iEzsigntemplateformfieldgroupStep' => 'getIEzsigntemplateformfieldgroupStep',
        'sEzsigntemplateformfieldgroupDefaultvalue' => 'getSEzsigntemplateformfieldgroupDefaultvalue',
        'iEzsigntemplateformfieldgroupFilledmin' => 'getIEzsigntemplateformfieldgroupFilledmin',
        'iEzsigntemplateformfieldgroupFilledmax' => 'getIEzsigntemplateformfieldgroupFilledmax',
        'bEzsigntemplateformfieldgroupReadonly' => 'getBEzsigntemplateformfieldgroupReadonly',
        'iEzsigntemplateformfieldgroupMaxlength' => 'getIEzsigntemplateformfieldgroupMaxlength',
        'bEzsigntemplateformfieldgroupEncrypted' => 'getBEzsigntemplateformfieldgroupEncrypted',
        'sEzsigntemplateformfieldgroupRegexp' => 'getSEzsigntemplateformfieldgroupRegexp',
        'tEzsigntemplateformfieldgroupTooltip' => 'getTEzsigntemplateformfieldgroupTooltip',
        'eEzsigntemplateformfieldgroupTooltipposition' => 'getEEzsigntemplateformfieldgroupTooltipposition'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pkiEzsigntemplateformfieldgroupID'] = $data['pkiEzsigntemplateformfieldgroupID'] ?? null;
        $this->container['fkiEzsigntemplatedocumentID'] = $data['fkiEzsigntemplatedocumentID'] ?? null;
        $this->container['eEzsigntemplateformfieldgroupType'] = $data['eEzsigntemplateformfieldgroupType'] ?? null;
        $this->container['eEzsigntemplateformfieldgroupSignerrequirement'] = $data['eEzsigntemplateformfieldgroupSignerrequirement'] ?? null;
        $this->container['sEzsigntemplateformfieldgroupLabel'] = $data['sEzsigntemplateformfieldgroupLabel'] ?? null;
        $this->container['iEzsigntemplateformfieldgroupStep'] = $data['iEzsigntemplateformfieldgroupStep'] ?? null;
        $this->container['sEzsigntemplateformfieldgroupDefaultvalue'] = $data['sEzsigntemplateformfieldgroupDefaultvalue'] ?? null;
        $this->container['iEzsigntemplateformfieldgroupFilledmin'] = $data['iEzsigntemplateformfieldgroupFilledmin'] ?? null;
        $this->container['iEzsigntemplateformfieldgroupFilledmax'] = $data['iEzsigntemplateformfieldgroupFilledmax'] ?? null;
        $this->container['bEzsigntemplateformfieldgroupReadonly'] = $data['bEzsigntemplateformfieldgroupReadonly'] ?? null;
        $this->container['iEzsigntemplateformfieldgroupMaxlength'] = $data['iEzsigntemplateformfieldgroupMaxlength'] ?? null;
        $this->container['bEzsigntemplateformfieldgroupEncrypted'] = $data['bEzsigntemplateformfieldgroupEncrypted'] ?? null;
        $this->container['sEzsigntemplateformfieldgroupRegexp'] = $data['sEzsigntemplateformfieldgroupRegexp'] ?? null;
        $this->container['tEzsigntemplateformfieldgroupTooltip'] = $data['tEzsigntemplateformfieldgroupTooltip'] ?? null;
        $this->container['eEzsigntemplateformfieldgroupTooltipposition'] = $data['eEzsigntemplateformfieldgroupTooltipposition'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['fkiEzsigntemplatedocumentID'] === null) {
            $invalidProperties[] = "'fkiEzsigntemplatedocumentID' can't be null";
        }
        if ($this->container['eEzsigntemplateformfieldgroupType'] === null) {
            $invalidProperties[] = "'eEzsigntemplateformfieldgroupType' can't be null";
        }
        if ($this->container['eEzsigntemplateformfieldgroupSignerrequirement'] === null) {
            $invalidProperties[] = "'eEzsigntemplateformfieldgroupSignerrequirement' can't be null";
        }
        if ($this->container['sEzsigntemplateformfieldgroupLabel'] === null) {
            $invalidProperties[] = "'sEzsigntemplateformfieldgroupLabel' can't be null";
        }
        if ($this->container['iEzsigntemplateformfieldgroupStep'] === null) {
            $invalidProperties[] = "'iEzsigntemplateformfieldgroupStep' can't be null";
        }
        if ($this->container['sEzsigntemplateformfieldgroupDefaultvalue'] === null) {
            $invalidProperties[] = "'sEzsigntemplateformfieldgroupDefaultvalue' can't be null";
        }
        if ($this->container['iEzsigntemplateformfieldgroupFilledmin'] === null) {
            $invalidProperties[] = "'iEzsigntemplateformfieldgroupFilledmin' can't be null";
        }
        if ($this->container['iEzsigntemplateformfieldgroupFilledmax'] === null) {
            $invalidProperties[] = "'iEzsigntemplateformfieldgroupFilledmax' can't be null";
        }
        if ($this->container['bEzsigntemplateformfieldgroupReadonly'] === null) {
            $invalidProperties[] = "'bEzsigntemplateformfieldgroupReadonly' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pkiEzsigntemplateformfieldgroupID
     *
     * @return int|null
     */
    public function getPkiEzsigntemplateformfieldgroupID()
    {
        return $this->container['pkiEzsigntemplateformfieldgroupID'];
    }

    /**
     * Sets pkiEzsigntemplateformfieldgroupID
     *
     * @param int|null $pkiEzsigntemplateformfieldgroupID The unique ID of the Ezsigntemplateformfieldgroup
     *
     * @return self
     */
    public function setPkiEzsigntemplateformfieldgroupID($pkiEzsigntemplateformfieldgroupID)
    {
        $this->container['pkiEzsigntemplateformfieldgroupID'] = $pkiEzsigntemplateformfieldgroupID;

        return $this;
    }

    /**
     * Gets fkiEzsigntemplatedocumentID
     *
     * @return int
     */
    public function getFkiEzsigntemplatedocumentID()
    {
        return $this->container['fkiEzsigntemplatedocumentID'];
    }

    /**
     * Sets fkiEzsigntemplatedocumentID
     *
     * @param int $fkiEzsigntemplatedocumentID The unique ID of the Ezsigntemplatedocument
     *
     * @return self
     */
    public function setFkiEzsigntemplatedocumentID($fkiEzsigntemplatedocumentID)
    {
        $this->container['fkiEzsigntemplatedocumentID'] = $fkiEzsigntemplatedocumentID;

        return $this;
    }

    /**
     * Gets eEzsigntemplateformfieldgroupType
     *
     * @return \eZmaxAPI\Model\FieldEEzsigntemplateformfieldgroupType
     */
    public function getEEzsigntemplateformfieldgroupType()
    {
        return $this->container['eEzsigntemplateformfieldgroupType'];
    }

    /**
     * Sets eEzsigntemplateformfieldgroupType
     *
     * @param \eZmaxAPI\Model\FieldEEzsigntemplateformfieldgroupType $eEzsigntemplateformfieldgroupType eEzsigntemplateformfieldgroupType
     *
     * @return self
     */
    public function setEEzsigntemplateformfieldgroupType($eEzsigntemplateformfieldgroupType)
    {
        $this->container['eEzsigntemplateformfieldgroupType'] = $eEzsigntemplateformfieldgroupType;

        return $this;
    }

    /**
     * Gets eEzsigntemplateformfieldgroupSignerrequirement
     *
     * @return \eZmaxAPI\Model\FieldEEzsigntemplateformfieldgroupSignerrequirement
     */
    public function getEEzsigntemplateformfieldgroupSignerrequirement()
    {
        return $this->container['eEzsigntemplateformfieldgroupSignerrequirement'];
    }

    /**
     * Sets eEzsigntemplateformfieldgroupSignerrequirement
     *
     * @param \eZmaxAPI\Model\FieldEEzsigntemplateformfieldgroupSignerrequirement $eEzsigntemplateformfieldgroupSignerrequirement eEzsigntemplateformfieldgroupSignerrequirement
     *
     * @return self
     */
    public function setEEzsigntemplateformfieldgroupSignerrequirement($eEzsigntemplateformfieldgroupSignerrequirement)
    {
        $this->container['eEzsigntemplateformfieldgroupSignerrequirement'] = $eEzsigntemplateformfieldgroupSignerrequirement;

        return $this;
    }

    /**
     * Gets sEzsigntemplateformfieldgroupLabel
     *
     * @return string
     */
    public function getSEzsigntemplateformfieldgroupLabel()
    {
        return $this->container['sEzsigntemplateformfieldgroupLabel'];
    }

    /**
     * Sets sEzsigntemplateformfieldgroupLabel
     *
     * @param string $sEzsigntemplateformfieldgroupLabel The Label for the Ezsigntemplateformfieldgroup
     *
     * @return self
     */
    public function setSEzsigntemplateformfieldgroupLabel($sEzsigntemplateformfieldgroupLabel)
    {
        $this->container['sEzsigntemplateformfieldgroupLabel'] = $sEzsigntemplateformfieldgroupLabel;

        return $this;
    }

    /**
     * Gets iEzsigntemplateformfieldgroupStep
     *
     * @return int
     */
    public function getIEzsigntemplateformfieldgroupStep()
    {
        return $this->container['iEzsigntemplateformfieldgroupStep'];
    }

    /**
     * Sets iEzsigntemplateformfieldgroupStep
     *
     * @param int $iEzsigntemplateformfieldgroupStep The step when the Ezsigntemplatesigner will be invited to fill the form fields
     *
     * @return self
     */
    public function setIEzsigntemplateformfieldgroupStep($iEzsigntemplateformfieldgroupStep)
    {
        $this->container['iEzsigntemplateformfieldgroupStep'] = $iEzsigntemplateformfieldgroupStep;

        return $this;
    }

    /**
     * Gets sEzsigntemplateformfieldgroupDefaultvalue
     *
     * @return string
     */
    public function getSEzsigntemplateformfieldgroupDefaultvalue()
    {
        return $this->container['sEzsigntemplateformfieldgroupDefaultvalue'];
    }

    /**
     * Sets sEzsigntemplateformfieldgroupDefaultvalue
     *
     * @param string $sEzsigntemplateformfieldgroupDefaultvalue The default value for the Ezsigntemplateformfieldgroup
     *
     * @return self
     */
    public function setSEzsigntemplateformfieldgroupDefaultvalue($sEzsigntemplateformfieldgroupDefaultvalue)
    {
        $this->container['sEzsigntemplateformfieldgroupDefaultvalue'] = $sEzsigntemplateformfieldgroupDefaultvalue;

        return $this;
    }

    /**
     * Gets iEzsigntemplateformfieldgroupFilledmin
     *
     * @return int
     */
    public function getIEzsigntemplateformfieldgroupFilledmin()
    {
        return $this->container['iEzsigntemplateformfieldgroupFilledmin'];
    }

    /**
     * Sets iEzsigntemplateformfieldgroupFilledmin
     *
     * @param int $iEzsigntemplateformfieldgroupFilledmin The minimum number of Ezsigntemplateformfield that must be filled in the Ezsigntemplateformfieldgroup
     *
     * @return self
     */
    public function setIEzsigntemplateformfieldgroupFilledmin($iEzsigntemplateformfieldgroupFilledmin)
    {
        $this->container['iEzsigntemplateformfieldgroupFilledmin'] = $iEzsigntemplateformfieldgroupFilledmin;

        return $this;
    }

    /**
     * Gets iEzsigntemplateformfieldgroupFilledmax
     *
     * @return int
     */
    public function getIEzsigntemplateformfieldgroupFilledmax()
    {
        return $this->container['iEzsigntemplateformfieldgroupFilledmax'];
    }

    /**
     * Sets iEzsigntemplateformfieldgroupFilledmax
     *
     * @param int $iEzsigntemplateformfieldgroupFilledmax The maximum number of Ezsigntemplateformfield that must be filled in the Ezsigntemplateformfieldgroup
     *
     * @return self
     */
    public function setIEzsigntemplateformfieldgroupFilledmax($iEzsigntemplateformfieldgroupFilledmax)
    {
        $this->container['iEzsigntemplateformfieldgroupFilledmax'] = $iEzsigntemplateformfieldgroupFilledmax;

        return $this;
    }

    /**
     * Gets bEzsigntemplateformfieldgroupReadonly
     *
     * @return bool
     */
    public function getBEzsigntemplateformfieldgroupReadonly()
    {
        return $this->container['bEzsigntemplateformfieldgroupReadonly'];
    }

    /**
     * Sets bEzsigntemplateformfieldgroupReadonly
     *
     * @param bool $bEzsigntemplateformfieldgroupReadonly Whether the Ezsigntemplateformfieldgroup is read only or not.
     *
     * @return self
     */
    public function setBEzsigntemplateformfieldgroupReadonly($bEzsigntemplateformfieldgroupReadonly)
    {
        $this->container['bEzsigntemplateformfieldgroupReadonly'] = $bEzsigntemplateformfieldgroupReadonly;

        return $this;
    }

    /**
     * Gets iEzsigntemplateformfieldgroupMaxlength
     *
     * @return int|null
     */
    public function getIEzsigntemplateformfieldgroupMaxlength()
    {
        return $this->container['iEzsigntemplateformfieldgroupMaxlength'];
    }

    /**
     * Sets iEzsigntemplateformfieldgroupMaxlength
     *
     * @param int|null $iEzsigntemplateformfieldgroupMaxlength The maximum length for the value in the Ezsigntemplateformfieldgroup  This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**
     *
     * @return self
     */
    public function setIEzsigntemplateformfieldgroupMaxlength($iEzsigntemplateformfieldgroupMaxlength)
    {
        $this->container['iEzsigntemplateformfieldgroupMaxlength'] = $iEzsigntemplateformfieldgroupMaxlength;

        return $this;
    }

    /**
     * Gets bEzsigntemplateformfieldgroupEncrypted
     *
     * @return bool|null
     */
    public function getBEzsigntemplateformfieldgroupEncrypted()
    {
        return $this->container['bEzsigntemplateformfieldgroupEncrypted'];
    }

    /**
     * Sets bEzsigntemplateformfieldgroupEncrypted
     *
     * @param bool|null $bEzsigntemplateformfieldgroupEncrypted Whether the Ezsigntemplateformfieldgroup is encrypted in the database or not. Encrypted values are not displayed on the Ezsigndocument. This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**
     *
     * @return self
     */
    public function setBEzsigntemplateformfieldgroupEncrypted($bEzsigntemplateformfieldgroupEncrypted)
    {
        $this->container['bEzsigntemplateformfieldgroupEncrypted'] = $bEzsigntemplateformfieldgroupEncrypted;

        return $this;
    }

    /**
     * Gets sEzsigntemplateformfieldgroupRegexp
     *
     * @return string|null
     */
    public function getSEzsigntemplateformfieldgroupRegexp()
    {
        return $this->container['sEzsigntemplateformfieldgroupRegexp'];
    }

    /**
     * Sets sEzsigntemplateformfieldgroupRegexp
     *
     * @param string|null $sEzsigntemplateformfieldgroupRegexp A regular expression to indicate what values are acceptable for the Ezsigntemplateformfieldgroup.  This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**
     *
     * @return self
     */
    public function setSEzsigntemplateformfieldgroupRegexp($sEzsigntemplateformfieldgroupRegexp)
    {
        $this->container['sEzsigntemplateformfieldgroupRegexp'] = $sEzsigntemplateformfieldgroupRegexp;

        return $this;
    }

    /**
     * Gets tEzsigntemplateformfieldgroupTooltip
     *
     * @return string|null
     */
    public function getTEzsigntemplateformfieldgroupTooltip()
    {
        return $this->container['tEzsigntemplateformfieldgroupTooltip'];
    }

    /**
     * Sets tEzsigntemplateformfieldgroupTooltip
     *
     * @param string|null $tEzsigntemplateformfieldgroupTooltip A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplateformfieldgroup
     *
     * @return self
     */
    public function setTEzsigntemplateformfieldgroupTooltip($tEzsigntemplateformfieldgroupTooltip)
    {
        $this->container['tEzsigntemplateformfieldgroupTooltip'] = $tEzsigntemplateformfieldgroupTooltip;

        return $this;
    }

    /**
     * Gets eEzsigntemplateformfieldgroupTooltipposition
     *
     * @return \eZmaxAPI\Model\FieldEEzsigntemplateformfieldgroupTooltipposition|null
     */
    public function getEEzsigntemplateformfieldgroupTooltipposition()
    {
        return $this->container['eEzsigntemplateformfieldgroupTooltipposition'];
    }

    /**
     * Sets eEzsigntemplateformfieldgroupTooltipposition
     *
     * @param \eZmaxAPI\Model\FieldEEzsigntemplateformfieldgroupTooltipposition|null $eEzsigntemplateformfieldgroupTooltipposition eEzsigntemplateformfieldgroupTooltipposition
     *
     * @return self
     */
    public function setEEzsigntemplateformfieldgroupTooltipposition($eEzsigntemplateformfieldgroupTooltipposition)
    {
        $this->container['eEzsigntemplateformfieldgroupTooltipposition'] = $eEzsigntemplateformfieldgroupTooltipposition;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


