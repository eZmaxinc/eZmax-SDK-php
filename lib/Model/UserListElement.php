<?php
/**
 * UserListElement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * UserListElement Class Doc Comment
 *
 * @category Class
 * @description A User List Element
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserListElement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'user-ListElement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pkiUserID' => 'int',
        'sUserFirstname' => 'string',
        'sUserLastname' => 'string',
        'sUserLoginname' => 'string',
        'bUserIsactive' => 'bool',
        'eUserType' => '\eZmaxAPI\Model\FieldEUserType',
        'eUserOrigin' => '\eZmaxAPI\Model\FieldEUserOrigin',
        'eUserEzsignaccess' => '\eZmaxAPI\Model\FieldEUserEzsignaccess',
        'dtUserEzsignprepaidexpiration' => 'string',
        'sEmailAddress' => 'string',
        'sUserJobtitle' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pkiUserID' => null,
        'sUserFirstname' => null,
        'sUserLastname' => null,
        'sUserLoginname' => null,
        'bUserIsactive' => null,
        'eUserType' => null,
        'eUserOrigin' => null,
        'eUserEzsignaccess' => null,
        'dtUserEzsignprepaidexpiration' => null,
        'sEmailAddress' => null,
        'sUserJobtitle' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pkiUserID' => false,
		'sUserFirstname' => false,
		'sUserLastname' => false,
		'sUserLoginname' => false,
		'bUserIsactive' => false,
		'eUserType' => false,
		'eUserOrigin' => false,
		'eUserEzsignaccess' => false,
		'dtUserEzsignprepaidexpiration' => false,
		'sEmailAddress' => false,
		'sUserJobtitle' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pkiUserID' => 'pkiUserID',
        'sUserFirstname' => 'sUserFirstname',
        'sUserLastname' => 'sUserLastname',
        'sUserLoginname' => 'sUserLoginname',
        'bUserIsactive' => 'bUserIsactive',
        'eUserType' => 'eUserType',
        'eUserOrigin' => 'eUserOrigin',
        'eUserEzsignaccess' => 'eUserEzsignaccess',
        'dtUserEzsignprepaidexpiration' => 'dtUserEzsignprepaidexpiration',
        'sEmailAddress' => 'sEmailAddress',
        'sUserJobtitle' => 'sUserJobtitle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pkiUserID' => 'setPkiUserID',
        'sUserFirstname' => 'setSUserFirstname',
        'sUserLastname' => 'setSUserLastname',
        'sUserLoginname' => 'setSUserLoginname',
        'bUserIsactive' => 'setBUserIsactive',
        'eUserType' => 'setEUserType',
        'eUserOrigin' => 'setEUserOrigin',
        'eUserEzsignaccess' => 'setEUserEzsignaccess',
        'dtUserEzsignprepaidexpiration' => 'setDtUserEzsignprepaidexpiration',
        'sEmailAddress' => 'setSEmailAddress',
        'sUserJobtitle' => 'setSUserJobtitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pkiUserID' => 'getPkiUserID',
        'sUserFirstname' => 'getSUserFirstname',
        'sUserLastname' => 'getSUserLastname',
        'sUserLoginname' => 'getSUserLoginname',
        'bUserIsactive' => 'getBUserIsactive',
        'eUserType' => 'getEUserType',
        'eUserOrigin' => 'getEUserOrigin',
        'eUserEzsignaccess' => 'getEUserEzsignaccess',
        'dtUserEzsignprepaidexpiration' => 'getDtUserEzsignprepaidexpiration',
        'sEmailAddress' => 'getSEmailAddress',
        'sUserJobtitle' => 'getSUserJobtitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pkiUserID', $data ?? [], null);
        $this->setIfExists('sUserFirstname', $data ?? [], null);
        $this->setIfExists('sUserLastname', $data ?? [], null);
        $this->setIfExists('sUserLoginname', $data ?? [], null);
        $this->setIfExists('bUserIsactive', $data ?? [], null);
        $this->setIfExists('eUserType', $data ?? [], null);
        $this->setIfExists('eUserOrigin', $data ?? [], null);
        $this->setIfExists('eUserEzsignaccess', $data ?? [], null);
        $this->setIfExists('dtUserEzsignprepaidexpiration', $data ?? [], null);
        $this->setIfExists('sEmailAddress', $data ?? [], null);
        $this->setIfExists('sUserJobtitle', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pkiUserID'] === null) {
            $invalidProperties[] = "'pkiUserID' can't be null";
        }
        if (($this->container['pkiUserID'] < 0)) {
            $invalidProperties[] = "invalid value for 'pkiUserID', must be bigger than or equal to 0.";
        }

        if ($this->container['sUserFirstname'] === null) {
            $invalidProperties[] = "'sUserFirstname' can't be null";
        }
        if ($this->container['sUserLastname'] === null) {
            $invalidProperties[] = "'sUserLastname' can't be null";
        }
        if ($this->container['sUserLoginname'] === null) {
            $invalidProperties[] = "'sUserLoginname' can't be null";
        }
//        if (!preg_match("/^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,20})|([a-zA-Z0-9]){1,32})$/", $this->container['sUserLoginname'])) {
        if (!is_null($this->container['sUserLoginname']) && !preg_match("/(*UTF8)^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,20})|([a-zA-Z0-9]){1,32})$/", $this->container['sUserLoginname'])) {
            $invalidProperties[] = "invalid value for 'sUserLoginname', must be conform to the pattern /^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,20})|([a-zA-Z0-9]){1,32})$/.";
        }

        if ($this->container['bUserIsactive'] === null) {
            $invalidProperties[] = "'bUserIsactive' can't be null";
        }
        if ($this->container['eUserType'] === null) {
            $invalidProperties[] = "'eUserType' can't be null";
        }
        if ($this->container['eUserOrigin'] === null) {
            $invalidProperties[] = "'eUserOrigin' can't be null";
        }
        if ($this->container['eUserEzsignaccess'] === null) {
            $invalidProperties[] = "'eUserEzsignaccess' can't be null";
        }
//        if (!is_null($this->container['dtUserEzsignprepaidexpiration']) && !preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", $this->container['dtUserEzsignprepaidexpiration'])) {
        if (!is_null($this->container['dtUserEzsignprepaidexpiration']) && !preg_match("/(*UTF8)^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", $this->container['dtUserEzsignprepaidexpiration'])) {
            $invalidProperties[] = "invalid value for 'dtUserEzsignprepaidexpiration', must be conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/.";
        }

        if ($this->container['sEmailAddress'] === null) {
            $invalidProperties[] = "'sEmailAddress' can't be null";
        }
//        if (!is_null($this->container['sUserJobtitle']) && !preg_match("/^.{0,50}$/", $this->container['sUserJobtitle'])) {
        if (!is_null($this->container['sUserJobtitle']) && !preg_match("/(*UTF8)^.{0,50}$/", $this->container['sUserJobtitle'])) {
            $invalidProperties[] = "invalid value for 'sUserJobtitle', must be conform to the pattern /^.{0,50}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pkiUserID
     *
     * @return int
     */
    public function getPkiUserID()
    {
        return $this->container['pkiUserID'];
    }

    /**
     * Sets pkiUserID
     *
     * @param int $pkiUserID The unique ID of the User
     *
     * @return self
     */
    public function setPkiUserID($pkiUserID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($pkiUserID)) {
            //throw new \InvalidArgumentException('non-nullable pkiUserID cannot be null');
        //}

//        if (($pkiUserID < 0)) {
        if (($pkiUserID < 0)) {
            throw new \InvalidArgumentException('invalid value for $pkiUserID when calling UserListElement., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['pkiUserID'] = $pkiUserID;
        $this->container['pkiUserID'] = (is_null($pkiUserID) ? null : (int) $pkiUserID);

        return $this;
    }

    /**
     * Gets sUserFirstname
     *
     * @return string
     */
    public function getSUserFirstname()
    {
        return is_null($this->container['sUserFirstname']) ? null : trim($this->container['sUserFirstname']);
    }

    /**
     * Sets sUserFirstname
     *
     * @param string $sUserFirstname The first name of the user
     *
     * @return self
     */
    public function setSUserFirstname($sUserFirstname)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sUserFirstname)) {
            //throw new \InvalidArgumentException('non-nullable sUserFirstname cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sUserFirstname'] = $sUserFirstname;
        $this->container['sUserFirstname'] = (is_null($sUserFirstname) ? null : trim((string) $sUserFirstname));

        return $this;
    }

    /**
     * Gets sUserLastname
     *
     * @return string
     */
    public function getSUserLastname()
    {
        return is_null($this->container['sUserLastname']) ? null : trim($this->container['sUserLastname']);
    }

    /**
     * Sets sUserLastname
     *
     * @param string $sUserLastname The last name of the user
     *
     * @return self
     */
    public function setSUserLastname($sUserLastname)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sUserLastname)) {
            //throw new \InvalidArgumentException('non-nullable sUserLastname cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sUserLastname'] = $sUserLastname;
        $this->container['sUserLastname'] = (is_null($sUserLastname) ? null : trim((string) $sUserLastname));

        return $this;
    }

    /**
     * Gets sUserLoginname
     *
     * @return string
     */
    public function getSUserLoginname()
    {
        return is_null($this->container['sUserLoginname']) ? null : trim($this->container['sUserLoginname']);
    }

    /**
     * Sets sUserLoginname
     *
     * @param string $sUserLoginname The login name of the User.
     *
     * @return self
     */
    public function setSUserLoginname($sUserLoginname)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sUserLoginname)) {
            //throw new \InvalidArgumentException('non-nullable sUserLoginname cannot be null');
        //}

//        if ((!preg_match("/^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,20})|([a-zA-Z0-9]){1,32})$/", ObjectSerializer::toString($sUserLoginname)))) {
        if (!is_null($sUserLoginname) && (!preg_match("/(*UTF8)^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,20})|([a-zA-Z0-9]){1,32})$/", ObjectSerializer::toString($sUserLoginname)))) {
            throw new \InvalidArgumentException("invalid value for \$sUserLoginname when calling UserListElement., must conform to the pattern /^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,20})|([a-zA-Z0-9]){1,32})$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sUserLoginname'] = $sUserLoginname;
        $this->container['sUserLoginname'] = (is_null($sUserLoginname) ? null : trim((string) $sUserLoginname));

        return $this;
    }

    /**
     * Gets bUserIsactive
     *
     * @return bool
     */
    public function getBUserIsactive()
    {
        return $this->container['bUserIsactive'];
    }

    /**
     * Sets bUserIsactive
     *
     * @param bool $bUserIsactive Whether the User is active or not
     *
     * @return self
     */
    public function setBUserIsactive($bUserIsactive)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bUserIsactive)) {
            //throw new \InvalidArgumentException('non-nullable bUserIsactive cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bUserIsactive'] = $bUserIsactive;
        $this->container['bUserIsactive'] = (is_null($bUserIsactive) ? null : (bool) $bUserIsactive);

        return $this;
    }

    /**
     * Gets eUserType
     *
     * @return \eZmaxAPI\Model\FieldEUserType
     */
    public function getEUserType()
    {
        return $this->container['eUserType'];
    }

    /**
     * Sets eUserType
     *
     * @param \eZmaxAPI\Model\FieldEUserType $eUserType eUserType
     *
     * @return self
     */
    public function setEUserType($eUserType)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eUserType)) {
            //throw new \InvalidArgumentException('non-nullable eUserType cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eUserType'] = $eUserType;
        $this->container['eUserType'] = $eUserType;

        return $this;
    }

    /**
     * Gets eUserOrigin
     *
     * @return \eZmaxAPI\Model\FieldEUserOrigin
     */
    public function getEUserOrigin()
    {
        return $this->container['eUserOrigin'];
    }

    /**
     * Sets eUserOrigin
     *
     * @param \eZmaxAPI\Model\FieldEUserOrigin $eUserOrigin eUserOrigin
     *
     * @return self
     */
    public function setEUserOrigin($eUserOrigin)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eUserOrigin)) {
            //throw new \InvalidArgumentException('non-nullable eUserOrigin cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eUserOrigin'] = $eUserOrigin;
        $this->container['eUserOrigin'] = $eUserOrigin;

        return $this;
    }

    /**
     * Gets eUserEzsignaccess
     *
     * @return \eZmaxAPI\Model\FieldEUserEzsignaccess
     */
    public function getEUserEzsignaccess()
    {
        return $this->container['eUserEzsignaccess'];
    }

    /**
     * Sets eUserEzsignaccess
     *
     * @param \eZmaxAPI\Model\FieldEUserEzsignaccess $eUserEzsignaccess eUserEzsignaccess
     *
     * @return self
     */
    public function setEUserEzsignaccess($eUserEzsignaccess)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eUserEzsignaccess)) {
            //throw new \InvalidArgumentException('non-nullable eUserEzsignaccess cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eUserEzsignaccess'] = $eUserEzsignaccess;
        $this->container['eUserEzsignaccess'] = $eUserEzsignaccess;

        return $this;
    }

    /**
     * Gets dtUserEzsignprepaidexpiration
     *
     * @return string|null
     */
    public function getDtUserEzsignprepaidexpiration()
    {
        return is_null($this->container['dtUserEzsignprepaidexpiration']) ? null : trim($this->container['dtUserEzsignprepaidexpiration']);
    }

    /**
     * Sets dtUserEzsignprepaidexpiration
     *
     * @param string|null $dtUserEzsignprepaidexpiration The eZsign prepaid expiration date
     *
     * @return self
     */
    public function setDtUserEzsignprepaidexpiration($dtUserEzsignprepaidexpiration)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtUserEzsignprepaidexpiration)) {
            //throw new \InvalidArgumentException('non-nullable dtUserEzsignprepaidexpiration cannot be null');
        //}

//        if ((!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", ObjectSerializer::toString($dtUserEzsignprepaidexpiration)))) {
        if (!is_null($dtUserEzsignprepaidexpiration) && (!preg_match("/(*UTF8)^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", ObjectSerializer::toString($dtUserEzsignprepaidexpiration)))) {
            throw new \InvalidArgumentException("invalid value for \$dtUserEzsignprepaidexpiration when calling UserListElement., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtUserEzsignprepaidexpiration'] = $dtUserEzsignprepaidexpiration;
        $this->container['dtUserEzsignprepaidexpiration'] = (is_null($dtUserEzsignprepaidexpiration) ? null : trim((string) $dtUserEzsignprepaidexpiration));

        return $this;
    }

    /**
     * Gets sEmailAddress
     *
     * @return string
     */
    public function getSEmailAddress()
    {
        return is_null($this->container['sEmailAddress']) ? null : trim($this->container['sEmailAddress']);
    }

    /**
     * Sets sEmailAddress
     *
     * @param string $sEmailAddress The email address.
     *
     * @return self
     */
    public function setSEmailAddress($sEmailAddress)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sEmailAddress)) {
            //throw new \InvalidArgumentException('non-nullable sEmailAddress cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sEmailAddress'] = $sEmailAddress;
        $this->container['sEmailAddress'] = (is_null($sEmailAddress) ? null : trim((string) $sEmailAddress));

        return $this;
    }

    /**
     * Gets sUserJobtitle
     *
     * @return string|null
     */
    public function getSUserJobtitle()
    {
        return is_null($this->container['sUserJobtitle']) ? null : trim($this->container['sUserJobtitle']);
    }

    /**
     * Sets sUserJobtitle
     *
     * @param string|null $sUserJobtitle The job title of the user
     *
     * @return self
     */
    public function setSUserJobtitle($sUserJobtitle)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sUserJobtitle)) {
            //throw new \InvalidArgumentException('non-nullable sUserJobtitle cannot be null');
        //}

//        if ((!preg_match("/^.{0,50}$/", ObjectSerializer::toString($sUserJobtitle)))) {
        if (!is_null($sUserJobtitle) && (!preg_match("/(*UTF8)^.{0,50}$/", ObjectSerializer::toString($sUserJobtitle)))) {
            throw new \InvalidArgumentException("invalid value for \$sUserJobtitle when calling UserListElement., must conform to the pattern /^.{0,50}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sUserJobtitle'] = $sUserJobtitle;
        $this->container['sUserJobtitle'] = (is_null($sUserJobtitle) ? null : trim((string) $sUserJobtitle));

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


