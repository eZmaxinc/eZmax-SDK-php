<?php
/**
 * ObjEzsignfolder
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  eZmaxAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition
 *
 * TODO Api description.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Client\Model;

use \ArrayAccess;
use \eZmaxAPI\Client\ObjectSerializer;

/**
 * ObjEzsignfolder Class Doc Comment
 *
 * @category Class
 * @description TODO
 * @package  eZmaxAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ObjEzsignfolder implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'objEzsignfolder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fkiEzsigntsarequirementID' => 'int',
        'dtEzsignfolderSentdate' => 'int',
        'fkiEzsignfoldertypeID' => 'int',
        'fkiLanguageID' => 'int',
        'eEzsignfolderStep' => 'string',
        'pkiEzsignfolderID' => 'int',
        'sEzsignfolderDescription' => 'string',
        'tEzsignfolderNote' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'fkiEzsigntsarequirementID' => null,
        'dtEzsignfolderSentdate' => null,
        'fkiEzsignfoldertypeID' => null,
        'fkiLanguageID' => null,
        'eEzsignfolderStep' => null,
        'pkiEzsignfolderID' => null,
        'sEzsignfolderDescription' => null,
        'tEzsignfolderNote' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fkiEzsigntsarequirementID' => 'fkiEzsigntsarequirementID',
        'dtEzsignfolderSentdate' => 'dtEzsignfolderSentdate',
        'fkiEzsignfoldertypeID' => 'fkiEzsignfoldertypeID',
        'fkiLanguageID' => 'fkiLanguageID',
        'eEzsignfolderStep' => 'eEzsignfolderStep',
        'pkiEzsignfolderID' => 'pkiEzsignfolderID',
        'sEzsignfolderDescription' => 'sEzsignfolderDescription',
        'tEzsignfolderNote' => 'tEzsignfolderNote'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fkiEzsigntsarequirementID' => 'setFkiEzsigntsarequirementID',
        'dtEzsignfolderSentdate' => 'setDtEzsignfolderSentdate',
        'fkiEzsignfoldertypeID' => 'setFkiEzsignfoldertypeID',
        'fkiLanguageID' => 'setFkiLanguageID',
        'eEzsignfolderStep' => 'setEEzsignfolderStep',
        'pkiEzsignfolderID' => 'setPkiEzsignfolderID',
        'sEzsignfolderDescription' => 'setSEzsignfolderDescription',
        'tEzsignfolderNote' => 'setTEzsignfolderNote'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fkiEzsigntsarequirementID' => 'getFkiEzsigntsarequirementID',
        'dtEzsignfolderSentdate' => 'getDtEzsignfolderSentdate',
        'fkiEzsignfoldertypeID' => 'getFkiEzsignfoldertypeID',
        'fkiLanguageID' => 'getFkiLanguageID',
        'eEzsignfolderStep' => 'getEEzsignfolderStep',
        'pkiEzsignfolderID' => 'getPkiEzsignfolderID',
        'sEzsignfolderDescription' => 'getSEzsignfolderDescription',
        'tEzsignfolderNote' => 'getTEzsignfolderNote'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const E_EZSIGNFOLDER_STEP_UNSENT = 'Unsent';
    const E_EZSIGNFOLDER_STEP_SENT = 'Sent';
    const E_EZSIGNFOLDER_STEP_PARTIALLY_SIGNED = 'PartiallySigned';
    const E_EZSIGNFOLDER_STEP_EXPIRED = 'Expired';
    const E_EZSIGNFOLDER_STEP_SIGNED = 'Signed';
    const E_EZSIGNFOLDER_STEP_SIGNEDMANUAL = 'Signedmanual';
    const E_EZSIGNFOLDER_STEP_COMPLETED = 'Completed';
    const E_EZSIGNFOLDER_STEP_ARCHIVED = 'Archived';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEEzsignfolderStepAllowableValues()
    {
        return [
            self::E_EZSIGNFOLDER_STEP_UNSENT,
            self::E_EZSIGNFOLDER_STEP_SENT,
            self::E_EZSIGNFOLDER_STEP_PARTIALLY_SIGNED,
            self::E_EZSIGNFOLDER_STEP_EXPIRED,
            self::E_EZSIGNFOLDER_STEP_SIGNED,
            self::E_EZSIGNFOLDER_STEP_SIGNEDMANUAL,
            self::E_EZSIGNFOLDER_STEP_COMPLETED,
            self::E_EZSIGNFOLDER_STEP_ARCHIVED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fkiEzsigntsarequirementID'] = isset($data['fkiEzsigntsarequirementID']) ? $data['fkiEzsigntsarequirementID'] : null;
        $this->container['dtEzsignfolderSentdate'] = isset($data['dtEzsignfolderSentdate']) ? $data['dtEzsignfolderSentdate'] : null;
        $this->container['fkiEzsignfoldertypeID'] = isset($data['fkiEzsignfoldertypeID']) ? $data['fkiEzsignfoldertypeID'] : null;
        $this->container['fkiLanguageID'] = isset($data['fkiLanguageID']) ? $data['fkiLanguageID'] : null;
        $this->container['eEzsignfolderStep'] = isset($data['eEzsignfolderStep']) ? $data['eEzsignfolderStep'] : null;
        $this->container['pkiEzsignfolderID'] = isset($data['pkiEzsignfolderID']) ? $data['pkiEzsignfolderID'] : null;
        $this->container['sEzsignfolderDescription'] = isset($data['sEzsignfolderDescription']) ? $data['sEzsignfolderDescription'] : null;
        $this->container['tEzsignfolderNote'] = isset($data['tEzsignfolderNote']) ? $data['tEzsignfolderNote'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['fkiEzsignfoldertypeID'] === null) {
            $invalidProperties[] = "'fkiEzsignfoldertypeID' can't be null";
        }
        if ($this->container['fkiLanguageID'] === null) {
            $invalidProperties[] = "'fkiLanguageID' can't be null";
        }
        $allowedValues = $this->getEEzsignfolderStepAllowableValues();
        if (!is_null($this->container['eEzsignfolderStep']) && !in_array($this->container['eEzsignfolderStep'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'eEzsignfolderStep', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['pkiEzsignfolderID'] === null) {
            $invalidProperties[] = "'pkiEzsignfolderID' can't be null";
        }
        if ($this->container['sEzsignfolderDescription'] === null) {
            $invalidProperties[] = "'sEzsignfolderDescription' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fkiEzsigntsarequirementID
     *
     * @return int|null
     */
    public function getFkiEzsigntsarequirementID()
    {
        return $this->container['fkiEzsigntsarequirementID'];
    }

    /**
     * Sets fkiEzsigntsarequirementID
     *
     * @param int|null $fkiEzsigntsarequirementID A Foreign Key to the Ezsign TSA Requirement
     *
     * @return $this
     */
    public function setFkiEzsigntsarequirementID($fkiEzsigntsarequirementID)
    {
        $this->container['fkiEzsigntsarequirementID'] = $fkiEzsigntsarequirementID;

        return $this;
    }

    /**
     * Gets dtEzsignfolderSentdate
     *
     * @return int|null
     */
    public function getDtEzsignfolderSentdate()
    {
        return $this->container['dtEzsignfolderSentdate'];
    }

    /**
     * Sets dtEzsignfolderSentdate
     *
     * @param int|null $dtEzsignfolderSentdate Date and Time when the Folder was sent out for signature.
     *
     * @return $this
     */
    public function setDtEzsignfolderSentdate($dtEzsignfolderSentdate)
    {
        $this->container['dtEzsignfolderSentdate'] = $dtEzsignfolderSentdate;

        return $this;
    }

    /**
     * Gets fkiEzsignfoldertypeID
     *
     * @return int
     */
    public function getFkiEzsignfoldertypeID()
    {
        return $this->container['fkiEzsignfoldertypeID'];
    }

    /**
     * Sets fkiEzsignfoldertypeID
     *
     * @param int $fkiEzsignfoldertypeID A Foreign Key to the Ezsign Folder Type
     *
     * @return $this
     */
    public function setFkiEzsignfoldertypeID($fkiEzsignfoldertypeID)
    {
        $this->container['fkiEzsignfoldertypeID'] = $fkiEzsignfoldertypeID;

        return $this;
    }

    /**
     * Gets fkiLanguageID
     *
     * @return int
     */
    public function getFkiLanguageID()
    {
        return $this->container['fkiLanguageID'];
    }

    /**
     * Sets fkiLanguageID
     *
     * @param int $fkiLanguageID The ID of the language, Valid values are: 1. French 2. English
     *
     * @return $this
     */
    public function setFkiLanguageID($fkiLanguageID)
    {
        $this->container['fkiLanguageID'] = $fkiLanguageID;

        return $this;
    }

    /**
     * Gets eEzsignfolderStep
     *
     * @return string|null
     */
    public function getEEzsignfolderStep()
    {
        return $this->container['eEzsignfolderStep'];
    }

    /**
     * Sets eEzsignfolderStep
     *
     * @param string|null $eEzsignfolderStep The step or status or the document
     *
     * @return $this
     */
    public function setEEzsignfolderStep($eEzsignfolderStep)
    {
        $allowedValues = $this->getEEzsignfolderStepAllowableValues();
        if (!is_null($eEzsignfolderStep) && !in_array($eEzsignfolderStep, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'eEzsignfolderStep', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eEzsignfolderStep'] = $eEzsignfolderStep;

        return $this;
    }

    /**
     * Gets pkiEzsignfolderID
     *
     * @return int
     */
    public function getPkiEzsignfolderID()
    {
        return $this->container['pkiEzsignfolderID'];
    }

    /**
     * Sets pkiEzsignfolderID
     *
     * @param int $pkiEzsignfolderID Primary Key
     *
     * @return $this
     */
    public function setPkiEzsignfolderID($pkiEzsignfolderID)
    {
        $this->container['pkiEzsignfolderID'] = $pkiEzsignfolderID;

        return $this;
    }

    /**
     * Gets sEzsignfolderDescription
     *
     * @return string
     */
    public function getSEzsignfolderDescription()
    {
        return $this->container['sEzsignfolderDescription'];
    }

    /**
     * Sets sEzsignfolderDescription
     *
     * @param string $sEzsignfolderDescription The description of the Ezsign Folder
     *
     * @return $this
     */
    public function setSEzsignfolderDescription($sEzsignfolderDescription)
    {
        $this->container['sEzsignfolderDescription'] = $sEzsignfolderDescription;

        return $this;
    }

    /**
     * Gets tEzsignfolderNote
     *
     * @return string|null
     */
    public function getTEzsignfolderNote()
    {
        return $this->container['tEzsignfolderNote'];
    }

    /**
     * Sets tEzsignfolderNote
     *
     * @param string|null $tEzsignfolderNote Somes extra notes about the eZsign Folder
     *
     * @return $this
     */
    public function setTEzsignfolderNote($tEzsignfolderNote)
    {
        $this->container['tEzsignfolderNote'] = $tEzsignfolderNote;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


