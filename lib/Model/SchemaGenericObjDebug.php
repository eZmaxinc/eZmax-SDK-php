<?php
/**
 * SchemaGenericObjDebug
 *
 * PHP version 7.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition
 *
 * TODO Api description
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SchemaGenericObjDebug Class Doc Comment
 *
 * @category Class
 * @description This is a generic debug object that is returned by all API requests.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SchemaGenericObjDebug implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Schema-Generic-objDebug';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        's_memory_usage' => 'string',
        's_run_time' => 'string',
        'i_sql_selects' => 'int',
        'i_sql_queries' => 'int',
        'a_obj_query' => '\OpenAPI\Client\Model\SchemaGenericObjSQLQuery[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        's_memory_usage' => null,
        's_run_time' => null,
        'i_sql_selects' => null,
        'i_sql_queries' => null,
        'a_obj_query' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        's_memory_usage' => 'sMemoryUsage',
        's_run_time' => 'sRunTime',
        'i_sql_selects' => 'iSQLSelects',
        'i_sql_queries' => 'iSQLQueries',
        'a_obj_query' => 'a_objQuery'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        's_memory_usage' => 'setSMemoryUsage',
        's_run_time' => 'setSRunTime',
        'i_sql_selects' => 'setISqlSelects',
        'i_sql_queries' => 'setISqlQueries',
        'a_obj_query' => 'setAObjQuery'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        's_memory_usage' => 'getSMemoryUsage',
        's_run_time' => 'getSRunTime',
        'i_sql_selects' => 'getISqlSelects',
        'i_sql_queries' => 'getISqlQueries',
        'a_obj_query' => 'getAObjQuery'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['s_memory_usage'] = isset($data['s_memory_usage']) ? $data['s_memory_usage'] : null;
        $this->container['s_run_time'] = isset($data['s_run_time']) ? $data['s_run_time'] : null;
        $this->container['i_sql_selects'] = isset($data['i_sql_selects']) ? $data['i_sql_selects'] : null;
        $this->container['i_sql_queries'] = isset($data['i_sql_queries']) ? $data['i_sql_queries'] : null;
        $this->container['a_obj_query'] = isset($data['a_obj_query']) ? $data['a_obj_query'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['s_memory_usage'] === null) {
            $invalidProperties[] = "'s_memory_usage' can't be null";
        }
        if ($this->container['s_run_time'] === null) {
            $invalidProperties[] = "'s_run_time' can't be null";
        }
        if ($this->container['i_sql_selects'] === null) {
            $invalidProperties[] = "'i_sql_selects' can't be null";
        }
        if ($this->container['i_sql_queries'] === null) {
            $invalidProperties[] = "'i_sql_queries' can't be null";
        }
        if ($this->container['a_obj_query'] === null) {
            $invalidProperties[] = "'a_obj_query' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets s_memory_usage
     *
     * @return string
     */
    public function getSMemoryUsage()
    {
        return $this->container['s_memory_usage'];
    }

    /**
     * Sets s_memory_usage
     *
     * @param string $s_memory_usage The peak memory allocated during the API request execution. Formatted as a human readable string.
     *
     * @return $this
     */
    public function setSMemoryUsage($s_memory_usage)
    {
        $this->container['s_memory_usage'] = $s_memory_usage;

        return $this;
    }

    /**
     * Gets s_run_time
     *
     * @return string
     */
    public function getSRunTime()
    {
        return $this->container['s_run_time'];
    }

    /**
     * Sets s_run_time
     *
     * @param string $s_run_time The total server execution time of the API request execution. Formatted as a human readable string.
     *
     * @return $this
     */
    public function setSRunTime($s_run_time)
    {
        $this->container['s_run_time'] = $s_run_time;

        return $this;
    }

    /**
     * Gets i_sql_selects
     *
     * @return int
     */
    public function getISqlSelects()
    {
        return $this->container['i_sql_selects'];
    }

    /**
     * Sets i_sql_selects
     *
     * @param int $i_sql_selects The number of SQL SELECT queries that were sent to the database server during the API request execution.
     *
     * @return $this
     */
    public function setISqlSelects($i_sql_selects)
    {
        $this->container['i_sql_selects'] = $i_sql_selects;

        return $this;
    }

    /**
     * Gets i_sql_queries
     *
     * @return int
     */
    public function getISqlQueries()
    {
        return $this->container['i_sql_queries'];
    }

    /**
     * Sets i_sql_queries
     *
     * @param int $i_sql_queries The number of SQL INSERT/UPDATE/DELETE queries that were sent to the database server during the API request execution.
     *
     * @return $this
     */
    public function setISqlQueries($i_sql_queries)
    {
        $this->container['i_sql_queries'] = $i_sql_queries;

        return $this;
    }

    /**
     * Gets a_obj_query
     *
     * @return \OpenAPI\Client\Model\SchemaGenericObjSQLQuery[]
     */
    public function getAObjQuery()
    {
        return $this->container['a_obj_query'];
    }

    /**
     * Sets a_obj_query
     *
     * @param \OpenAPI\Client\Model\SchemaGenericObjSQLQuery[] $a_obj_query An array of the SQL Queries that were executed during the API request execution.
     *
     * @return $this
     */
    public function setAObjQuery($a_obj_query)
    {
        $this->container['a_obj_query'] = $a_obj_query;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


