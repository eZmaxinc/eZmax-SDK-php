<?php
/**
 * EzsigntemplatesignatureGetObjectV1ResponseMPayload
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.16
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * EzsigntemplatesignatureGetObjectV1ResponseMPayload Class Doc Comment
 *
 * @category Class
 * @description Payload for GET /1/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EzsigntemplatesignatureGetObjectV1ResponseMPayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ezsigntemplatesignature-getObject-v1-Response-mPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pkiEzsigntemplatesignatureID' => 'int',
        'fkiEzsigntemplatedocumentID' => 'int',
        'fkiEzsigntemplatesignerID' => 'int',
        'fkiEzsigntemplatesignerIDValidation' => 'int',
        'iEzsigntemplatedocumentpagePagenumber' => 'int',
        'iEzsigntemplatesignatureX' => 'int',
        'iEzsigntemplatesignatureY' => 'int',
        'iEzsigntemplatesignatureStep' => 'int',
        'eEzsigntemplatesignatureType' => '\eZmaxAPI\Model\FieldEEzsigntemplatesignatureType',
        'tEzsigntemplatesignatureTooltip' => 'string',
        'eEzsigntemplatesignatureTooltipposition' => '\eZmaxAPI\Model\FieldEEzsigntemplatesignatureTooltipposition',
        'eEzsigntemplatesignatureFont' => '\eZmaxAPI\Model\FieldEEzsigntemplatesignatureFont',
        'iEzsigntemplatesignatureValidationstep' => 'int',
        'sEzsigntemplatesignatureAttachmentdescription' => 'string',
        'eEzsigntemplatesignatureAttachmentnamesource' => '\eZmaxAPI\Model\FieldEEzsigntemplatesignatureAttachmentnamesource',
        'bEzsigntemplatesignatureRequired' => 'bool',
        'bEzsigntemplatesignatureCustomdate' => 'bool',
        'aObjEzsigntemplatesignaturecustomdate' => '\eZmaxAPI\Model\EzsigntemplatesignaturecustomdateResponseCompound[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pkiEzsigntemplatesignatureID' => null,
        'fkiEzsigntemplatedocumentID' => null,
        'fkiEzsigntemplatesignerID' => null,
        'fkiEzsigntemplatesignerIDValidation' => null,
        'iEzsigntemplatedocumentpagePagenumber' => null,
        'iEzsigntemplatesignatureX' => null,
        'iEzsigntemplatesignatureY' => null,
        'iEzsigntemplatesignatureStep' => null,
        'eEzsigntemplatesignatureType' => null,
        'tEzsigntemplatesignatureTooltip' => null,
        'eEzsigntemplatesignatureTooltipposition' => null,
        'eEzsigntemplatesignatureFont' => null,
        'iEzsigntemplatesignatureValidationstep' => null,
        'sEzsigntemplatesignatureAttachmentdescription' => null,
        'eEzsigntemplatesignatureAttachmentnamesource' => null,
        'bEzsigntemplatesignatureRequired' => null,
        'bEzsigntemplatesignatureCustomdate' => null,
        'aObjEzsigntemplatesignaturecustomdate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pkiEzsigntemplatesignatureID' => false,
		'fkiEzsigntemplatedocumentID' => false,
		'fkiEzsigntemplatesignerID' => false,
		'fkiEzsigntemplatesignerIDValidation' => false,
		'iEzsigntemplatedocumentpagePagenumber' => false,
		'iEzsigntemplatesignatureX' => false,
		'iEzsigntemplatesignatureY' => false,
		'iEzsigntemplatesignatureStep' => false,
		'eEzsigntemplatesignatureType' => false,
		'tEzsigntemplatesignatureTooltip' => false,
		'eEzsigntemplatesignatureTooltipposition' => false,
		'eEzsigntemplatesignatureFont' => false,
		'iEzsigntemplatesignatureValidationstep' => false,
		'sEzsigntemplatesignatureAttachmentdescription' => false,
		'eEzsigntemplatesignatureAttachmentnamesource' => false,
		'bEzsigntemplatesignatureRequired' => false,
		'bEzsigntemplatesignatureCustomdate' => false,
		'aObjEzsigntemplatesignaturecustomdate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pkiEzsigntemplatesignatureID' => 'pkiEzsigntemplatesignatureID',
        'fkiEzsigntemplatedocumentID' => 'fkiEzsigntemplatedocumentID',
        'fkiEzsigntemplatesignerID' => 'fkiEzsigntemplatesignerID',
        'fkiEzsigntemplatesignerIDValidation' => 'fkiEzsigntemplatesignerIDValidation',
        'iEzsigntemplatedocumentpagePagenumber' => 'iEzsigntemplatedocumentpagePagenumber',
        'iEzsigntemplatesignatureX' => 'iEzsigntemplatesignatureX',
        'iEzsigntemplatesignatureY' => 'iEzsigntemplatesignatureY',
        'iEzsigntemplatesignatureStep' => 'iEzsigntemplatesignatureStep',
        'eEzsigntemplatesignatureType' => 'eEzsigntemplatesignatureType',
        'tEzsigntemplatesignatureTooltip' => 'tEzsigntemplatesignatureTooltip',
        'eEzsigntemplatesignatureTooltipposition' => 'eEzsigntemplatesignatureTooltipposition',
        'eEzsigntemplatesignatureFont' => 'eEzsigntemplatesignatureFont',
        'iEzsigntemplatesignatureValidationstep' => 'iEzsigntemplatesignatureValidationstep',
        'sEzsigntemplatesignatureAttachmentdescription' => 'sEzsigntemplatesignatureAttachmentdescription',
        'eEzsigntemplatesignatureAttachmentnamesource' => 'eEzsigntemplatesignatureAttachmentnamesource',
        'bEzsigntemplatesignatureRequired' => 'bEzsigntemplatesignatureRequired',
        'bEzsigntemplatesignatureCustomdate' => 'bEzsigntemplatesignatureCustomdate',
        'aObjEzsigntemplatesignaturecustomdate' => 'a_objEzsigntemplatesignaturecustomdate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pkiEzsigntemplatesignatureID' => 'setPkiEzsigntemplatesignatureID',
        'fkiEzsigntemplatedocumentID' => 'setFkiEzsigntemplatedocumentID',
        'fkiEzsigntemplatesignerID' => 'setFkiEzsigntemplatesignerID',
        'fkiEzsigntemplatesignerIDValidation' => 'setFkiEzsigntemplatesignerIDValidation',
        'iEzsigntemplatedocumentpagePagenumber' => 'setIEzsigntemplatedocumentpagePagenumber',
        'iEzsigntemplatesignatureX' => 'setIEzsigntemplatesignatureX',
        'iEzsigntemplatesignatureY' => 'setIEzsigntemplatesignatureY',
        'iEzsigntemplatesignatureStep' => 'setIEzsigntemplatesignatureStep',
        'eEzsigntemplatesignatureType' => 'setEEzsigntemplatesignatureType',
        'tEzsigntemplatesignatureTooltip' => 'setTEzsigntemplatesignatureTooltip',
        'eEzsigntemplatesignatureTooltipposition' => 'setEEzsigntemplatesignatureTooltipposition',
        'eEzsigntemplatesignatureFont' => 'setEEzsigntemplatesignatureFont',
        'iEzsigntemplatesignatureValidationstep' => 'setIEzsigntemplatesignatureValidationstep',
        'sEzsigntemplatesignatureAttachmentdescription' => 'setSEzsigntemplatesignatureAttachmentdescription',
        'eEzsigntemplatesignatureAttachmentnamesource' => 'setEEzsigntemplatesignatureAttachmentnamesource',
        'bEzsigntemplatesignatureRequired' => 'setBEzsigntemplatesignatureRequired',
        'bEzsigntemplatesignatureCustomdate' => 'setBEzsigntemplatesignatureCustomdate',
        'aObjEzsigntemplatesignaturecustomdate' => 'setAObjEzsigntemplatesignaturecustomdate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pkiEzsigntemplatesignatureID' => 'getPkiEzsigntemplatesignatureID',
        'fkiEzsigntemplatedocumentID' => 'getFkiEzsigntemplatedocumentID',
        'fkiEzsigntemplatesignerID' => 'getFkiEzsigntemplatesignerID',
        'fkiEzsigntemplatesignerIDValidation' => 'getFkiEzsigntemplatesignerIDValidation',
        'iEzsigntemplatedocumentpagePagenumber' => 'getIEzsigntemplatedocumentpagePagenumber',
        'iEzsigntemplatesignatureX' => 'getIEzsigntemplatesignatureX',
        'iEzsigntemplatesignatureY' => 'getIEzsigntemplatesignatureY',
        'iEzsigntemplatesignatureStep' => 'getIEzsigntemplatesignatureStep',
        'eEzsigntemplatesignatureType' => 'getEEzsigntemplatesignatureType',
        'tEzsigntemplatesignatureTooltip' => 'getTEzsigntemplatesignatureTooltip',
        'eEzsigntemplatesignatureTooltipposition' => 'getEEzsigntemplatesignatureTooltipposition',
        'eEzsigntemplatesignatureFont' => 'getEEzsigntemplatesignatureFont',
        'iEzsigntemplatesignatureValidationstep' => 'getIEzsigntemplatesignatureValidationstep',
        'sEzsigntemplatesignatureAttachmentdescription' => 'getSEzsigntemplatesignatureAttachmentdescription',
        'eEzsigntemplatesignatureAttachmentnamesource' => 'getEEzsigntemplatesignatureAttachmentnamesource',
        'bEzsigntemplatesignatureRequired' => 'getBEzsigntemplatesignatureRequired',
        'bEzsigntemplatesignatureCustomdate' => 'getBEzsigntemplatesignatureCustomdate',
        'aObjEzsigntemplatesignaturecustomdate' => 'getAObjEzsigntemplatesignaturecustomdate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pkiEzsigntemplatesignatureID', $data ?? [], null);
        $this->setIfExists('fkiEzsigntemplatedocumentID', $data ?? [], null);
        $this->setIfExists('fkiEzsigntemplatesignerID', $data ?? [], null);
        $this->setIfExists('fkiEzsigntemplatesignerIDValidation', $data ?? [], null);
        $this->setIfExists('iEzsigntemplatedocumentpagePagenumber', $data ?? [], null);
        $this->setIfExists('iEzsigntemplatesignatureX', $data ?? [], null);
        $this->setIfExists('iEzsigntemplatesignatureY', $data ?? [], null);
        $this->setIfExists('iEzsigntemplatesignatureStep', $data ?? [], null);
        $this->setIfExists('eEzsigntemplatesignatureType', $data ?? [], null);
        $this->setIfExists('tEzsigntemplatesignatureTooltip', $data ?? [], null);
        $this->setIfExists('eEzsigntemplatesignatureTooltipposition', $data ?? [], null);
        $this->setIfExists('eEzsigntemplatesignatureFont', $data ?? [], null);
        $this->setIfExists('iEzsigntemplatesignatureValidationstep', $data ?? [], null);
        $this->setIfExists('sEzsigntemplatesignatureAttachmentdescription', $data ?? [], null);
        $this->setIfExists('eEzsigntemplatesignatureAttachmentnamesource', $data ?? [], null);
        $this->setIfExists('bEzsigntemplatesignatureRequired', $data ?? [], null);
        $this->setIfExists('bEzsigntemplatesignatureCustomdate', $data ?? [], null);
        $this->setIfExists('aObjEzsigntemplatesignaturecustomdate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pkiEzsigntemplatesignatureID'] === null) {
            $invalidProperties[] = "'pkiEzsigntemplatesignatureID' can't be null";
        }
        if (($this->container['pkiEzsigntemplatesignatureID'] < 0)) {
            $invalidProperties[] = "invalid value for 'pkiEzsigntemplatesignatureID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiEzsigntemplatedocumentID'] === null) {
            $invalidProperties[] = "'fkiEzsigntemplatedocumentID' can't be null";
        }
        if (($this->container['fkiEzsigntemplatedocumentID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzsigntemplatedocumentID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiEzsigntemplatesignerID'] === null) {
            $invalidProperties[] = "'fkiEzsigntemplatesignerID' can't be null";
        }
        if (($this->container['fkiEzsigntemplatesignerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzsigntemplatesignerID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzsigntemplatesignerIDValidation']) && ($this->container['fkiEzsigntemplatesignerIDValidation'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzsigntemplatesignerIDValidation', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzsigntemplatedocumentpagePagenumber'] === null) {
            $invalidProperties[] = "'iEzsigntemplatedocumentpagePagenumber' can't be null";
        }
        if (($this->container['iEzsigntemplatedocumentpagePagenumber'] < 1)) {
            $invalidProperties[] = "invalid value for 'iEzsigntemplatedocumentpagePagenumber', must be bigger than or equal to 1.";
        }

        if ($this->container['iEzsigntemplatesignatureX'] === null) {
            $invalidProperties[] = "'iEzsigntemplatesignatureX' can't be null";
        }
        if (($this->container['iEzsigntemplatesignatureX'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzsigntemplatesignatureX', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzsigntemplatesignatureY'] === null) {
            $invalidProperties[] = "'iEzsigntemplatesignatureY' can't be null";
        }
        if (($this->container['iEzsigntemplatesignatureY'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzsigntemplatesignatureY', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzsigntemplatesignatureStep'] === null) {
            $invalidProperties[] = "'iEzsigntemplatesignatureStep' can't be null";
        }
        if (($this->container['iEzsigntemplatesignatureStep'] < 1)) {
            $invalidProperties[] = "invalid value for 'iEzsigntemplatesignatureStep', must be bigger than or equal to 1.";
        }

        if ($this->container['eEzsigntemplatesignatureType'] === null) {
            $invalidProperties[] = "'eEzsigntemplatesignatureType' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pkiEzsigntemplatesignatureID
     *
     * @return int
     */
    public function getPkiEzsigntemplatesignatureID()
    {
        return $this->container['pkiEzsigntemplatesignatureID'];
    }

    /**
     * Sets pkiEzsigntemplatesignatureID
     *
     * @param int $pkiEzsigntemplatesignatureID The unique ID of the Ezsigntemplatesignature
     *
     * @return self
     */
    public function setPkiEzsigntemplatesignatureID($pkiEzsigntemplatesignatureID)
    {

        if (($pkiEzsigntemplatesignatureID < 0)) {
            throw new \InvalidArgumentException('invalid value for $pkiEzsigntemplatesignatureID when calling EzsigntemplatesignatureGetObjectV1ResponseMPayload., must be bigger than or equal to 0.');
        }


        //if (is_null($pkiEzsigntemplatesignatureID)) {
            //throw new \InvalidArgumentException('non-nullable pkiEzsigntemplatesignatureID cannot be null');
        //}
        $this->container['pkiEzsigntemplatesignatureID'] = (is_null($pkiEzsigntemplatesignatureID) ? null : (int) $pkiEzsigntemplatesignatureID);

        return $this;
    }

    /**
     * Gets fkiEzsigntemplatedocumentID
     *
     * @return int
     */
    public function getFkiEzsigntemplatedocumentID()
    {
        return $this->container['fkiEzsigntemplatedocumentID'];
    }

    /**
     * Sets fkiEzsigntemplatedocumentID
     *
     * @param int $fkiEzsigntemplatedocumentID The unique ID of the Ezsigntemplatedocument
     *
     * @return self
     */
    public function setFkiEzsigntemplatedocumentID($fkiEzsigntemplatedocumentID)
    {

        if (($fkiEzsigntemplatedocumentID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiEzsigntemplatedocumentID when calling EzsigntemplatesignatureGetObjectV1ResponseMPayload., must be bigger than or equal to 0.');
        }


        //if (is_null($fkiEzsigntemplatedocumentID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzsigntemplatedocumentID cannot be null');
        //}
        $this->container['fkiEzsigntemplatedocumentID'] = (is_null($fkiEzsigntemplatedocumentID) ? null : (int) $fkiEzsigntemplatedocumentID);

        return $this;
    }

    /**
     * Gets fkiEzsigntemplatesignerID
     *
     * @return int
     */
    public function getFkiEzsigntemplatesignerID()
    {
        return $this->container['fkiEzsigntemplatesignerID'];
    }

    /**
     * Sets fkiEzsigntemplatesignerID
     *
     * @param int $fkiEzsigntemplatesignerID The unique ID of the Ezsigntemplatesigner
     *
     * @return self
     */
    public function setFkiEzsigntemplatesignerID($fkiEzsigntemplatesignerID)
    {

        if (($fkiEzsigntemplatesignerID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiEzsigntemplatesignerID when calling EzsigntemplatesignatureGetObjectV1ResponseMPayload., must be bigger than or equal to 0.');
        }


        //if (is_null($fkiEzsigntemplatesignerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzsigntemplatesignerID cannot be null');
        //}
        $this->container['fkiEzsigntemplatesignerID'] = (is_null($fkiEzsigntemplatesignerID) ? null : (int) $fkiEzsigntemplatesignerID);

        return $this;
    }

    /**
     * Gets fkiEzsigntemplatesignerIDValidation
     *
     * @return int|null
     */
    public function getFkiEzsigntemplatesignerIDValidation()
    {
        return $this->container['fkiEzsigntemplatesignerIDValidation'];
    }

    /**
     * Sets fkiEzsigntemplatesignerIDValidation
     *
     * @param int|null $fkiEzsigntemplatesignerIDValidation The unique ID of the Ezsigntemplatesigner
     *
     * @return self
     */
    public function setFkiEzsigntemplatesignerIDValidation($fkiEzsigntemplatesignerIDValidation)
    {

        if (!is_null($fkiEzsigntemplatesignerIDValidation) && ($fkiEzsigntemplatesignerIDValidation < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiEzsigntemplatesignerIDValidation when calling EzsigntemplatesignatureGetObjectV1ResponseMPayload., must be bigger than or equal to 0.');
        }


        //if (is_null($fkiEzsigntemplatesignerIDValidation)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzsigntemplatesignerIDValidation cannot be null');
        //}
        $this->container['fkiEzsigntemplatesignerIDValidation'] = (is_null($fkiEzsigntemplatesignerIDValidation) ? null : (int) $fkiEzsigntemplatesignerIDValidation);

        return $this;
    }

    /**
     * Gets iEzsigntemplatedocumentpagePagenumber
     *
     * @return int
     */
    public function getIEzsigntemplatedocumentpagePagenumber()
    {
        return $this->container['iEzsigntemplatedocumentpagePagenumber'];
    }

    /**
     * Sets iEzsigntemplatedocumentpagePagenumber
     *
     * @param int $iEzsigntemplatedocumentpagePagenumber The page number in the Ezsigntemplatedocument
     *
     * @return self
     */
    public function setIEzsigntemplatedocumentpagePagenumber($iEzsigntemplatedocumentpagePagenumber)
    {

        if (($iEzsigntemplatedocumentpagePagenumber < 1)) {
            throw new \InvalidArgumentException('invalid value for $iEzsigntemplatedocumentpagePagenumber when calling EzsigntemplatesignatureGetObjectV1ResponseMPayload., must be bigger than or equal to 1.');
        }


        //if (is_null($iEzsigntemplatedocumentpagePagenumber)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigntemplatedocumentpagePagenumber cannot be null');
        //}
        $this->container['iEzsigntemplatedocumentpagePagenumber'] = (is_null($iEzsigntemplatedocumentpagePagenumber) ? null : (int) $iEzsigntemplatedocumentpagePagenumber);

        return $this;
    }

    /**
     * Gets iEzsigntemplatesignatureX
     *
     * @return int
     */
    public function getIEzsigntemplatesignatureX()
    {
        return $this->container['iEzsigntemplatesignatureX'];
    }

    /**
     * Sets iEzsigntemplatesignatureX
     *
     * @param int $iEzsigntemplatesignatureX The X coordinate (Horizontal) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 2 inches from the left border of the page, you would use \"200\" for the X coordinate.
     *
     * @return self
     */
    public function setIEzsigntemplatesignatureX($iEzsigntemplatesignatureX)
    {

        if (($iEzsigntemplatesignatureX < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzsigntemplatesignatureX when calling EzsigntemplatesignatureGetObjectV1ResponseMPayload., must be bigger than or equal to 0.');
        }


        //if (is_null($iEzsigntemplatesignatureX)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigntemplatesignatureX cannot be null');
        //}
        $this->container['iEzsigntemplatesignatureX'] = (is_null($iEzsigntemplatesignatureX) ? null : (int) $iEzsigntemplatesignatureX);

        return $this;
    }

    /**
     * Gets iEzsigntemplatesignatureY
     *
     * @return int
     */
    public function getIEzsigntemplatesignatureY()
    {
        return $this->container['iEzsigntemplatesignatureY'];
    }

    /**
     * Sets iEzsigntemplatesignatureY
     *
     * @param int $iEzsigntemplatesignatureY The Y coordinate (Vertical) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.
     *
     * @return self
     */
    public function setIEzsigntemplatesignatureY($iEzsigntemplatesignatureY)
    {

        if (($iEzsigntemplatesignatureY < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzsigntemplatesignatureY when calling EzsigntemplatesignatureGetObjectV1ResponseMPayload., must be bigger than or equal to 0.');
        }


        //if (is_null($iEzsigntemplatesignatureY)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigntemplatesignatureY cannot be null');
        //}
        $this->container['iEzsigntemplatesignatureY'] = (is_null($iEzsigntemplatesignatureY) ? null : (int) $iEzsigntemplatesignatureY);

        return $this;
    }

    /**
     * Gets iEzsigntemplatesignatureStep
     *
     * @return int
     */
    public function getIEzsigntemplatesignatureStep()
    {
        return $this->container['iEzsigntemplatesignatureStep'];
    }

    /**
     * Sets iEzsigntemplatesignatureStep
     *
     * @param int $iEzsigntemplatesignatureStep The step when the Ezsigntemplatesigner will be invited to sign
     *
     * @return self
     */
    public function setIEzsigntemplatesignatureStep($iEzsigntemplatesignatureStep)
    {

        if (($iEzsigntemplatesignatureStep < 1)) {
            throw new \InvalidArgumentException('invalid value for $iEzsigntemplatesignatureStep when calling EzsigntemplatesignatureGetObjectV1ResponseMPayload., must be bigger than or equal to 1.');
        }


        //if (is_null($iEzsigntemplatesignatureStep)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigntemplatesignatureStep cannot be null');
        //}
        $this->container['iEzsigntemplatesignatureStep'] = (is_null($iEzsigntemplatesignatureStep) ? null : (int) $iEzsigntemplatesignatureStep);

        return $this;
    }

    /**
     * Gets eEzsigntemplatesignatureType
     *
     * @return \eZmaxAPI\Model\FieldEEzsigntemplatesignatureType
     */
    public function getEEzsigntemplatesignatureType()
    {
        return $this->container['eEzsigntemplatesignatureType'];
    }

    /**
     * Sets eEzsigntemplatesignatureType
     *
     * @param \eZmaxAPI\Model\FieldEEzsigntemplatesignatureType $eEzsigntemplatesignatureType eEzsigntemplatesignatureType
     *
     * @return self
     */
    public function setEEzsigntemplatesignatureType($eEzsigntemplatesignatureType)
    {

        //if (is_null($eEzsigntemplatesignatureType)) {
            //throw new \InvalidArgumentException('non-nullable eEzsigntemplatesignatureType cannot be null');
        //}
        $this->container['eEzsigntemplatesignatureType'] = $eEzsigntemplatesignatureType;

        return $this;
    }

    /**
     * Gets tEzsigntemplatesignatureTooltip
     *
     * @return string|null
     */
    public function getTEzsigntemplatesignatureTooltip()
    {
        return $this->container['tEzsigntemplatesignatureTooltip'];
    }

    /**
     * Sets tEzsigntemplatesignatureTooltip
     *
     * @param string|null $tEzsigntemplatesignatureTooltip A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplatesignature
     *
     * @return self
     */
    public function setTEzsigntemplatesignatureTooltip($tEzsigntemplatesignatureTooltip)
    {

        //if (is_null($tEzsigntemplatesignatureTooltip)) {
            //throw new \InvalidArgumentException('non-nullable tEzsigntemplatesignatureTooltip cannot be null');
        //}
        $this->container['tEzsigntemplatesignatureTooltip'] = (is_null($tEzsigntemplatesignatureTooltip) ? null : (string) $tEzsigntemplatesignatureTooltip);

        return $this;
    }

    /**
     * Gets eEzsigntemplatesignatureTooltipposition
     *
     * @return \eZmaxAPI\Model\FieldEEzsigntemplatesignatureTooltipposition|null
     */
    public function getEEzsigntemplatesignatureTooltipposition()
    {
        return $this->container['eEzsigntemplatesignatureTooltipposition'];
    }

    /**
     * Sets eEzsigntemplatesignatureTooltipposition
     *
     * @param \eZmaxAPI\Model\FieldEEzsigntemplatesignatureTooltipposition|null $eEzsigntemplatesignatureTooltipposition eEzsigntemplatesignatureTooltipposition
     *
     * @return self
     */
    public function setEEzsigntemplatesignatureTooltipposition($eEzsigntemplatesignatureTooltipposition)
    {

        //if (is_null($eEzsigntemplatesignatureTooltipposition)) {
            //throw new \InvalidArgumentException('non-nullable eEzsigntemplatesignatureTooltipposition cannot be null');
        //}
        $this->container['eEzsigntemplatesignatureTooltipposition'] = $eEzsigntemplatesignatureTooltipposition;

        return $this;
    }

    /**
     * Gets eEzsigntemplatesignatureFont
     *
     * @return \eZmaxAPI\Model\FieldEEzsigntemplatesignatureFont|null
     */
    public function getEEzsigntemplatesignatureFont()
    {
        return $this->container['eEzsigntemplatesignatureFont'];
    }

    /**
     * Sets eEzsigntemplatesignatureFont
     *
     * @param \eZmaxAPI\Model\FieldEEzsigntemplatesignatureFont|null $eEzsigntemplatesignatureFont eEzsigntemplatesignatureFont
     *
     * @return self
     */
    public function setEEzsigntemplatesignatureFont($eEzsigntemplatesignatureFont)
    {

        //if (is_null($eEzsigntemplatesignatureFont)) {
            //throw new \InvalidArgumentException('non-nullable eEzsigntemplatesignatureFont cannot be null');
        //}
        $this->container['eEzsigntemplatesignatureFont'] = $eEzsigntemplatesignatureFont;

        return $this;
    }

    /**
     * Gets iEzsigntemplatesignatureValidationstep
     *
     * @return int|null
     */
    public function getIEzsigntemplatesignatureValidationstep()
    {
        return $this->container['iEzsigntemplatesignatureValidationstep'];
    }

    /**
     * Sets iEzsigntemplatesignatureValidationstep
     *
     * @param int|null $iEzsigntemplatesignatureValidationstep The step when the Ezsigntemplatesigner will be invited to validate the Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
     *
     * @return self
     */
    public function setIEzsigntemplatesignatureValidationstep($iEzsigntemplatesignatureValidationstep)
    {

        //if (is_null($iEzsigntemplatesignatureValidationstep)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigntemplatesignatureValidationstep cannot be null');
        //}
        $this->container['iEzsigntemplatesignatureValidationstep'] = (is_null($iEzsigntemplatesignatureValidationstep) ? null : (int) $iEzsigntemplatesignatureValidationstep);

        return $this;
    }

    /**
     * Gets sEzsigntemplatesignatureAttachmentdescription
     *
     * @return string|null
     */
    public function getSEzsigntemplatesignatureAttachmentdescription()
    {
        return $this->container['sEzsigntemplatesignatureAttachmentdescription'];
    }

    /**
     * Sets sEzsigntemplatesignatureAttachmentdescription
     *
     * @param string|null $sEzsigntemplatesignatureAttachmentdescription The description attached to the attachment name added in Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
     *
     * @return self
     */
    public function setSEzsigntemplatesignatureAttachmentdescription($sEzsigntemplatesignatureAttachmentdescription)
    {

        //if (is_null($sEzsigntemplatesignatureAttachmentdescription)) {
            //throw new \InvalidArgumentException('non-nullable sEzsigntemplatesignatureAttachmentdescription cannot be null');
        //}
        $this->container['sEzsigntemplatesignatureAttachmentdescription'] = (is_null($sEzsigntemplatesignatureAttachmentdescription) ? null : (string) $sEzsigntemplatesignatureAttachmentdescription);

        return $this;
    }

    /**
     * Gets eEzsigntemplatesignatureAttachmentnamesource
     *
     * @return \eZmaxAPI\Model\FieldEEzsigntemplatesignatureAttachmentnamesource|null
     */
    public function getEEzsigntemplatesignatureAttachmentnamesource()
    {
        return $this->container['eEzsigntemplatesignatureAttachmentnamesource'];
    }

    /**
     * Sets eEzsigntemplatesignatureAttachmentnamesource
     *
     * @param \eZmaxAPI\Model\FieldEEzsigntemplatesignatureAttachmentnamesource|null $eEzsigntemplatesignatureAttachmentnamesource eEzsigntemplatesignatureAttachmentnamesource
     *
     * @return self
     */
    public function setEEzsigntemplatesignatureAttachmentnamesource($eEzsigntemplatesignatureAttachmentnamesource)
    {

        //if (is_null($eEzsigntemplatesignatureAttachmentnamesource)) {
            //throw new \InvalidArgumentException('non-nullable eEzsigntemplatesignatureAttachmentnamesource cannot be null');
        //}
        $this->container['eEzsigntemplatesignatureAttachmentnamesource'] = $eEzsigntemplatesignatureAttachmentnamesource;

        return $this;
    }

    /**
     * Gets bEzsigntemplatesignatureRequired
     *
     * @return bool|null
     */
    public function getBEzsigntemplatesignatureRequired()
    {
        return $this->container['bEzsigntemplatesignatureRequired'];
    }

    /**
     * Sets bEzsigntemplatesignatureRequired
     *
     * @param bool|null $bEzsigntemplatesignatureRequired Whether the Ezsigntemplatesignature is required or not. This field is relevant only with Ezsigntemplatesignature with eEzsigntemplatesignatureType = Attachments.
     *
     * @return self
     */
    public function setBEzsigntemplatesignatureRequired($bEzsigntemplatesignatureRequired)
    {

        //if (is_null($bEzsigntemplatesignatureRequired)) {
            //throw new \InvalidArgumentException('non-nullable bEzsigntemplatesignatureRequired cannot be null');
        //}
        $this->container['bEzsigntemplatesignatureRequired'] = (is_null($bEzsigntemplatesignatureRequired) ? null : (bool) $bEzsigntemplatesignatureRequired);

        return $this;
    }

    /**
     * Gets bEzsigntemplatesignatureCustomdate
     *
     * @return bool|null
     */
    public function getBEzsigntemplatesignatureCustomdate()
    {
        return $this->container['bEzsigntemplatesignatureCustomdate'];
    }

    /**
     * Sets bEzsigntemplatesignatureCustomdate
     *
     * @param bool|null $bEzsigntemplatesignatureCustomdate Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**)
     *
     * @return self
     */
    public function setBEzsigntemplatesignatureCustomdate($bEzsigntemplatesignatureCustomdate)
    {

        //if (is_null($bEzsigntemplatesignatureCustomdate)) {
            //throw new \InvalidArgumentException('non-nullable bEzsigntemplatesignatureCustomdate cannot be null');
        //}
        $this->container['bEzsigntemplatesignatureCustomdate'] = (is_null($bEzsigntemplatesignatureCustomdate) ? null : (bool) $bEzsigntemplatesignatureCustomdate);

        return $this;
    }

    /**
     * Gets aObjEzsigntemplatesignaturecustomdate
     *
     * @return \eZmaxAPI\Model\EzsigntemplatesignaturecustomdateResponseCompound[]|null
     */
    public function getAObjEzsigntemplatesignaturecustomdate()
    {
        return $this->container['aObjEzsigntemplatesignaturecustomdate'];
    }

    /**
     * Sets aObjEzsigntemplatesignaturecustomdate
     *
     * @param \eZmaxAPI\Model\EzsigntemplatesignaturecustomdateResponseCompound[]|null $aObjEzsigntemplatesignaturecustomdate An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don't want to have a date at all.
     *
     * @return self
     */
    public function setAObjEzsigntemplatesignaturecustomdate($aObjEzsigntemplatesignaturecustomdate)
    {

        //if (is_null($aObjEzsigntemplatesignaturecustomdate)) {
            //throw new \InvalidArgumentException('non-nullable aObjEzsigntemplatesignaturecustomdate cannot be null');
        //}
        $this->container['aObjEzsigntemplatesignaturecustomdate'] = $aObjEzsigntemplatesignaturecustomdate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


