<?php
/**
 * EzmaxinvoicingagentResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.16
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * EzmaxinvoicingagentResponse Class Doc Comment
 *
 * @category Class
 * @description A Ezmaxinvoicingagent Object
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EzmaxinvoicingagentResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ezmaxinvoicingagent-Response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pkiEzmaxinvoicingagentID' => 'int',
        'fkiEzmaxinvoicingID' => 'int',
        'fkiBillingentityinternalID' => 'int',
        'sBillingentityinternalDescriptionX' => 'string',
        'fkiAgentID' => 'int',
        'fkiBrokerID' => 'int',
        'iEzmaxinvoicingagentSession' => 'int',
        'iEzmaxinvoicingagentCloned' => 'int',
        'iEzmaxinvoicingagentInvoice' => 'int',
        'iEzmaxinvoicingagentInscription' => 'int',
        'iEzmaxinvoicingagentInscriptionactive' => 'int',
        'iEzmaxinvoicingagentSale' => 'int',
        'iEzmaxinvoicingagentOtherincome' => 'int',
        'iEzmaxinvoicingagentCommissioncalculation' => 'int',
        'iEzmaxinvoicingagentEzsigndocument' => 'int',
        'bEzmaxinvoicingagentEzsignaccount' => 'bool',
        'bEzmaxinvoicingagentBillableezmax' => 'bool',
        'eEzmaxinvoicingagentVariationezmax' => '\eZmaxAPI\Model\FieldEEzmaxinvoicingagentVariationezmax',
        'bEzmaxinvoicingagentBillableezsign' => 'bool',
        'eEzmaxinvoicingagentVariationezsign' => '\eZmaxAPI\Model\FieldEEzmaxinvoicingagentVariationezsign'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pkiEzmaxinvoicingagentID' => null,
        'fkiEzmaxinvoicingID' => null,
        'fkiBillingentityinternalID' => null,
        'sBillingentityinternalDescriptionX' => null,
        'fkiAgentID' => null,
        'fkiBrokerID' => null,
        'iEzmaxinvoicingagentSession' => null,
        'iEzmaxinvoicingagentCloned' => null,
        'iEzmaxinvoicingagentInvoice' => null,
        'iEzmaxinvoicingagentInscription' => null,
        'iEzmaxinvoicingagentInscriptionactive' => null,
        'iEzmaxinvoicingagentSale' => null,
        'iEzmaxinvoicingagentOtherincome' => null,
        'iEzmaxinvoicingagentCommissioncalculation' => null,
        'iEzmaxinvoicingagentEzsigndocument' => null,
        'bEzmaxinvoicingagentEzsignaccount' => null,
        'bEzmaxinvoicingagentBillableezmax' => null,
        'eEzmaxinvoicingagentVariationezmax' => null,
        'bEzmaxinvoicingagentBillableezsign' => null,
        'eEzmaxinvoicingagentVariationezsign' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pkiEzmaxinvoicingagentID' => false,
		'fkiEzmaxinvoicingID' => false,
		'fkiBillingentityinternalID' => false,
		'sBillingentityinternalDescriptionX' => false,
		'fkiAgentID' => false,
		'fkiBrokerID' => false,
		'iEzmaxinvoicingagentSession' => false,
		'iEzmaxinvoicingagentCloned' => false,
		'iEzmaxinvoicingagentInvoice' => false,
		'iEzmaxinvoicingagentInscription' => false,
		'iEzmaxinvoicingagentInscriptionactive' => false,
		'iEzmaxinvoicingagentSale' => false,
		'iEzmaxinvoicingagentOtherincome' => false,
		'iEzmaxinvoicingagentCommissioncalculation' => false,
		'iEzmaxinvoicingagentEzsigndocument' => false,
		'bEzmaxinvoicingagentEzsignaccount' => false,
		'bEzmaxinvoicingagentBillableezmax' => false,
		'eEzmaxinvoicingagentVariationezmax' => false,
		'bEzmaxinvoicingagentBillableezsign' => false,
		'eEzmaxinvoicingagentVariationezsign' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pkiEzmaxinvoicingagentID' => 'pkiEzmaxinvoicingagentID',
        'fkiEzmaxinvoicingID' => 'fkiEzmaxinvoicingID',
        'fkiBillingentityinternalID' => 'fkiBillingentityinternalID',
        'sBillingentityinternalDescriptionX' => 'sBillingentityinternalDescriptionX',
        'fkiAgentID' => 'fkiAgentID',
        'fkiBrokerID' => 'fkiBrokerID',
        'iEzmaxinvoicingagentSession' => 'iEzmaxinvoicingagentSession',
        'iEzmaxinvoicingagentCloned' => 'iEzmaxinvoicingagentCloned',
        'iEzmaxinvoicingagentInvoice' => 'iEzmaxinvoicingagentInvoice',
        'iEzmaxinvoicingagentInscription' => 'iEzmaxinvoicingagentInscription',
        'iEzmaxinvoicingagentInscriptionactive' => 'iEzmaxinvoicingagentInscriptionactive',
        'iEzmaxinvoicingagentSale' => 'iEzmaxinvoicingagentSale',
        'iEzmaxinvoicingagentOtherincome' => 'iEzmaxinvoicingagentOtherincome',
        'iEzmaxinvoicingagentCommissioncalculation' => 'iEzmaxinvoicingagentCommissioncalculation',
        'iEzmaxinvoicingagentEzsigndocument' => 'iEzmaxinvoicingagentEzsigndocument',
        'bEzmaxinvoicingagentEzsignaccount' => 'bEzmaxinvoicingagentEzsignaccount',
        'bEzmaxinvoicingagentBillableezmax' => 'bEzmaxinvoicingagentBillableezmax',
        'eEzmaxinvoicingagentVariationezmax' => 'eEzmaxinvoicingagentVariationezmax',
        'bEzmaxinvoicingagentBillableezsign' => 'bEzmaxinvoicingagentBillableezsign',
        'eEzmaxinvoicingagentVariationezsign' => 'eEzmaxinvoicingagentVariationezsign'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pkiEzmaxinvoicingagentID' => 'setPkiEzmaxinvoicingagentID',
        'fkiEzmaxinvoicingID' => 'setFkiEzmaxinvoicingID',
        'fkiBillingentityinternalID' => 'setFkiBillingentityinternalID',
        'sBillingentityinternalDescriptionX' => 'setSBillingentityinternalDescriptionX',
        'fkiAgentID' => 'setFkiAgentID',
        'fkiBrokerID' => 'setFkiBrokerID',
        'iEzmaxinvoicingagentSession' => 'setIEzmaxinvoicingagentSession',
        'iEzmaxinvoicingagentCloned' => 'setIEzmaxinvoicingagentCloned',
        'iEzmaxinvoicingagentInvoice' => 'setIEzmaxinvoicingagentInvoice',
        'iEzmaxinvoicingagentInscription' => 'setIEzmaxinvoicingagentInscription',
        'iEzmaxinvoicingagentInscriptionactive' => 'setIEzmaxinvoicingagentInscriptionactive',
        'iEzmaxinvoicingagentSale' => 'setIEzmaxinvoicingagentSale',
        'iEzmaxinvoicingagentOtherincome' => 'setIEzmaxinvoicingagentOtherincome',
        'iEzmaxinvoicingagentCommissioncalculation' => 'setIEzmaxinvoicingagentCommissioncalculation',
        'iEzmaxinvoicingagentEzsigndocument' => 'setIEzmaxinvoicingagentEzsigndocument',
        'bEzmaxinvoicingagentEzsignaccount' => 'setBEzmaxinvoicingagentEzsignaccount',
        'bEzmaxinvoicingagentBillableezmax' => 'setBEzmaxinvoicingagentBillableezmax',
        'eEzmaxinvoicingagentVariationezmax' => 'setEEzmaxinvoicingagentVariationezmax',
        'bEzmaxinvoicingagentBillableezsign' => 'setBEzmaxinvoicingagentBillableezsign',
        'eEzmaxinvoicingagentVariationezsign' => 'setEEzmaxinvoicingagentVariationezsign'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pkiEzmaxinvoicingagentID' => 'getPkiEzmaxinvoicingagentID',
        'fkiEzmaxinvoicingID' => 'getFkiEzmaxinvoicingID',
        'fkiBillingentityinternalID' => 'getFkiBillingentityinternalID',
        'sBillingentityinternalDescriptionX' => 'getSBillingentityinternalDescriptionX',
        'fkiAgentID' => 'getFkiAgentID',
        'fkiBrokerID' => 'getFkiBrokerID',
        'iEzmaxinvoicingagentSession' => 'getIEzmaxinvoicingagentSession',
        'iEzmaxinvoicingagentCloned' => 'getIEzmaxinvoicingagentCloned',
        'iEzmaxinvoicingagentInvoice' => 'getIEzmaxinvoicingagentInvoice',
        'iEzmaxinvoicingagentInscription' => 'getIEzmaxinvoicingagentInscription',
        'iEzmaxinvoicingagentInscriptionactive' => 'getIEzmaxinvoicingagentInscriptionactive',
        'iEzmaxinvoicingagentSale' => 'getIEzmaxinvoicingagentSale',
        'iEzmaxinvoicingagentOtherincome' => 'getIEzmaxinvoicingagentOtherincome',
        'iEzmaxinvoicingagentCommissioncalculation' => 'getIEzmaxinvoicingagentCommissioncalculation',
        'iEzmaxinvoicingagentEzsigndocument' => 'getIEzmaxinvoicingagentEzsigndocument',
        'bEzmaxinvoicingagentEzsignaccount' => 'getBEzmaxinvoicingagentEzsignaccount',
        'bEzmaxinvoicingagentBillableezmax' => 'getBEzmaxinvoicingagentBillableezmax',
        'eEzmaxinvoicingagentVariationezmax' => 'getEEzmaxinvoicingagentVariationezmax',
        'bEzmaxinvoicingagentBillableezsign' => 'getBEzmaxinvoicingagentBillableezsign',
        'eEzmaxinvoicingagentVariationezsign' => 'getEEzmaxinvoicingagentVariationezsign'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pkiEzmaxinvoicingagentID', $data ?? [], null);
        $this->setIfExists('fkiEzmaxinvoicingID', $data ?? [], null);
        $this->setIfExists('fkiBillingentityinternalID', $data ?? [], null);
        $this->setIfExists('sBillingentityinternalDescriptionX', $data ?? [], null);
        $this->setIfExists('fkiAgentID', $data ?? [], null);
        $this->setIfExists('fkiBrokerID', $data ?? [], null);
        $this->setIfExists('iEzmaxinvoicingagentSession', $data ?? [], null);
        $this->setIfExists('iEzmaxinvoicingagentCloned', $data ?? [], null);
        $this->setIfExists('iEzmaxinvoicingagentInvoice', $data ?? [], null);
        $this->setIfExists('iEzmaxinvoicingagentInscription', $data ?? [], null);
        $this->setIfExists('iEzmaxinvoicingagentInscriptionactive', $data ?? [], null);
        $this->setIfExists('iEzmaxinvoicingagentSale', $data ?? [], null);
        $this->setIfExists('iEzmaxinvoicingagentOtherincome', $data ?? [], null);
        $this->setIfExists('iEzmaxinvoicingagentCommissioncalculation', $data ?? [], null);
        $this->setIfExists('iEzmaxinvoicingagentEzsigndocument', $data ?? [], null);
        $this->setIfExists('bEzmaxinvoicingagentEzsignaccount', $data ?? [], null);
        $this->setIfExists('bEzmaxinvoicingagentBillableezmax', $data ?? [], null);
        $this->setIfExists('eEzmaxinvoicingagentVariationezmax', $data ?? [], null);
        $this->setIfExists('bEzmaxinvoicingagentBillableezsign', $data ?? [], null);
        $this->setIfExists('eEzmaxinvoicingagentVariationezsign', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['pkiEzmaxinvoicingagentID']) && ($this->container['pkiEzmaxinvoicingagentID'] < 0)) {
            $invalidProperties[] = "invalid value for 'pkiEzmaxinvoicingagentID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzmaxinvoicingID']) && ($this->container['fkiEzmaxinvoicingID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzmaxinvoicingID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiBillingentityinternalID'] === null) {
            $invalidProperties[] = "'fkiBillingentityinternalID' can't be null";
        }
        if (($this->container['fkiBillingentityinternalID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiBillingentityinternalID', must be bigger than or equal to 0.";
        }

        if ($this->container['sBillingentityinternalDescriptionX'] === null) {
            $invalidProperties[] = "'sBillingentityinternalDescriptionX' can't be null";
        }
        if (!is_null($this->container['fkiAgentID']) && ($this->container['fkiAgentID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiAgentID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiBrokerID']) && ($this->container['fkiBrokerID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiBrokerID', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzmaxinvoicingagentSession'] === null) {
            $invalidProperties[] = "'iEzmaxinvoicingagentSession' can't be null";
        }
        if (($this->container['iEzmaxinvoicingagentSession'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzmaxinvoicingagentSession', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzmaxinvoicingagentCloned'] === null) {
            $invalidProperties[] = "'iEzmaxinvoicingagentCloned' can't be null";
        }
        if (($this->container['iEzmaxinvoicingagentCloned'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzmaxinvoicingagentCloned', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzmaxinvoicingagentInvoice'] === null) {
            $invalidProperties[] = "'iEzmaxinvoicingagentInvoice' can't be null";
        }
        if (($this->container['iEzmaxinvoicingagentInvoice'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzmaxinvoicingagentInvoice', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzmaxinvoicingagentInscription'] === null) {
            $invalidProperties[] = "'iEzmaxinvoicingagentInscription' can't be null";
        }
        if (($this->container['iEzmaxinvoicingagentInscription'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzmaxinvoicingagentInscription', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzmaxinvoicingagentInscriptionactive'] === null) {
            $invalidProperties[] = "'iEzmaxinvoicingagentInscriptionactive' can't be null";
        }
        if (($this->container['iEzmaxinvoicingagentInscriptionactive'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzmaxinvoicingagentInscriptionactive', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzmaxinvoicingagentSale'] === null) {
            $invalidProperties[] = "'iEzmaxinvoicingagentSale' can't be null";
        }
        if (($this->container['iEzmaxinvoicingagentSale'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzmaxinvoicingagentSale', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzmaxinvoicingagentOtherincome'] === null) {
            $invalidProperties[] = "'iEzmaxinvoicingagentOtherincome' can't be null";
        }
        if (($this->container['iEzmaxinvoicingagentOtherincome'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzmaxinvoicingagentOtherincome', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzmaxinvoicingagentCommissioncalculation'] === null) {
            $invalidProperties[] = "'iEzmaxinvoicingagentCommissioncalculation' can't be null";
        }
        if (($this->container['iEzmaxinvoicingagentCommissioncalculation'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzmaxinvoicingagentCommissioncalculation', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzmaxinvoicingagentEzsigndocument'] === null) {
            $invalidProperties[] = "'iEzmaxinvoicingagentEzsigndocument' can't be null";
        }
        if (($this->container['iEzmaxinvoicingagentEzsigndocument'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzmaxinvoicingagentEzsigndocument', must be bigger than or equal to 0.";
        }

        if ($this->container['bEzmaxinvoicingagentEzsignaccount'] === null) {
            $invalidProperties[] = "'bEzmaxinvoicingagentEzsignaccount' can't be null";
        }
        if ($this->container['bEzmaxinvoicingagentBillableezmax'] === null) {
            $invalidProperties[] = "'bEzmaxinvoicingagentBillableezmax' can't be null";
        }
        if ($this->container['eEzmaxinvoicingagentVariationezmax'] === null) {
            $invalidProperties[] = "'eEzmaxinvoicingagentVariationezmax' can't be null";
        }
        if ($this->container['bEzmaxinvoicingagentBillableezsign'] === null) {
            $invalidProperties[] = "'bEzmaxinvoicingagentBillableezsign' can't be null";
        }
        if ($this->container['eEzmaxinvoicingagentVariationezsign'] === null) {
            $invalidProperties[] = "'eEzmaxinvoicingagentVariationezsign' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pkiEzmaxinvoicingagentID
     *
     * @return int|null
     */
    public function getPkiEzmaxinvoicingagentID()
    {
        return $this->container['pkiEzmaxinvoicingagentID'];
    }

    /**
     * Sets pkiEzmaxinvoicingagentID
     *
     * @param int|null $pkiEzmaxinvoicingagentID The unique ID of the Ezmaxinvoicingagent
     *
     * @return self
     */
    public function setPkiEzmaxinvoicingagentID($pkiEzmaxinvoicingagentID)
    {

        if (!is_null($pkiEzmaxinvoicingagentID) && ($pkiEzmaxinvoicingagentID < 0)) {
            throw new \InvalidArgumentException('invalid value for $pkiEzmaxinvoicingagentID when calling EzmaxinvoicingagentResponse., must be bigger than or equal to 0.');
        }


        //if (is_null($pkiEzmaxinvoicingagentID)) {
            //throw new \InvalidArgumentException('non-nullable pkiEzmaxinvoicingagentID cannot be null');
        //}
        $this->container['pkiEzmaxinvoicingagentID'] = (is_null($pkiEzmaxinvoicingagentID) ? null : (int) $pkiEzmaxinvoicingagentID);

        return $this;
    }

    /**
     * Gets fkiEzmaxinvoicingID
     *
     * @return int|null
     */
    public function getFkiEzmaxinvoicingID()
    {
        return $this->container['fkiEzmaxinvoicingID'];
    }

    /**
     * Sets fkiEzmaxinvoicingID
     *
     * @param int|null $fkiEzmaxinvoicingID The unique ID of the Ezmaxinvoicing
     *
     * @return self
     */
    public function setFkiEzmaxinvoicingID($fkiEzmaxinvoicingID)
    {

        if (!is_null($fkiEzmaxinvoicingID) && ($fkiEzmaxinvoicingID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiEzmaxinvoicingID when calling EzmaxinvoicingagentResponse., must be bigger than or equal to 0.');
        }


        //if (is_null($fkiEzmaxinvoicingID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzmaxinvoicingID cannot be null');
        //}
        $this->container['fkiEzmaxinvoicingID'] = (is_null($fkiEzmaxinvoicingID) ? null : (int) $fkiEzmaxinvoicingID);

        return $this;
    }

    /**
     * Gets fkiBillingentityinternalID
     *
     * @return int
     */
    public function getFkiBillingentityinternalID()
    {
        return $this->container['fkiBillingentityinternalID'];
    }

    /**
     * Sets fkiBillingentityinternalID
     *
     * @param int $fkiBillingentityinternalID The unique ID of the Billingentityinternal.
     *
     * @return self
     */
    public function setFkiBillingentityinternalID($fkiBillingentityinternalID)
    {

        if (($fkiBillingentityinternalID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiBillingentityinternalID when calling EzmaxinvoicingagentResponse., must be bigger than or equal to 0.');
        }


        //if (is_null($fkiBillingentityinternalID)) {
            //throw new \InvalidArgumentException('non-nullable fkiBillingentityinternalID cannot be null');
        //}
        $this->container['fkiBillingentityinternalID'] = (is_null($fkiBillingentityinternalID) ? null : (int) $fkiBillingentityinternalID);

        return $this;
    }

    /**
     * Gets sBillingentityinternalDescriptionX
     *
     * @return string
     */
    public function getSBillingentityinternalDescriptionX()
    {
        return $this->container['sBillingentityinternalDescriptionX'];
    }

    /**
     * Sets sBillingentityinternalDescriptionX
     *
     * @param string $sBillingentityinternalDescriptionX The description of the Billingentityinternal in the language of the requester
     *
     * @return self
     */
    public function setSBillingentityinternalDescriptionX($sBillingentityinternalDescriptionX)
    {

        //if (is_null($sBillingentityinternalDescriptionX)) {
            //throw new \InvalidArgumentException('non-nullable sBillingentityinternalDescriptionX cannot be null');
        //}
        $this->container['sBillingentityinternalDescriptionX'] = (is_null($sBillingentityinternalDescriptionX) ? null : (string) $sBillingentityinternalDescriptionX);

        return $this;
    }

    /**
     * Gets fkiAgentID
     *
     * @return int|null
     */
    public function getFkiAgentID()
    {
        return $this->container['fkiAgentID'];
    }

    /**
     * Sets fkiAgentID
     *
     * @param int|null $fkiAgentID The unique ID of the Agent.
     *
     * @return self
     */
    public function setFkiAgentID($fkiAgentID)
    {

        if (!is_null($fkiAgentID) && ($fkiAgentID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiAgentID when calling EzmaxinvoicingagentResponse., must be bigger than or equal to 0.');
        }


        //if (is_null($fkiAgentID)) {
            //throw new \InvalidArgumentException('non-nullable fkiAgentID cannot be null');
        //}
        $this->container['fkiAgentID'] = (is_null($fkiAgentID) ? null : (int) $fkiAgentID);

        return $this;
    }

    /**
     * Gets fkiBrokerID
     *
     * @return int|null
     */
    public function getFkiBrokerID()
    {
        return $this->container['fkiBrokerID'];
    }

    /**
     * Sets fkiBrokerID
     *
     * @param int|null $fkiBrokerID The unique ID of the Broker.
     *
     * @return self
     */
    public function setFkiBrokerID($fkiBrokerID)
    {

        if (!is_null($fkiBrokerID) && ($fkiBrokerID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiBrokerID when calling EzmaxinvoicingagentResponse., must be bigger than or equal to 0.');
        }


        //if (is_null($fkiBrokerID)) {
            //throw new \InvalidArgumentException('non-nullable fkiBrokerID cannot be null');
        //}
        $this->container['fkiBrokerID'] = (is_null($fkiBrokerID) ? null : (int) $fkiBrokerID);

        return $this;
    }

    /**
     * Gets iEzmaxinvoicingagentSession
     *
     * @return int
     */
    public function getIEzmaxinvoicingagentSession()
    {
        return $this->container['iEzmaxinvoicingagentSession'];
    }

    /**
     * Sets iEzmaxinvoicingagentSession
     *
     * @param int $iEzmaxinvoicingagentSession The number of sessions
     *
     * @return self
     */
    public function setIEzmaxinvoicingagentSession($iEzmaxinvoicingagentSession)
    {

        if (($iEzmaxinvoicingagentSession < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzmaxinvoicingagentSession when calling EzmaxinvoicingagentResponse., must be bigger than or equal to 0.');
        }


        //if (is_null($iEzmaxinvoicingagentSession)) {
            //throw new \InvalidArgumentException('non-nullable iEzmaxinvoicingagentSession cannot be null');
        //}
        $this->container['iEzmaxinvoicingagentSession'] = (is_null($iEzmaxinvoicingagentSession) ? null : (int) $iEzmaxinvoicingagentSession);

        return $this;
    }

    /**
     * Gets iEzmaxinvoicingagentCloned
     *
     * @return int
     */
    public function getIEzmaxinvoicingagentCloned()
    {
        return $this->container['iEzmaxinvoicingagentCloned'];
    }

    /**
     * Sets iEzmaxinvoicingagentCloned
     *
     * @param int $iEzmaxinvoicingagentCloned The number of times this user was cloned
     *
     * @return self
     */
    public function setIEzmaxinvoicingagentCloned($iEzmaxinvoicingagentCloned)
    {

        if (($iEzmaxinvoicingagentCloned < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzmaxinvoicingagentCloned when calling EzmaxinvoicingagentResponse., must be bigger than or equal to 0.');
        }


        //if (is_null($iEzmaxinvoicingagentCloned)) {
            //throw new \InvalidArgumentException('non-nullable iEzmaxinvoicingagentCloned cannot be null');
        //}
        $this->container['iEzmaxinvoicingagentCloned'] = (is_null($iEzmaxinvoicingagentCloned) ? null : (int) $iEzmaxinvoicingagentCloned);

        return $this;
    }

    /**
     * Gets iEzmaxinvoicingagentInvoice
     *
     * @return int
     */
    public function getIEzmaxinvoicingagentInvoice()
    {
        return $this->container['iEzmaxinvoicingagentInvoice'];
    }

    /**
     * Sets iEzmaxinvoicingagentInvoice
     *
     * @param int $iEzmaxinvoicingagentInvoice The number of invoices
     *
     * @return self
     */
    public function setIEzmaxinvoicingagentInvoice($iEzmaxinvoicingagentInvoice)
    {

        if (($iEzmaxinvoicingagentInvoice < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzmaxinvoicingagentInvoice when calling EzmaxinvoicingagentResponse., must be bigger than or equal to 0.');
        }


        //if (is_null($iEzmaxinvoicingagentInvoice)) {
            //throw new \InvalidArgumentException('non-nullable iEzmaxinvoicingagentInvoice cannot be null');
        //}
        $this->container['iEzmaxinvoicingagentInvoice'] = (is_null($iEzmaxinvoicingagentInvoice) ? null : (int) $iEzmaxinvoicingagentInvoice);

        return $this;
    }

    /**
     * Gets iEzmaxinvoicingagentInscription
     *
     * @return int
     */
    public function getIEzmaxinvoicingagentInscription()
    {
        return $this->container['iEzmaxinvoicingagentInscription'];
    }

    /**
     * Sets iEzmaxinvoicingagentInscription
     *
     * @param int $iEzmaxinvoicingagentInscription The number of inscriptions
     *
     * @return self
     */
    public function setIEzmaxinvoicingagentInscription($iEzmaxinvoicingagentInscription)
    {

        if (($iEzmaxinvoicingagentInscription < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzmaxinvoicingagentInscription when calling EzmaxinvoicingagentResponse., must be bigger than or equal to 0.');
        }


        //if (is_null($iEzmaxinvoicingagentInscription)) {
            //throw new \InvalidArgumentException('non-nullable iEzmaxinvoicingagentInscription cannot be null');
        //}
        $this->container['iEzmaxinvoicingagentInscription'] = (is_null($iEzmaxinvoicingagentInscription) ? null : (int) $iEzmaxinvoicingagentInscription);

        return $this;
    }

    /**
     * Gets iEzmaxinvoicingagentInscriptionactive
     *
     * @return int
     */
    public function getIEzmaxinvoicingagentInscriptionactive()
    {
        return $this->container['iEzmaxinvoicingagentInscriptionactive'];
    }

    /**
     * Sets iEzmaxinvoicingagentInscriptionactive
     *
     * @param int $iEzmaxinvoicingagentInscriptionactive The number of active inscriptions
     *
     * @return self
     */
    public function setIEzmaxinvoicingagentInscriptionactive($iEzmaxinvoicingagentInscriptionactive)
    {

        if (($iEzmaxinvoicingagentInscriptionactive < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzmaxinvoicingagentInscriptionactive when calling EzmaxinvoicingagentResponse., must be bigger than or equal to 0.');
        }


        //if (is_null($iEzmaxinvoicingagentInscriptionactive)) {
            //throw new \InvalidArgumentException('non-nullable iEzmaxinvoicingagentInscriptionactive cannot be null');
        //}
        $this->container['iEzmaxinvoicingagentInscriptionactive'] = (is_null($iEzmaxinvoicingagentInscriptionactive) ? null : (int) $iEzmaxinvoicingagentInscriptionactive);

        return $this;
    }

    /**
     * Gets iEzmaxinvoicingagentSale
     *
     * @return int
     */
    public function getIEzmaxinvoicingagentSale()
    {
        return $this->container['iEzmaxinvoicingagentSale'];
    }

    /**
     * Sets iEzmaxinvoicingagentSale
     *
     * @param int $iEzmaxinvoicingagentSale The number of sales
     *
     * @return self
     */
    public function setIEzmaxinvoicingagentSale($iEzmaxinvoicingagentSale)
    {

        if (($iEzmaxinvoicingagentSale < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzmaxinvoicingagentSale when calling EzmaxinvoicingagentResponse., must be bigger than or equal to 0.');
        }


        //if (is_null($iEzmaxinvoicingagentSale)) {
            //throw new \InvalidArgumentException('non-nullable iEzmaxinvoicingagentSale cannot be null');
        //}
        $this->container['iEzmaxinvoicingagentSale'] = (is_null($iEzmaxinvoicingagentSale) ? null : (int) $iEzmaxinvoicingagentSale);

        return $this;
    }

    /**
     * Gets iEzmaxinvoicingagentOtherincome
     *
     * @return int
     */
    public function getIEzmaxinvoicingagentOtherincome()
    {
        return $this->container['iEzmaxinvoicingagentOtherincome'];
    }

    /**
     * Sets iEzmaxinvoicingagentOtherincome
     *
     * @param int $iEzmaxinvoicingagentOtherincome The number of otherincomes
     *
     * @return self
     */
    public function setIEzmaxinvoicingagentOtherincome($iEzmaxinvoicingagentOtherincome)
    {

        if (($iEzmaxinvoicingagentOtherincome < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzmaxinvoicingagentOtherincome when calling EzmaxinvoicingagentResponse., must be bigger than or equal to 0.');
        }


        //if (is_null($iEzmaxinvoicingagentOtherincome)) {
            //throw new \InvalidArgumentException('non-nullable iEzmaxinvoicingagentOtherincome cannot be null');
        //}
        $this->container['iEzmaxinvoicingagentOtherincome'] = (is_null($iEzmaxinvoicingagentOtherincome) ? null : (int) $iEzmaxinvoicingagentOtherincome);

        return $this;
    }

    /**
     * Gets iEzmaxinvoicingagentCommissioncalculation
     *
     * @return int
     */
    public function getIEzmaxinvoicingagentCommissioncalculation()
    {
        return $this->container['iEzmaxinvoicingagentCommissioncalculation'];
    }

    /**
     * Sets iEzmaxinvoicingagentCommissioncalculation
     *
     * @param int $iEzmaxinvoicingagentCommissioncalculation The number of commission calculations
     *
     * @return self
     */
    public function setIEzmaxinvoicingagentCommissioncalculation($iEzmaxinvoicingagentCommissioncalculation)
    {

        if (($iEzmaxinvoicingagentCommissioncalculation < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzmaxinvoicingagentCommissioncalculation when calling EzmaxinvoicingagentResponse., must be bigger than or equal to 0.');
        }


        //if (is_null($iEzmaxinvoicingagentCommissioncalculation)) {
            //throw new \InvalidArgumentException('non-nullable iEzmaxinvoicingagentCommissioncalculation cannot be null');
        //}
        $this->container['iEzmaxinvoicingagentCommissioncalculation'] = (is_null($iEzmaxinvoicingagentCommissioncalculation) ? null : (int) $iEzmaxinvoicingagentCommissioncalculation);

        return $this;
    }

    /**
     * Gets iEzmaxinvoicingagentEzsigndocument
     *
     * @return int
     */
    public function getIEzmaxinvoicingagentEzsigndocument()
    {
        return $this->container['iEzmaxinvoicingagentEzsigndocument'];
    }

    /**
     * Sets iEzmaxinvoicingagentEzsigndocument
     *
     * @param int $iEzmaxinvoicingagentEzsigndocument The number of ezsign documents
     *
     * @return self
     */
    public function setIEzmaxinvoicingagentEzsigndocument($iEzmaxinvoicingagentEzsigndocument)
    {

        if (($iEzmaxinvoicingagentEzsigndocument < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzmaxinvoicingagentEzsigndocument when calling EzmaxinvoicingagentResponse., must be bigger than or equal to 0.');
        }


        //if (is_null($iEzmaxinvoicingagentEzsigndocument)) {
            //throw new \InvalidArgumentException('non-nullable iEzmaxinvoicingagentEzsigndocument cannot be null');
        //}
        $this->container['iEzmaxinvoicingagentEzsigndocument'] = (is_null($iEzmaxinvoicingagentEzsigndocument) ? null : (int) $iEzmaxinvoicingagentEzsigndocument);

        return $this;
    }

    /**
     * Gets bEzmaxinvoicingagentEzsignaccount
     *
     * @return bool
     */
    public function getBEzmaxinvoicingagentEzsignaccount()
    {
        return $this->container['bEzmaxinvoicingagentEzsignaccount'];
    }

    /**
     * Sets bEzmaxinvoicingagentEzsignaccount
     *
     * @param bool $bEzmaxinvoicingagentEzsignaccount Whether the agent has an eZsign account
     *
     * @return self
     */
    public function setBEzmaxinvoicingagentEzsignaccount($bEzmaxinvoicingagentEzsignaccount)
    {

        //if (is_null($bEzmaxinvoicingagentEzsignaccount)) {
            //throw new \InvalidArgumentException('non-nullable bEzmaxinvoicingagentEzsignaccount cannot be null');
        //}
        $this->container['bEzmaxinvoicingagentEzsignaccount'] = (is_null($bEzmaxinvoicingagentEzsignaccount) ? null : (bool) $bEzmaxinvoicingagentEzsignaccount);

        return $this;
    }

    /**
     * Gets bEzmaxinvoicingagentBillableezmax
     *
     * @return bool
     */
    public function getBEzmaxinvoicingagentBillableezmax()
    {
        return $this->container['bEzmaxinvoicingagentBillableezmax'];
    }

    /**
     * Sets bEzmaxinvoicingagentBillableezmax
     *
     * @param bool $bEzmaxinvoicingagentBillableezmax Whether it is billable for eZmax
     *
     * @return self
     */
    public function setBEzmaxinvoicingagentBillableezmax($bEzmaxinvoicingagentBillableezmax)
    {

        //if (is_null($bEzmaxinvoicingagentBillableezmax)) {
            //throw new \InvalidArgumentException('non-nullable bEzmaxinvoicingagentBillableezmax cannot be null');
        //}
        $this->container['bEzmaxinvoicingagentBillableezmax'] = (is_null($bEzmaxinvoicingagentBillableezmax) ? null : (bool) $bEzmaxinvoicingagentBillableezmax);

        return $this;
    }

    /**
     * Gets eEzmaxinvoicingagentVariationezmax
     *
     * @return \eZmaxAPI\Model\FieldEEzmaxinvoicingagentVariationezmax
     */
    public function getEEzmaxinvoicingagentVariationezmax()
    {
        return $this->container['eEzmaxinvoicingagentVariationezmax'];
    }

    /**
     * Sets eEzmaxinvoicingagentVariationezmax
     *
     * @param \eZmaxAPI\Model\FieldEEzmaxinvoicingagentVariationezmax $eEzmaxinvoicingagentVariationezmax eEzmaxinvoicingagentVariationezmax
     *
     * @return self
     */
    public function setEEzmaxinvoicingagentVariationezmax($eEzmaxinvoicingagentVariationezmax)
    {

        //if (is_null($eEzmaxinvoicingagentVariationezmax)) {
            //throw new \InvalidArgumentException('non-nullable eEzmaxinvoicingagentVariationezmax cannot be null');
        //}
        $this->container['eEzmaxinvoicingagentVariationezmax'] = $eEzmaxinvoicingagentVariationezmax;

        return $this;
    }

    /**
     * Gets bEzmaxinvoicingagentBillableezsign
     *
     * @return bool
     */
    public function getBEzmaxinvoicingagentBillableezsign()
    {
        return $this->container['bEzmaxinvoicingagentBillableezsign'];
    }

    /**
     * Sets bEzmaxinvoicingagentBillableezsign
     *
     * @param bool $bEzmaxinvoicingagentBillableezsign Whether it is billable for eZsign
     *
     * @return self
     */
    public function setBEzmaxinvoicingagentBillableezsign($bEzmaxinvoicingagentBillableezsign)
    {

        //if (is_null($bEzmaxinvoicingagentBillableezsign)) {
            //throw new \InvalidArgumentException('non-nullable bEzmaxinvoicingagentBillableezsign cannot be null');
        //}
        $this->container['bEzmaxinvoicingagentBillableezsign'] = (is_null($bEzmaxinvoicingagentBillableezsign) ? null : (bool) $bEzmaxinvoicingagentBillableezsign);

        return $this;
    }

    /**
     * Gets eEzmaxinvoicingagentVariationezsign
     *
     * @return \eZmaxAPI\Model\FieldEEzmaxinvoicingagentVariationezsign
     */
    public function getEEzmaxinvoicingagentVariationezsign()
    {
        return $this->container['eEzmaxinvoicingagentVariationezsign'];
    }

    /**
     * Sets eEzmaxinvoicingagentVariationezsign
     *
     * @param \eZmaxAPI\Model\FieldEEzmaxinvoicingagentVariationezsign $eEzmaxinvoicingagentVariationezsign eEzmaxinvoicingagentVariationezsign
     *
     * @return self
     */
    public function setEEzmaxinvoicingagentVariationezsign($eEzmaxinvoicingagentVariationezsign)
    {

        //if (is_null($eEzmaxinvoicingagentVariationezsign)) {
            //throw new \InvalidArgumentException('non-nullable eEzmaxinvoicingagentVariationezsign cannot be null');
        //}
        $this->container['eEzmaxinvoicingagentVariationezsign'] = $eEzmaxinvoicingagentVariationezsign;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


