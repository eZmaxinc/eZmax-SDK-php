<?php
/**
 * CustomEzsignsignaturestatusResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * CustomEzsignsignaturestatusResponse Class Doc Comment
 *
 * @category Class
 * @description A Ezsignsignaturestatus Object and children to create a complete structure
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CustomEzsignsignaturestatusResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Custom-Ezsignsignaturestatus-Response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'eEzsignsignaturestatusSteptype' => 'string',
        'iEzsignsignaturestatusStep' => 'int',
        'iEzsignsignaturestatusTotal' => 'int',
        'iEzsignsignaturestatusSigned' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'eEzsignsignaturestatusSteptype' => null,
        'iEzsignsignaturestatusStep' => null,
        'iEzsignsignaturestatusTotal' => null,
        'iEzsignsignaturestatusSigned' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'eEzsignsignaturestatusSteptype' => 'eEzsignsignaturestatusSteptype',
        'iEzsignsignaturestatusStep' => 'iEzsignsignaturestatusStep',
        'iEzsignsignaturestatusTotal' => 'iEzsignsignaturestatusTotal',
        'iEzsignsignaturestatusSigned' => 'iEzsignsignaturestatusSigned'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'eEzsignsignaturestatusSteptype' => 'setEEzsignsignaturestatusSteptype',
        'iEzsignsignaturestatusStep' => 'setIEzsignsignaturestatusStep',
        'iEzsignsignaturestatusTotal' => 'setIEzsignsignaturestatusTotal',
        'iEzsignsignaturestatusSigned' => 'setIEzsignsignaturestatusSigned'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'eEzsignsignaturestatusSteptype' => 'getEEzsignsignaturestatusSteptype',
        'iEzsignsignaturestatusStep' => 'getIEzsignsignaturestatusStep',
        'iEzsignsignaturestatusTotal' => 'getIEzsignsignaturestatusTotal',
        'iEzsignsignaturestatusSigned' => 'getIEzsignsignaturestatusSigned'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const E_EZSIGNSIGNATURESTATUS_STEPTYPE_FORM = 'Form';
    const E_EZSIGNSIGNATURESTATUS_STEPTYPE_SIGNATURE = 'Signature';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEEzsignsignaturestatusSteptypeAllowableValues()
    {
        return [
            self::E_EZSIGNSIGNATURESTATUS_STEPTYPE_FORM,
            self::E_EZSIGNSIGNATURESTATUS_STEPTYPE_SIGNATURE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['eEzsignsignaturestatusSteptype'] = $data['eEzsignsignaturestatusSteptype'] ?? null;
        $this->container['iEzsignsignaturestatusStep'] = $data['iEzsignsignaturestatusStep'] ?? null;
        $this->container['iEzsignsignaturestatusTotal'] = $data['iEzsignsignaturestatusTotal'] ?? null;
        $this->container['iEzsignsignaturestatusSigned'] = $data['iEzsignsignaturestatusSigned'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['eEzsignsignaturestatusSteptype'] === null) {
            $invalidProperties[] = "'eEzsignsignaturestatusSteptype' can't be null";
        }
        $allowedValues = $this->getEEzsignsignaturestatusSteptypeAllowableValues();
        if (!is_null($this->container['eEzsignsignaturestatusSteptype']) && !in_array($this->container['eEzsignsignaturestatusSteptype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eEzsignsignaturestatusSteptype', must be one of '%s'",
                $this->container['eEzsignsignaturestatusSteptype'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['iEzsignsignaturestatusStep'] === null) {
            $invalidProperties[] = "'iEzsignsignaturestatusStep' can't be null";
        }
        if ($this->container['iEzsignsignaturestatusTotal'] === null) {
            $invalidProperties[] = "'iEzsignsignaturestatusTotal' can't be null";
        }
        if ($this->container['iEzsignsignaturestatusSigned'] === null) {
            $invalidProperties[] = "'iEzsignsignaturestatusSigned' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets eEzsignsignaturestatusSteptype
     *
     * @return string
     */
    public function getEEzsignsignaturestatusSteptype()
    {
        return $this->container['eEzsignsignaturestatusSteptype'];
    }

    /**
     * Sets eEzsignsignaturestatusSteptype
     *
     * @param string $eEzsignsignaturestatusSteptype Type of step
     *
     * @return self
     */
    public function setEEzsignsignaturestatusSteptype($eEzsignsignaturestatusSteptype)
    {
        $allowedValues = $this->getEEzsignsignaturestatusSteptypeAllowableValues();
        if (!in_array($eEzsignsignaturestatusSteptype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eEzsignsignaturestatusSteptype', must be one of '%s'",
                    $eEzsignsignaturestatusSteptype,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eEzsignsignaturestatusSteptype'] = $eEzsignsignaturestatusSteptype;

        return $this;
    }

    /**
     * Gets iEzsignsignaturestatusStep
     *
     * @return int
     */
    public function getIEzsignsignaturestatusStep()
    {
        return $this->container['iEzsignsignaturestatusStep'];
    }

    /**
     * Sets iEzsignsignaturestatusStep
     *
     * @param int $iEzsignsignaturestatusStep The step at which the Ezsignsigner will be invited to sign or fill the form fields
     *
     * @return self
     */
    public function setIEzsignsignaturestatusStep($iEzsignsignaturestatusStep)
    {
        $this->container['iEzsignsignaturestatusStep'] = $iEzsignsignaturestatusStep;

        return $this;
    }

    /**
     * Gets iEzsignsignaturestatusTotal
     *
     * @return int
     */
    public function getIEzsignsignaturestatusTotal()
    {
        return $this->container['iEzsignsignaturestatusTotal'];
    }

    /**
     * Sets iEzsignsignaturestatusTotal
     *
     * @param int $iEzsignsignaturestatusTotal The total number of signature or form fields the Ezsignsigner must process at the current step
     *
     * @return self
     */
    public function setIEzsignsignaturestatusTotal($iEzsignsignaturestatusTotal)
    {
        $this->container['iEzsignsignaturestatusTotal'] = $iEzsignsignaturestatusTotal;

        return $this;
    }

    /**
     * Gets iEzsignsignaturestatusSigned
     *
     * @return int
     */
    public function getIEzsignsignaturestatusSigned()
    {
        return $this->container['iEzsignsignaturestatusSigned'];
    }

    /**
     * Sets iEzsignsignaturestatusSigned
     *
     * @param int $iEzsignsignaturestatusSigned The number of signature or form fields the Ezsignsigner has already processed at the current step
     *
     * @return self
     */
    public function setIEzsignsignaturestatusSigned($iEzsignsignaturestatusSigned)
    {
        $this->container['iEzsignsignaturestatusSigned'] = $iEzsignsignaturestatusSigned;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


