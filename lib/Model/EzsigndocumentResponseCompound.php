<?php
/**
 * EzsigndocumentResponseCompound
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * EzsigndocumentResponseCompound Class Doc Comment
 *
 * @category Class
 * @description An Ezsigndocument Object and children to create a complete structure
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EzsigndocumentResponseCompound implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ezsigndocument-ResponseCompound';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pkiEzsigndocumentID' => 'int',
        'fkiEzsignfolderID' => 'int',
        'fkiEzsignfoldersignerassociationIDDeclinedtosign' => 'int',
        'dtEzsigndocumentDuedate' => 'string',
        'dtEzsignformCompleted' => 'string',
        'fkiLanguageID' => 'int',
        'sEzsigndocumentName' => 'string',
        'eEzsigndocumentStep' => '\eZmaxAPI\Model\FieldEEzsigndocumentStep',
        'dtEzsigndocumentFirstsend' => 'string',
        'dtEzsigndocumentLastsend' => 'string',
        'iEzsigndocumentOrder' => 'int',
        'iEzsigndocumentPagetotal' => 'int',
        'iEzsigndocumentSignaturesigned' => 'int',
        'iEzsigndocumentSignaturetotal' => 'int',
        'iEzsigndocumentFormfieldtotal' => 'int',
        'sEzsigndocumentMD5initial' => 'string',
        'tEzsigndocumentDeclinedtosignreason' => 'string',
        'sEzsigndocumentMD5signed' => 'string',
        'bEzsigndocumentEzsignform' => 'bool',
        'bEzsigndocumentHassignedsignatures' => 'bool',
        'objAudit' => '\eZmaxAPI\Model\CommonAudit',
        'sEzsigndocumentExternalid' => 'string',
        'iEzsigndocumentEzsignsignatureattachmenttotal' => 'int',
        'iEzsigndocumentEzsigndiscussiontotal' => 'int',
        'eEzsigndocumentSteptype' => '\eZmaxAPI\Model\ComputedEEzsigndocumentSteptype',
        'iEzsigndocumentStepformtotal' => 'int',
        'iEzsigndocumentStepformcurrent' => 'int',
        'iEzsigndocumentStepsignaturetotal' => 'int',
        'iEzsigndocumentStepsignatureCurrent' => 'int',
        'aObjEzsignfoldersignerassociationstatus' => '\eZmaxAPI\Model\CustomEzsignfoldersignerassociationstatusResponse[]',
        'aObjEzsigndocumentdependency' => '\eZmaxAPI\Model\EzsigndocumentdependencyResponse[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pkiEzsigndocumentID' => null,
        'fkiEzsignfolderID' => null,
        'fkiEzsignfoldersignerassociationIDDeclinedtosign' => null,
        'dtEzsigndocumentDuedate' => null,
        'dtEzsignformCompleted' => null,
        'fkiLanguageID' => null,
        'sEzsigndocumentName' => null,
        'eEzsigndocumentStep' => null,
        'dtEzsigndocumentFirstsend' => null,
        'dtEzsigndocumentLastsend' => null,
        'iEzsigndocumentOrder' => null,
        'iEzsigndocumentPagetotal' => null,
        'iEzsigndocumentSignaturesigned' => null,
        'iEzsigndocumentSignaturetotal' => null,
        'iEzsigndocumentFormfieldtotal' => null,
        'sEzsigndocumentMD5initial' => null,
        'tEzsigndocumentDeclinedtosignreason' => null,
        'sEzsigndocumentMD5signed' => null,
        'bEzsigndocumentEzsignform' => null,
        'bEzsigndocumentHassignedsignatures' => null,
        'objAudit' => null,
        'sEzsigndocumentExternalid' => null,
        'iEzsigndocumentEzsignsignatureattachmenttotal' => null,
        'iEzsigndocumentEzsigndiscussiontotal' => null,
        'eEzsigndocumentSteptype' => null,
        'iEzsigndocumentStepformtotal' => null,
        'iEzsigndocumentStepformcurrent' => null,
        'iEzsigndocumentStepsignaturetotal' => null,
        'iEzsigndocumentStepsignatureCurrent' => null,
        'aObjEzsignfoldersignerassociationstatus' => null,
        'aObjEzsigndocumentdependency' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pkiEzsigndocumentID' => false,
		'fkiEzsignfolderID' => false,
		'fkiEzsignfoldersignerassociationIDDeclinedtosign' => false,
		'dtEzsigndocumentDuedate' => false,
		'dtEzsignformCompleted' => false,
		'fkiLanguageID' => false,
		'sEzsigndocumentName' => false,
		'eEzsigndocumentStep' => false,
		'dtEzsigndocumentFirstsend' => false,
		'dtEzsigndocumentLastsend' => false,
		'iEzsigndocumentOrder' => false,
		'iEzsigndocumentPagetotal' => false,
		'iEzsigndocumentSignaturesigned' => false,
		'iEzsigndocumentSignaturetotal' => false,
		'iEzsigndocumentFormfieldtotal' => false,
		'sEzsigndocumentMD5initial' => false,
		'tEzsigndocumentDeclinedtosignreason' => false,
		'sEzsigndocumentMD5signed' => false,
		'bEzsigndocumentEzsignform' => false,
		'bEzsigndocumentHassignedsignatures' => false,
		'objAudit' => false,
		'sEzsigndocumentExternalid' => false,
		'iEzsigndocumentEzsignsignatureattachmenttotal' => false,
		'iEzsigndocumentEzsigndiscussiontotal' => false,
		'eEzsigndocumentSteptype' => false,
		'iEzsigndocumentStepformtotal' => false,
		'iEzsigndocumentStepformcurrent' => false,
		'iEzsigndocumentStepsignaturetotal' => false,
		'iEzsigndocumentStepsignatureCurrent' => false,
		'aObjEzsignfoldersignerassociationstatus' => false,
		'aObjEzsigndocumentdependency' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pkiEzsigndocumentID' => 'pkiEzsigndocumentID',
        'fkiEzsignfolderID' => 'fkiEzsignfolderID',
        'fkiEzsignfoldersignerassociationIDDeclinedtosign' => 'fkiEzsignfoldersignerassociationIDDeclinedtosign',
        'dtEzsigndocumentDuedate' => 'dtEzsigndocumentDuedate',
        'dtEzsignformCompleted' => 'dtEzsignformCompleted',
        'fkiLanguageID' => 'fkiLanguageID',
        'sEzsigndocumentName' => 'sEzsigndocumentName',
        'eEzsigndocumentStep' => 'eEzsigndocumentStep',
        'dtEzsigndocumentFirstsend' => 'dtEzsigndocumentFirstsend',
        'dtEzsigndocumentLastsend' => 'dtEzsigndocumentLastsend',
        'iEzsigndocumentOrder' => 'iEzsigndocumentOrder',
        'iEzsigndocumentPagetotal' => 'iEzsigndocumentPagetotal',
        'iEzsigndocumentSignaturesigned' => 'iEzsigndocumentSignaturesigned',
        'iEzsigndocumentSignaturetotal' => 'iEzsigndocumentSignaturetotal',
        'iEzsigndocumentFormfieldtotal' => 'iEzsigndocumentFormfieldtotal',
        'sEzsigndocumentMD5initial' => 'sEzsigndocumentMD5initial',
        'tEzsigndocumentDeclinedtosignreason' => 'tEzsigndocumentDeclinedtosignreason',
        'sEzsigndocumentMD5signed' => 'sEzsigndocumentMD5signed',
        'bEzsigndocumentEzsignform' => 'bEzsigndocumentEzsignform',
        'bEzsigndocumentHassignedsignatures' => 'bEzsigndocumentHassignedsignatures',
        'objAudit' => 'objAudit',
        'sEzsigndocumentExternalid' => 'sEzsigndocumentExternalid',
        'iEzsigndocumentEzsignsignatureattachmenttotal' => 'iEzsigndocumentEzsignsignatureattachmenttotal',
        'iEzsigndocumentEzsigndiscussiontotal' => 'iEzsigndocumentEzsigndiscussiontotal',
        'eEzsigndocumentSteptype' => 'eEzsigndocumentSteptype',
        'iEzsigndocumentStepformtotal' => 'iEzsigndocumentStepformtotal',
        'iEzsigndocumentStepformcurrent' => 'iEzsigndocumentStepformcurrent',
        'iEzsigndocumentStepsignaturetotal' => 'iEzsigndocumentStepsignaturetotal',
        'iEzsigndocumentStepsignatureCurrent' => 'iEzsigndocumentStepsignatureCurrent',
        'aObjEzsignfoldersignerassociationstatus' => 'a_objEzsignfoldersignerassociationstatus',
        'aObjEzsigndocumentdependency' => 'a_objEzsigndocumentdependency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pkiEzsigndocumentID' => 'setPkiEzsigndocumentID',
        'fkiEzsignfolderID' => 'setFkiEzsignfolderID',
        'fkiEzsignfoldersignerassociationIDDeclinedtosign' => 'setFkiEzsignfoldersignerassociationIDDeclinedtosign',
        'dtEzsigndocumentDuedate' => 'setDtEzsigndocumentDuedate',
        'dtEzsignformCompleted' => 'setDtEzsignformCompleted',
        'fkiLanguageID' => 'setFkiLanguageID',
        'sEzsigndocumentName' => 'setSEzsigndocumentName',
        'eEzsigndocumentStep' => 'setEEzsigndocumentStep',
        'dtEzsigndocumentFirstsend' => 'setDtEzsigndocumentFirstsend',
        'dtEzsigndocumentLastsend' => 'setDtEzsigndocumentLastsend',
        'iEzsigndocumentOrder' => 'setIEzsigndocumentOrder',
        'iEzsigndocumentPagetotal' => 'setIEzsigndocumentPagetotal',
        'iEzsigndocumentSignaturesigned' => 'setIEzsigndocumentSignaturesigned',
        'iEzsigndocumentSignaturetotal' => 'setIEzsigndocumentSignaturetotal',
        'iEzsigndocumentFormfieldtotal' => 'setIEzsigndocumentFormfieldtotal',
        'sEzsigndocumentMD5initial' => 'setSEzsigndocumentMD5initial',
        'tEzsigndocumentDeclinedtosignreason' => 'setTEzsigndocumentDeclinedtosignreason',
        'sEzsigndocumentMD5signed' => 'setSEzsigndocumentMD5signed',
        'bEzsigndocumentEzsignform' => 'setBEzsigndocumentEzsignform',
        'bEzsigndocumentHassignedsignatures' => 'setBEzsigndocumentHassignedsignatures',
        'objAudit' => 'setObjAudit',
        'sEzsigndocumentExternalid' => 'setSEzsigndocumentExternalid',
        'iEzsigndocumentEzsignsignatureattachmenttotal' => 'setIEzsigndocumentEzsignsignatureattachmenttotal',
        'iEzsigndocumentEzsigndiscussiontotal' => 'setIEzsigndocumentEzsigndiscussiontotal',
        'eEzsigndocumentSteptype' => 'setEEzsigndocumentSteptype',
        'iEzsigndocumentStepformtotal' => 'setIEzsigndocumentStepformtotal',
        'iEzsigndocumentStepformcurrent' => 'setIEzsigndocumentStepformcurrent',
        'iEzsigndocumentStepsignaturetotal' => 'setIEzsigndocumentStepsignaturetotal',
        'iEzsigndocumentStepsignatureCurrent' => 'setIEzsigndocumentStepsignatureCurrent',
        'aObjEzsignfoldersignerassociationstatus' => 'setAObjEzsignfoldersignerassociationstatus',
        'aObjEzsigndocumentdependency' => 'setAObjEzsigndocumentdependency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pkiEzsigndocumentID' => 'getPkiEzsigndocumentID',
        'fkiEzsignfolderID' => 'getFkiEzsignfolderID',
        'fkiEzsignfoldersignerassociationIDDeclinedtosign' => 'getFkiEzsignfoldersignerassociationIDDeclinedtosign',
        'dtEzsigndocumentDuedate' => 'getDtEzsigndocumentDuedate',
        'dtEzsignformCompleted' => 'getDtEzsignformCompleted',
        'fkiLanguageID' => 'getFkiLanguageID',
        'sEzsigndocumentName' => 'getSEzsigndocumentName',
        'eEzsigndocumentStep' => 'getEEzsigndocumentStep',
        'dtEzsigndocumentFirstsend' => 'getDtEzsigndocumentFirstsend',
        'dtEzsigndocumentLastsend' => 'getDtEzsigndocumentLastsend',
        'iEzsigndocumentOrder' => 'getIEzsigndocumentOrder',
        'iEzsigndocumentPagetotal' => 'getIEzsigndocumentPagetotal',
        'iEzsigndocumentSignaturesigned' => 'getIEzsigndocumentSignaturesigned',
        'iEzsigndocumentSignaturetotal' => 'getIEzsigndocumentSignaturetotal',
        'iEzsigndocumentFormfieldtotal' => 'getIEzsigndocumentFormfieldtotal',
        'sEzsigndocumentMD5initial' => 'getSEzsigndocumentMD5initial',
        'tEzsigndocumentDeclinedtosignreason' => 'getTEzsigndocumentDeclinedtosignreason',
        'sEzsigndocumentMD5signed' => 'getSEzsigndocumentMD5signed',
        'bEzsigndocumentEzsignform' => 'getBEzsigndocumentEzsignform',
        'bEzsigndocumentHassignedsignatures' => 'getBEzsigndocumentHassignedsignatures',
        'objAudit' => 'getObjAudit',
        'sEzsigndocumentExternalid' => 'getSEzsigndocumentExternalid',
        'iEzsigndocumentEzsignsignatureattachmenttotal' => 'getIEzsigndocumentEzsignsignatureattachmenttotal',
        'iEzsigndocumentEzsigndiscussiontotal' => 'getIEzsigndocumentEzsigndiscussiontotal',
        'eEzsigndocumentSteptype' => 'getEEzsigndocumentSteptype',
        'iEzsigndocumentStepformtotal' => 'getIEzsigndocumentStepformtotal',
        'iEzsigndocumentStepformcurrent' => 'getIEzsigndocumentStepformcurrent',
        'iEzsigndocumentStepsignaturetotal' => 'getIEzsigndocumentStepsignaturetotal',
        'iEzsigndocumentStepsignatureCurrent' => 'getIEzsigndocumentStepsignatureCurrent',
        'aObjEzsignfoldersignerassociationstatus' => 'getAObjEzsignfoldersignerassociationstatus',
        'aObjEzsigndocumentdependency' => 'getAObjEzsigndocumentdependency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pkiEzsigndocumentID', $data ?? [], null);
        $this->setIfExists('fkiEzsignfolderID', $data ?? [], null);
        $this->setIfExists('fkiEzsignfoldersignerassociationIDDeclinedtosign', $data ?? [], null);
        $this->setIfExists('dtEzsigndocumentDuedate', $data ?? [], null);
        $this->setIfExists('dtEzsignformCompleted', $data ?? [], null);
        $this->setIfExists('fkiLanguageID', $data ?? [], null);
        $this->setIfExists('sEzsigndocumentName', $data ?? [], null);
        $this->setIfExists('eEzsigndocumentStep', $data ?? [], null);
        $this->setIfExists('dtEzsigndocumentFirstsend', $data ?? [], null);
        $this->setIfExists('dtEzsigndocumentLastsend', $data ?? [], null);
        $this->setIfExists('iEzsigndocumentOrder', $data ?? [], null);
        $this->setIfExists('iEzsigndocumentPagetotal', $data ?? [], null);
        $this->setIfExists('iEzsigndocumentSignaturesigned', $data ?? [], null);
        $this->setIfExists('iEzsigndocumentSignaturetotal', $data ?? [], null);
        $this->setIfExists('iEzsigndocumentFormfieldtotal', $data ?? [], null);
        $this->setIfExists('sEzsigndocumentMD5initial', $data ?? [], null);
        $this->setIfExists('tEzsigndocumentDeclinedtosignreason', $data ?? [], null);
        $this->setIfExists('sEzsigndocumentMD5signed', $data ?? [], null);
        $this->setIfExists('bEzsigndocumentEzsignform', $data ?? [], null);
        $this->setIfExists('bEzsigndocumentHassignedsignatures', $data ?? [], null);
        $this->setIfExists('objAudit', $data ?? [], null);
        $this->setIfExists('sEzsigndocumentExternalid', $data ?? [], null);
        $this->setIfExists('iEzsigndocumentEzsignsignatureattachmenttotal', $data ?? [], null);
        $this->setIfExists('iEzsigndocumentEzsigndiscussiontotal', $data ?? [], null);
        $this->setIfExists('eEzsigndocumentSteptype', $data ?? [], null);
        $this->setIfExists('iEzsigndocumentStepformtotal', $data ?? [], null);
        $this->setIfExists('iEzsigndocumentStepformcurrent', $data ?? [], null);
        $this->setIfExists('iEzsigndocumentStepsignaturetotal', $data ?? [], null);
        $this->setIfExists('iEzsigndocumentStepsignatureCurrent', $data ?? [], null);
        $this->setIfExists('aObjEzsignfoldersignerassociationstatus', $data ?? [], null);
        $this->setIfExists('aObjEzsigndocumentdependency', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pkiEzsigndocumentID'] === null) {
            $invalidProperties[] = "'pkiEzsigndocumentID' can't be null";
        }
        if (($this->container['pkiEzsigndocumentID'] < 0)) {
            $invalidProperties[] = "invalid value for 'pkiEzsigndocumentID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiEzsignfolderID'] === null) {
            $invalidProperties[] = "'fkiEzsignfolderID' can't be null";
        }
        if (($this->container['fkiEzsignfolderID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzsignfolderID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzsignfoldersignerassociationIDDeclinedtosign']) && ($this->container['fkiEzsignfoldersignerassociationIDDeclinedtosign'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzsignfoldersignerassociationIDDeclinedtosign', must be bigger than or equal to 0.";
        }

        if ($this->container['dtEzsigndocumentDuedate'] === null) {
            $invalidProperties[] = "'dtEzsigndocumentDuedate' can't be null";
        }
        if (!is_null($this->container['fkiLanguageID']) && ($this->container['fkiLanguageID'] > 2)) {
            $invalidProperties[] = "invalid value for 'fkiLanguageID', must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['fkiLanguageID']) && ($this->container['fkiLanguageID'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiLanguageID', must be bigger than or equal to 1.";
        }

        if ($this->container['sEzsigndocumentName'] === null) {
            $invalidProperties[] = "'sEzsigndocumentName' can't be null";
        }
        if ($this->container['eEzsigndocumentStep'] === null) {
            $invalidProperties[] = "'eEzsigndocumentStep' can't be null";
        }
        if ($this->container['iEzsigndocumentOrder'] === null) {
            $invalidProperties[] = "'iEzsigndocumentOrder' can't be null";
        }
        if (($this->container['iEzsigndocumentOrder'] < 1)) {
            $invalidProperties[] = "invalid value for 'iEzsigndocumentOrder', must be bigger than or equal to 1.";
        }

        if ($this->container['iEzsigndocumentPagetotal'] === null) {
            $invalidProperties[] = "'iEzsigndocumentPagetotal' can't be null";
        }
        if (($this->container['iEzsigndocumentPagetotal'] < 1)) {
            $invalidProperties[] = "invalid value for 'iEzsigndocumentPagetotal', must be bigger than or equal to 1.";
        }

        if ($this->container['iEzsigndocumentSignaturesigned'] === null) {
            $invalidProperties[] = "'iEzsigndocumentSignaturesigned' can't be null";
        }
        if (($this->container['iEzsigndocumentSignaturesigned'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzsigndocumentSignaturesigned', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzsigndocumentSignaturetotal'] === null) {
            $invalidProperties[] = "'iEzsigndocumentSignaturetotal' can't be null";
        }
        if (($this->container['iEzsigndocumentSignaturetotal'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzsigndocumentSignaturetotal', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzsigndocumentFormfieldtotal'] === null) {
            $invalidProperties[] = "'iEzsigndocumentFormfieldtotal' can't be null";
        }
        if (($this->container['iEzsigndocumentFormfieldtotal'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzsigndocumentFormfieldtotal', must be bigger than or equal to 0.";
        }

	//if (!is_null($this->container['sEzsigndocumentExternalid']) && !preg_match("/^.{0,128}$/", $this->container['sEzsigndocumentExternalid'])) {
        if (!is_null($this->container['sEzsigndocumentExternalid']) && !preg_match("/(*UTF8)^.{0,128}$/", $this->container['sEzsigndocumentExternalid'])) {
            $invalidProperties[] = "invalid value for 'sEzsigndocumentExternalid', must be conform to the pattern /^.{0,128}$/.";
        }

        if ($this->container['iEzsigndocumentEzsignsignatureattachmenttotal'] === null) {
            $invalidProperties[] = "'iEzsigndocumentEzsignsignatureattachmenttotal' can't be null";
        }
        if (($this->container['iEzsigndocumentEzsignsignatureattachmenttotal'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzsigndocumentEzsignsignatureattachmenttotal', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzsigndocumentEzsigndiscussiontotal'] === null) {
            $invalidProperties[] = "'iEzsigndocumentEzsigndiscussiontotal' can't be null";
        }
        if ($this->container['eEzsigndocumentSteptype'] === null) {
            $invalidProperties[] = "'eEzsigndocumentSteptype' can't be null";
        }
        if ($this->container['iEzsigndocumentStepformtotal'] === null) {
            $invalidProperties[] = "'iEzsigndocumentStepformtotal' can't be null";
        }
        if ($this->container['iEzsigndocumentStepformcurrent'] === null) {
            $invalidProperties[] = "'iEzsigndocumentStepformcurrent' can't be null";
        }
        if ($this->container['iEzsigndocumentStepsignaturetotal'] === null) {
            $invalidProperties[] = "'iEzsigndocumentStepsignaturetotal' can't be null";
        }
        if ($this->container['iEzsigndocumentStepsignatureCurrent'] === null) {
            $invalidProperties[] = "'iEzsigndocumentStepsignatureCurrent' can't be null";
        }
        if ($this->container['aObjEzsignfoldersignerassociationstatus'] === null) {
            $invalidProperties[] = "'aObjEzsignfoldersignerassociationstatus' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pkiEzsigndocumentID
     *
     * @return int
     */
    public function getPkiEzsigndocumentID()
    {
	//return $this->container['pkiEzsigndocumentID'];
        return $this->container['pkiEzsigndocumentID'];
    }

    /**
     * Sets pkiEzsigndocumentID
     *
     * @param int $pkiEzsigndocumentID The unique ID of the Ezsigndocument
     *
     * @return self
     */
    public function setPkiEzsigndocumentID($pkiEzsigndocumentID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($pkiEzsigndocumentID)) {
            //throw new \InvalidArgumentException('non-nullable pkiEzsigndocumentID cannot be null');
        //}

	//if (($pkiEzsigndocumentID < 0)) {
        if (($pkiEzsigndocumentID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $pkiEzsigndocumentID when calling EzsigndocumentResponseCompound., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsigndocumentID)?'null':'"'.$pkiEzsigndocumentID.'"').' for pkiEzsigndocumentID when calling EzsigndocumentResponseCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['pkiEzsigndocumentID'] = $pkiEzsigndocumentID;
        $this->container['pkiEzsigndocumentID'] = (is_null($pkiEzsigndocumentID) ? null : (int) $pkiEzsigndocumentID);

        return $this;
    }

    /**
     * Gets fkiEzsignfolderID
     *
     * @return int
     */
    public function getFkiEzsignfolderID()
    {
	//return $this->container['fkiEzsignfolderID'];
        return $this->container['fkiEzsignfolderID'];
    }

    /**
     * Sets fkiEzsignfolderID
     *
     * @param int $fkiEzsignfolderID The unique ID of the Ezsignfolder
     *
     * @return self
     */
    public function setFkiEzsignfolderID($fkiEzsignfolderID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzsignfolderID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzsignfolderID cannot be null');
        //}

	//if (($fkiEzsignfolderID < 0)) {
        if (($fkiEzsignfolderID < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzsignfolderID when calling EzsigndocumentResponseCompound., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzsignfolderID)?'null':'"'.$fkiEzsignfolderID.'"').' for fkiEzsignfolderID when calling EzsigndocumentResponseCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzsignfolderID'] = $fkiEzsignfolderID;
        $this->container['fkiEzsignfolderID'] = (is_null($fkiEzsignfolderID) ? null : (int) $fkiEzsignfolderID);

        return $this;
    }

    /**
     * Gets fkiEzsignfoldersignerassociationIDDeclinedtosign
     *
     * @return int|null
     */
    public function getFkiEzsignfoldersignerassociationIDDeclinedtosign()
    {
	//return $this->container['fkiEzsignfoldersignerassociationIDDeclinedtosign'];
        return $this->container['fkiEzsignfoldersignerassociationIDDeclinedtosign'];
    }

    /**
     * Sets fkiEzsignfoldersignerassociationIDDeclinedtosign
     *
     * @param int|null $fkiEzsignfoldersignerassociationIDDeclinedtosign The unique ID of the Ezsignfoldersignerassociation
     *
     * @return self
     */
    public function setFkiEzsignfoldersignerassociationIDDeclinedtosign($fkiEzsignfoldersignerassociationIDDeclinedtosign)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzsignfoldersignerassociationIDDeclinedtosign)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzsignfoldersignerassociationIDDeclinedtosign cannot be null');
        //}

	//if (($fkiEzsignfoldersignerassociationIDDeclinedtosign < 0)) {
        if (!is_null($fkiEzsignfoldersignerassociationIDDeclinedtosign) && ($fkiEzsignfoldersignerassociationIDDeclinedtosign < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiEzsignfoldersignerassociationIDDeclinedtosign when calling EzsigndocumentResponseCompound., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiEzsignfoldersignerassociationIDDeclinedtosign)?'null':'"'.$fkiEzsignfoldersignerassociationIDDeclinedtosign.'"').' for fkiEzsignfoldersignerassociationIDDeclinedtosign when calling EzsigndocumentResponseCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzsignfoldersignerassociationIDDeclinedtosign'] = $fkiEzsignfoldersignerassociationIDDeclinedtosign;
        $this->container['fkiEzsignfoldersignerassociationIDDeclinedtosign'] = (is_null($fkiEzsignfoldersignerassociationIDDeclinedtosign) ? null : (int) $fkiEzsignfoldersignerassociationIDDeclinedtosign);

        return $this;
    }

    /**
     * Gets dtEzsigndocumentDuedate
     *
     * @return string
     */
    public function getDtEzsigndocumentDuedate()
    {
	//return $this->container['dtEzsigndocumentDuedate'];
        return is_null($this->container['dtEzsigndocumentDuedate']) ? null : trim($this->container['dtEzsigndocumentDuedate']);
    }

    /**
     * Sets dtEzsigndocumentDuedate
     *
     * @param string $dtEzsigndocumentDuedate The maximum date and time at which the Ezsigndocument can be signed.
     *
     * @return self
     */
    public function setDtEzsigndocumentDuedate($dtEzsigndocumentDuedate)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtEzsigndocumentDuedate)) {
            //throw new \InvalidArgumentException('non-nullable dtEzsigndocumentDuedate cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtEzsigndocumentDuedate'] = $dtEzsigndocumentDuedate;
        $this->container['dtEzsigndocumentDuedate'] = (is_null($dtEzsigndocumentDuedate) ? null : trim((string) $dtEzsigndocumentDuedate));

        return $this;
    }

    /**
     * Gets dtEzsignformCompleted
     *
     * @return string|null
     */
    public function getDtEzsignformCompleted()
    {
	//return $this->container['dtEzsignformCompleted'];
        return is_null($this->container['dtEzsignformCompleted']) ? null : trim($this->container['dtEzsignformCompleted']);
    }

    /**
     * Sets dtEzsignformCompleted
     *
     * @param string|null $dtEzsignformCompleted The date and time at which the Ezsignform has been completed.
     *
     * @return self
     */
    public function setDtEzsignformCompleted($dtEzsignformCompleted)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtEzsignformCompleted)) {
            //throw new \InvalidArgumentException('non-nullable dtEzsignformCompleted cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtEzsignformCompleted'] = $dtEzsignformCompleted;
        $this->container['dtEzsignformCompleted'] = (is_null($dtEzsignformCompleted) ? null : trim((string) $dtEzsignformCompleted));

        return $this;
    }

    /**
     * Gets fkiLanguageID
     *
     * @return int|null
     */
    public function getFkiLanguageID()
    {
	//return $this->container['fkiLanguageID'];
        return $this->container['fkiLanguageID'];
    }

    /**
     * Sets fkiLanguageID
     *
     * @param int|null $fkiLanguageID The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
     *
     * @return self
     */
    public function setFkiLanguageID($fkiLanguageID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiLanguageID)) {
            //throw new \InvalidArgumentException('non-nullable fkiLanguageID cannot be null');
        //}

	//if (($fkiLanguageID > 2)) {
        if (!is_null($fkiLanguageID) && ($fkiLanguageID > 2)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiLanguageID when calling EzsigndocumentResponseCompound., must be smaller than or equal to 2.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiLanguageID)?'null':'"'.$fkiLanguageID.'"').' for fkiLanguageID when calling EzsigndocumentResponseCompound., must be smaller than or equal to 2.');
        }
	//if (($fkiLanguageID < 1)) {
        if (!is_null($fkiLanguageID) && ($fkiLanguageID < 1)) {
	    //throw new \InvalidArgumentException('invalid value for $fkiLanguageID when calling EzsigndocumentResponseCompound., must be bigger than or equal to 1.');
            throw new \InvalidArgumentException('invalid value '.(is_null($fkiLanguageID)?'null':'"'.$fkiLanguageID.'"').' for fkiLanguageID when calling EzsigndocumentResponseCompound., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiLanguageID'] = $fkiLanguageID;
        $this->container['fkiLanguageID'] = (is_null($fkiLanguageID) ? null : (int) $fkiLanguageID);

        return $this;
    }

    /**
     * Gets sEzsigndocumentName
     *
     * @return string
     */
    public function getSEzsigndocumentName()
    {
	//return $this->container['sEzsigndocumentName'];
        return is_null($this->container['sEzsigndocumentName']) ? null : trim($this->container['sEzsigndocumentName']);
    }

    /**
     * Sets sEzsigndocumentName
     *
     * @param string $sEzsigndocumentName The name of the document that will be presented to Ezsignfoldersignerassociations
     *
     * @return self
     */
    public function setSEzsigndocumentName($sEzsigndocumentName)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sEzsigndocumentName)) {
            //throw new \InvalidArgumentException('non-nullable sEzsigndocumentName cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sEzsigndocumentName'] = $sEzsigndocumentName;
        $this->container['sEzsigndocumentName'] = (is_null($sEzsigndocumentName) ? null : trim((string) $sEzsigndocumentName));

        return $this;
    }

    /**
     * Gets eEzsigndocumentStep
     *
     * @return \eZmaxAPI\Model\FieldEEzsigndocumentStep
     */
    public function getEEzsigndocumentStep()
    {
	//return $this->container['eEzsigndocumentStep'];
        return $this->container['eEzsigndocumentStep'];
    }

    /**
     * Sets eEzsigndocumentStep
     *
     * @param \eZmaxAPI\Model\FieldEEzsigndocumentStep $eEzsigndocumentStep eEzsigndocumentStep
     *
     * @return self
     */
    public function setEEzsigndocumentStep($eEzsigndocumentStep)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eEzsigndocumentStep)) {
            //throw new \InvalidArgumentException('non-nullable eEzsigndocumentStep cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eEzsigndocumentStep'] = $eEzsigndocumentStep;
        $this->container['eEzsigndocumentStep'] = $eEzsigndocumentStep;

        return $this;
    }

    /**
     * Gets dtEzsigndocumentFirstsend
     *
     * @return string|null
     */
    public function getDtEzsigndocumentFirstsend()
    {
	//return $this->container['dtEzsigndocumentFirstsend'];
        return is_null($this->container['dtEzsigndocumentFirstsend']) ? null : trim($this->container['dtEzsigndocumentFirstsend']);
    }

    /**
     * Sets dtEzsigndocumentFirstsend
     *
     * @param string|null $dtEzsigndocumentFirstsend The date and time when the Ezsigndocument was first sent.
     *
     * @return self
     */
    public function setDtEzsigndocumentFirstsend($dtEzsigndocumentFirstsend)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtEzsigndocumentFirstsend)) {
            //throw new \InvalidArgumentException('non-nullable dtEzsigndocumentFirstsend cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtEzsigndocumentFirstsend'] = $dtEzsigndocumentFirstsend;
        $this->container['dtEzsigndocumentFirstsend'] = (is_null($dtEzsigndocumentFirstsend) ? null : trim((string) $dtEzsigndocumentFirstsend));

        return $this;
    }

    /**
     * Gets dtEzsigndocumentLastsend
     *
     * @return string|null
     */
    public function getDtEzsigndocumentLastsend()
    {
	//return $this->container['dtEzsigndocumentLastsend'];
        return is_null($this->container['dtEzsigndocumentLastsend']) ? null : trim($this->container['dtEzsigndocumentLastsend']);
    }

    /**
     * Sets dtEzsigndocumentLastsend
     *
     * @param string|null $dtEzsigndocumentLastsend The date and time when the Ezsigndocument was sent the last time.
     *
     * @return self
     */
    public function setDtEzsigndocumentLastsend($dtEzsigndocumentLastsend)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtEzsigndocumentLastsend)) {
            //throw new \InvalidArgumentException('non-nullable dtEzsigndocumentLastsend cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtEzsigndocumentLastsend'] = $dtEzsigndocumentLastsend;
        $this->container['dtEzsigndocumentLastsend'] = (is_null($dtEzsigndocumentLastsend) ? null : trim((string) $dtEzsigndocumentLastsend));

        return $this;
    }

    /**
     * Gets iEzsigndocumentOrder
     *
     * @return int
     */
    public function getIEzsigndocumentOrder()
    {
	//return $this->container['iEzsigndocumentOrder'];
        return $this->container['iEzsigndocumentOrder'];
    }

    /**
     * Sets iEzsigndocumentOrder
     *
     * @param int $iEzsigndocumentOrder The order in which the Ezsigndocument will be presented to the signatory in the Ezsignfolder.
     *
     * @return self
     */
    public function setIEzsigndocumentOrder($iEzsigndocumentOrder)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigndocumentOrder)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigndocumentOrder cannot be null');
        //}

	//if (($iEzsigndocumentOrder < 1)) {
        if (($iEzsigndocumentOrder < 1)) {
	    //throw new \InvalidArgumentException('invalid value for $iEzsigndocumentOrder when calling EzsigndocumentResponseCompound., must be bigger than or equal to 1.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iEzsigndocumentOrder)?'null':'"'.$iEzsigndocumentOrder.'"').' for iEzsigndocumentOrder when calling EzsigndocumentResponseCompound., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigndocumentOrder'] = $iEzsigndocumentOrder;
        $this->container['iEzsigndocumentOrder'] = (is_null($iEzsigndocumentOrder) ? null : (int) $iEzsigndocumentOrder);

        return $this;
    }

    /**
     * Gets iEzsigndocumentPagetotal
     *
     * @return int
     */
    public function getIEzsigndocumentPagetotal()
    {
	//return $this->container['iEzsigndocumentPagetotal'];
        return $this->container['iEzsigndocumentPagetotal'];
    }

    /**
     * Sets iEzsigndocumentPagetotal
     *
     * @param int $iEzsigndocumentPagetotal The number of pages in the Ezsigndocument.
     *
     * @return self
     */
    public function setIEzsigndocumentPagetotal($iEzsigndocumentPagetotal)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigndocumentPagetotal)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigndocumentPagetotal cannot be null');
        //}

	//if (($iEzsigndocumentPagetotal < 1)) {
        if (($iEzsigndocumentPagetotal < 1)) {
	    //throw new \InvalidArgumentException('invalid value for $iEzsigndocumentPagetotal when calling EzsigndocumentResponseCompound., must be bigger than or equal to 1.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iEzsigndocumentPagetotal)?'null':'"'.$iEzsigndocumentPagetotal.'"').' for iEzsigndocumentPagetotal when calling EzsigndocumentResponseCompound., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigndocumentPagetotal'] = $iEzsigndocumentPagetotal;
        $this->container['iEzsigndocumentPagetotal'] = (is_null($iEzsigndocumentPagetotal) ? null : (int) $iEzsigndocumentPagetotal);

        return $this;
    }

    /**
     * Gets iEzsigndocumentSignaturesigned
     *
     * @return int
     */
    public function getIEzsigndocumentSignaturesigned()
    {
	//return $this->container['iEzsigndocumentSignaturesigned'];
        return $this->container['iEzsigndocumentSignaturesigned'];
    }

    /**
     * Sets iEzsigndocumentSignaturesigned
     *
     * @param int $iEzsigndocumentSignaturesigned The number of signatures that were signed in the document.
     *
     * @return self
     */
    public function setIEzsigndocumentSignaturesigned($iEzsigndocumentSignaturesigned)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigndocumentSignaturesigned)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigndocumentSignaturesigned cannot be null');
        //}

	//if (($iEzsigndocumentSignaturesigned < 0)) {
        if (($iEzsigndocumentSignaturesigned < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $iEzsigndocumentSignaturesigned when calling EzsigndocumentResponseCompound., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iEzsigndocumentSignaturesigned)?'null':'"'.$iEzsigndocumentSignaturesigned.'"').' for iEzsigndocumentSignaturesigned when calling EzsigndocumentResponseCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigndocumentSignaturesigned'] = $iEzsigndocumentSignaturesigned;
        $this->container['iEzsigndocumentSignaturesigned'] = (is_null($iEzsigndocumentSignaturesigned) ? null : (int) $iEzsigndocumentSignaturesigned);

        return $this;
    }

    /**
     * Gets iEzsigndocumentSignaturetotal
     *
     * @return int
     */
    public function getIEzsigndocumentSignaturetotal()
    {
	//return $this->container['iEzsigndocumentSignaturetotal'];
        return $this->container['iEzsigndocumentSignaturetotal'];
    }

    /**
     * Sets iEzsigndocumentSignaturetotal
     *
     * @param int $iEzsigndocumentSignaturetotal The number of total signatures that were requested in the Ezsigndocument.
     *
     * @return self
     */
    public function setIEzsigndocumentSignaturetotal($iEzsigndocumentSignaturetotal)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigndocumentSignaturetotal)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigndocumentSignaturetotal cannot be null');
        //}

	//if (($iEzsigndocumentSignaturetotal < 0)) {
        if (($iEzsigndocumentSignaturetotal < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $iEzsigndocumentSignaturetotal when calling EzsigndocumentResponseCompound., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iEzsigndocumentSignaturetotal)?'null':'"'.$iEzsigndocumentSignaturetotal.'"').' for iEzsigndocumentSignaturetotal when calling EzsigndocumentResponseCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigndocumentSignaturetotal'] = $iEzsigndocumentSignaturetotal;
        $this->container['iEzsigndocumentSignaturetotal'] = (is_null($iEzsigndocumentSignaturetotal) ? null : (int) $iEzsigndocumentSignaturetotal);

        return $this;
    }

    /**
     * Gets iEzsigndocumentFormfieldtotal
     *
     * @return int
     */
    public function getIEzsigndocumentFormfieldtotal()
    {
	//return $this->container['iEzsigndocumentFormfieldtotal'];
        return $this->container['iEzsigndocumentFormfieldtotal'];
    }

    /**
     * Sets iEzsigndocumentFormfieldtotal
     *
     * @param int $iEzsigndocumentFormfieldtotal The number of total Ezsignformfield that were requested in the Ezsigndocument.
     *
     * @return self
     */
    public function setIEzsigndocumentFormfieldtotal($iEzsigndocumentFormfieldtotal)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigndocumentFormfieldtotal)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigndocumentFormfieldtotal cannot be null');
        //}

	//if (($iEzsigndocumentFormfieldtotal < 0)) {
        if (($iEzsigndocumentFormfieldtotal < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $iEzsigndocumentFormfieldtotal when calling EzsigndocumentResponseCompound., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iEzsigndocumentFormfieldtotal)?'null':'"'.$iEzsigndocumentFormfieldtotal.'"').' for iEzsigndocumentFormfieldtotal when calling EzsigndocumentResponseCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigndocumentFormfieldtotal'] = $iEzsigndocumentFormfieldtotal;
        $this->container['iEzsigndocumentFormfieldtotal'] = (is_null($iEzsigndocumentFormfieldtotal) ? null : (int) $iEzsigndocumentFormfieldtotal);

        return $this;
    }

    /**
     * Gets sEzsigndocumentMD5initial
     *
     * @return string|null
     */
    public function getSEzsigndocumentMD5initial()
    {
	//return $this->container['sEzsigndocumentMD5initial'];
        return is_null($this->container['sEzsigndocumentMD5initial']) ? null : trim($this->container['sEzsigndocumentMD5initial']);
    }

    /**
     * Sets sEzsigndocumentMD5initial
     *
     * @param string|null $sEzsigndocumentMD5initial MD5 Hash of the initial PDF Document before signatures were applied to it.
     *
     * @return self
     */
    public function setSEzsigndocumentMD5initial($sEzsigndocumentMD5initial)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sEzsigndocumentMD5initial)) {
            //throw new \InvalidArgumentException('non-nullable sEzsigndocumentMD5initial cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sEzsigndocumentMD5initial'] = $sEzsigndocumentMD5initial;
        $this->container['sEzsigndocumentMD5initial'] = (is_null($sEzsigndocumentMD5initial) ? null : trim((string) $sEzsigndocumentMD5initial));

        return $this;
    }

    /**
     * Gets tEzsigndocumentDeclinedtosignreason
     *
     * @return string|null
     */
    public function getTEzsigndocumentDeclinedtosignreason()
    {
	//return $this->container['tEzsigndocumentDeclinedtosignreason'];
        return is_null($this->container['tEzsigndocumentDeclinedtosignreason']) ? null : trim($this->container['tEzsigndocumentDeclinedtosignreason']);
    }

    /**
     * Sets tEzsigndocumentDeclinedtosignreason
     *
     * @param string|null $tEzsigndocumentDeclinedtosignreason A custom text message that will contain the refusal message if the Ezsigndocument is declined to sign
     *
     * @return self
     */
    public function setTEzsigndocumentDeclinedtosignreason($tEzsigndocumentDeclinedtosignreason)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($tEzsigndocumentDeclinedtosignreason)) {
            //throw new \InvalidArgumentException('non-nullable tEzsigndocumentDeclinedtosignreason cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['tEzsigndocumentDeclinedtosignreason'] = $tEzsigndocumentDeclinedtosignreason;
        $this->container['tEzsigndocumentDeclinedtosignreason'] = (is_null($tEzsigndocumentDeclinedtosignreason) ? null : trim((string) $tEzsigndocumentDeclinedtosignreason));

        return $this;
    }

    /**
     * Gets sEzsigndocumentMD5signed
     *
     * @return string|null
     */
    public function getSEzsigndocumentMD5signed()
    {
	//return $this->container['sEzsigndocumentMD5signed'];
        return is_null($this->container['sEzsigndocumentMD5signed']) ? null : trim($this->container['sEzsigndocumentMD5signed']);
    }

    /**
     * Sets sEzsigndocumentMD5signed
     *
     * @param string|null $sEzsigndocumentMD5signed MD5 Hash of the final PDF Document after all signatures were applied to it.
     *
     * @return self
     */
    public function setSEzsigndocumentMD5signed($sEzsigndocumentMD5signed)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sEzsigndocumentMD5signed)) {
            //throw new \InvalidArgumentException('non-nullable sEzsigndocumentMD5signed cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sEzsigndocumentMD5signed'] = $sEzsigndocumentMD5signed;
        $this->container['sEzsigndocumentMD5signed'] = (is_null($sEzsigndocumentMD5signed) ? null : trim((string) $sEzsigndocumentMD5signed));

        return $this;
    }

    /**
     * Gets bEzsigndocumentEzsignform
     *
     * @return bool|null
     */
    public function getBEzsigndocumentEzsignform()
    {
	//return $this->container['bEzsigndocumentEzsignform'];
        return $this->container['bEzsigndocumentEzsignform'];
    }

    /**
     * Sets bEzsigndocumentEzsignform
     *
     * @param bool|null $bEzsigndocumentEzsignform If the Ezsigndocument contains an Ezsignform or not
     *
     * @return self
     */
    public function setBEzsigndocumentEzsignform($bEzsigndocumentEzsignform)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bEzsigndocumentEzsignform)) {
            //throw new \InvalidArgumentException('non-nullable bEzsigndocumentEzsignform cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bEzsigndocumentEzsignform'] = $bEzsigndocumentEzsignform;
        $this->container['bEzsigndocumentEzsignform'] = (is_null($bEzsigndocumentEzsignform) ? null : (bool) $bEzsigndocumentEzsignform);

        return $this;
    }

    /**
     * Gets bEzsigndocumentHassignedsignatures
     *
     * @return bool|null
     */
    public function getBEzsigndocumentHassignedsignatures()
    {
	//return $this->container['bEzsigndocumentHassignedsignatures'];
        return $this->container['bEzsigndocumentHassignedsignatures'];
    }

    /**
     * Sets bEzsigndocumentHassignedsignatures
     *
     * @param bool|null $bEzsigndocumentHassignedsignatures If the Ezsigndocument contains signed signatures (From internal or external sources)
     *
     * @return self
     */
    public function setBEzsigndocumentHassignedsignatures($bEzsigndocumentHassignedsignatures)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bEzsigndocumentHassignedsignatures)) {
            //throw new \InvalidArgumentException('non-nullable bEzsigndocumentHassignedsignatures cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bEzsigndocumentHassignedsignatures'] = $bEzsigndocumentHassignedsignatures;
        $this->container['bEzsigndocumentHassignedsignatures'] = (is_null($bEzsigndocumentHassignedsignatures) ? null : (bool) $bEzsigndocumentHassignedsignatures);

        return $this;
    }

    /**
     * Gets objAudit
     *
     * @return \eZmaxAPI\Model\CommonAudit|null
     */
    public function getObjAudit()
    {
	//return $this->container['objAudit'];
        return $this->container['objAudit'];
    }

    /**
     * Sets objAudit
     *
     * @param \eZmaxAPI\Model\CommonAudit|null $objAudit objAudit
     *
     * @return self
     */
    public function setObjAudit($objAudit)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($objAudit)) {
            //throw new \InvalidArgumentException('non-nullable objAudit cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['objAudit'] = $objAudit;
        $this->container['objAudit'] = $objAudit;

        return $this;
    }

    /**
     * Gets sEzsigndocumentExternalid
     *
     * @return string|null
     */
    public function getSEzsigndocumentExternalid()
    {
	//return $this->container['sEzsigndocumentExternalid'];
        return is_null($this->container['sEzsigndocumentExternalid']) ? null : trim($this->container['sEzsigndocumentExternalid']);
    }

    /**
     * Sets sEzsigndocumentExternalid
     *
     * @param string|null $sEzsigndocumentExternalid This field can be used to store an External ID from the client's system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format.
     *
     * @return self
     */
    public function setSEzsigndocumentExternalid($sEzsigndocumentExternalid)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sEzsigndocumentExternalid)) {
            //throw new \InvalidArgumentException('non-nullable sEzsigndocumentExternalid cannot be null');
        //}

	//if ((!preg_match("/^.{0,128}$/", ObjectSerializer::toString($sEzsigndocumentExternalid)))) {
        if (!is_null($sEzsigndocumentExternalid) && (!preg_match("/(*UTF8)^.{0,128}$/", ObjectSerializer::toString($sEzsigndocumentExternalid)))) {
	    //throw new \InvalidArgumentException("invalid value for \$sEzsigndocumentExternalid when calling EzsigndocumentResponseCompound., must conform to the pattern /^.{0,128}$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($sEzsigndocumentExternalid)?'null':'"'.$sEzsigndocumentExternalid.'"')." for sEzsigndocumentExternalid when calling EzsigndocumentResponseCompound., must conform to the pattern /^.{0,128}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sEzsigndocumentExternalid'] = $sEzsigndocumentExternalid;
        $this->container['sEzsigndocumentExternalid'] = (is_null($sEzsigndocumentExternalid) ? null : trim((string) $sEzsigndocumentExternalid));

        return $this;
    }

    /**
     * Gets iEzsigndocumentEzsignsignatureattachmenttotal
     *
     * @return int
     */
    public function getIEzsigndocumentEzsignsignatureattachmenttotal()
    {
	//return $this->container['iEzsigndocumentEzsignsignatureattachmenttotal'];
        return $this->container['iEzsigndocumentEzsignsignatureattachmenttotal'];
    }

    /**
     * Sets iEzsigndocumentEzsignsignatureattachmenttotal
     *
     * @param int $iEzsigndocumentEzsignsignatureattachmenttotal The number of Ezsigndocumentattachment total
     *
     * @return self
     */
    public function setIEzsigndocumentEzsignsignatureattachmenttotal($iEzsigndocumentEzsignsignatureattachmenttotal)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigndocumentEzsignsignatureattachmenttotal)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigndocumentEzsignsignatureattachmenttotal cannot be null');
        //}

	//if (($iEzsigndocumentEzsignsignatureattachmenttotal < 0)) {
        if (($iEzsigndocumentEzsignsignatureattachmenttotal < 0)) {
	    //throw new \InvalidArgumentException('invalid value for $iEzsigndocumentEzsignsignatureattachmenttotal when calling EzsigndocumentResponseCompound., must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iEzsigndocumentEzsignsignatureattachmenttotal)?'null':'"'.$iEzsigndocumentEzsignsignatureattachmenttotal.'"').' for iEzsigndocumentEzsignsignatureattachmenttotal when calling EzsigndocumentResponseCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigndocumentEzsignsignatureattachmenttotal'] = $iEzsigndocumentEzsignsignatureattachmenttotal;
        $this->container['iEzsigndocumentEzsignsignatureattachmenttotal'] = (is_null($iEzsigndocumentEzsignsignatureattachmenttotal) ? null : (int) $iEzsigndocumentEzsignsignatureattachmenttotal);

        return $this;
    }

    /**
     * Gets iEzsigndocumentEzsigndiscussiontotal
     *
     * @return int
     */
    public function getIEzsigndocumentEzsigndiscussiontotal()
    {
	//return $this->container['iEzsigndocumentEzsigndiscussiontotal'];
        return $this->container['iEzsigndocumentEzsigndiscussiontotal'];
    }

    /**
     * Sets iEzsigndocumentEzsigndiscussiontotal
     *
     * @param int $iEzsigndocumentEzsigndiscussiontotal The total number of Ezsigndiscussions
     *
     * @return self
     */
    public function setIEzsigndocumentEzsigndiscussiontotal($iEzsigndocumentEzsigndiscussiontotal)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigndocumentEzsigndiscussiontotal)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigndocumentEzsigndiscussiontotal cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigndocumentEzsigndiscussiontotal'] = $iEzsigndocumentEzsigndiscussiontotal;
        $this->container['iEzsigndocumentEzsigndiscussiontotal'] = (is_null($iEzsigndocumentEzsigndiscussiontotal) ? null : (int) $iEzsigndocumentEzsigndiscussiontotal);

        return $this;
    }

    /**
     * Gets eEzsigndocumentSteptype
     *
     * @return \eZmaxAPI\Model\ComputedEEzsigndocumentSteptype
     */
    public function getEEzsigndocumentSteptype()
    {
	//return $this->container['eEzsigndocumentSteptype'];
        return $this->container['eEzsigndocumentSteptype'];
    }

    /**
     * Sets eEzsigndocumentSteptype
     *
     * @param \eZmaxAPI\Model\ComputedEEzsigndocumentSteptype $eEzsigndocumentSteptype eEzsigndocumentSteptype
     *
     * @return self
     */
    public function setEEzsigndocumentSteptype($eEzsigndocumentSteptype)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eEzsigndocumentSteptype)) {
            //throw new \InvalidArgumentException('non-nullable eEzsigndocumentSteptype cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eEzsigndocumentSteptype'] = $eEzsigndocumentSteptype;
        $this->container['eEzsigndocumentSteptype'] = $eEzsigndocumentSteptype;

        return $this;
    }

    /**
     * Gets iEzsigndocumentStepformtotal
     *
     * @return int
     */
    public function getIEzsigndocumentStepformtotal()
    {
	//return $this->container['iEzsigndocumentStepformtotal'];
        return $this->container['iEzsigndocumentStepformtotal'];
    }

    /**
     * Sets iEzsigndocumentStepformtotal
     *
     * @param int $iEzsigndocumentStepformtotal The total number of steps in the form filling phase
     *
     * @return self
     */
    public function setIEzsigndocumentStepformtotal($iEzsigndocumentStepformtotal)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigndocumentStepformtotal)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigndocumentStepformtotal cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigndocumentStepformtotal'] = $iEzsigndocumentStepformtotal;
        $this->container['iEzsigndocumentStepformtotal'] = (is_null($iEzsigndocumentStepformtotal) ? null : (int) $iEzsigndocumentStepformtotal);

        return $this;
    }

    /**
     * Gets iEzsigndocumentStepformcurrent
     *
     * @return int
     */
    public function getIEzsigndocumentStepformcurrent()
    {
	//return $this->container['iEzsigndocumentStepformcurrent'];
        return $this->container['iEzsigndocumentStepformcurrent'];
    }

    /**
     * Sets iEzsigndocumentStepformcurrent
     *
     * @param int $iEzsigndocumentStepformcurrent The current step in the form filling phase
     *
     * @return self
     */
    public function setIEzsigndocumentStepformcurrent($iEzsigndocumentStepformcurrent)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigndocumentStepformcurrent)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigndocumentStepformcurrent cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigndocumentStepformcurrent'] = $iEzsigndocumentStepformcurrent;
        $this->container['iEzsigndocumentStepformcurrent'] = (is_null($iEzsigndocumentStepformcurrent) ? null : (int) $iEzsigndocumentStepformcurrent);

        return $this;
    }

    /**
     * Gets iEzsigndocumentStepsignaturetotal
     *
     * @return int
     */
    public function getIEzsigndocumentStepsignaturetotal()
    {
	//return $this->container['iEzsigndocumentStepsignaturetotal'];
        return $this->container['iEzsigndocumentStepsignaturetotal'];
    }

    /**
     * Sets iEzsigndocumentStepsignaturetotal
     *
     * @param int $iEzsigndocumentStepsignaturetotal The total number of steps in the signature filling phase
     *
     * @return self
     */
    public function setIEzsigndocumentStepsignaturetotal($iEzsigndocumentStepsignaturetotal)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigndocumentStepsignaturetotal)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigndocumentStepsignaturetotal cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigndocumentStepsignaturetotal'] = $iEzsigndocumentStepsignaturetotal;
        $this->container['iEzsigndocumentStepsignaturetotal'] = (is_null($iEzsigndocumentStepsignaturetotal) ? null : (int) $iEzsigndocumentStepsignaturetotal);

        return $this;
    }

    /**
     * Gets iEzsigndocumentStepsignatureCurrent
     *
     * @return int
     */
    public function getIEzsigndocumentStepsignatureCurrent()
    {
	//return $this->container['iEzsigndocumentStepsignatureCurrent'];
        return $this->container['iEzsigndocumentStepsignatureCurrent'];
    }

    /**
     * Sets iEzsigndocumentStepsignatureCurrent
     *
     * @param int $iEzsigndocumentStepsignatureCurrent The current step in the signature phase
     *
     * @return self
     */
    public function setIEzsigndocumentStepsignatureCurrent($iEzsigndocumentStepsignatureCurrent)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($iEzsigndocumentStepsignatureCurrent)) {
            //throw new \InvalidArgumentException('non-nullable iEzsigndocumentStepsignatureCurrent cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['iEzsigndocumentStepsignatureCurrent'] = $iEzsigndocumentStepsignatureCurrent;
        $this->container['iEzsigndocumentStepsignatureCurrent'] = (is_null($iEzsigndocumentStepsignatureCurrent) ? null : (int) $iEzsigndocumentStepsignatureCurrent);

        return $this;
    }

    /**
     * Gets aObjEzsignfoldersignerassociationstatus
     *
     * @return \eZmaxAPI\Model\CustomEzsignfoldersignerassociationstatusResponse[]
     */
    public function getAObjEzsignfoldersignerassociationstatus()
    {
	//return $this->container['aObjEzsignfoldersignerassociationstatus'];
        return $this->container['aObjEzsignfoldersignerassociationstatus'];
    }

    /**
     * Sets aObjEzsignfoldersignerassociationstatus
     *
     * @param \eZmaxAPI\Model\CustomEzsignfoldersignerassociationstatusResponse[] $aObjEzsignfoldersignerassociationstatus aObjEzsignfoldersignerassociationstatus
     *
     * @return self
     */
    public function setAObjEzsignfoldersignerassociationstatus($aObjEzsignfoldersignerassociationstatus)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($aObjEzsignfoldersignerassociationstatus)) {
            //throw new \InvalidArgumentException('non-nullable aObjEzsignfoldersignerassociationstatus cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['aObjEzsignfoldersignerassociationstatus'] = $aObjEzsignfoldersignerassociationstatus;
        $this->container['aObjEzsignfoldersignerassociationstatus'] = $aObjEzsignfoldersignerassociationstatus;

        return $this;
    }

    /**
     * Gets aObjEzsigndocumentdependency
     *
     * @return \eZmaxAPI\Model\EzsigndocumentdependencyResponse[]|null
     */
    public function getAObjEzsigndocumentdependency()
    {
	//return $this->container['aObjEzsigndocumentdependency'];
        return $this->container['aObjEzsigndocumentdependency'];
    }

    /**
     * Sets aObjEzsigndocumentdependency
     *
     * @param \eZmaxAPI\Model\EzsigndocumentdependencyResponse[]|null $aObjEzsigndocumentdependency aObjEzsigndocumentdependency
     *
     * @return self
     */
    public function setAObjEzsigndocumentdependency($aObjEzsigndocumentdependency)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($aObjEzsigndocumentdependency)) {
            //throw new \InvalidArgumentException('non-nullable aObjEzsigndocumentdependency cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['aObjEzsigndocumentdependency'] = $aObjEzsigndocumentdependency;
        $this->container['aObjEzsigndocumentdependency'] = $aObjEzsigndocumentdependency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


