<?php
/**
 * EzsignsignerResponseCompound
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * EzsignsignerResponseCompound Class Doc Comment
 *
 * @category Class
 * @description An Ezsignsigner Object and children to create a complete structure
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EzsignsignerResponseCompound implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ezsignsigner-ResponseCompound';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'objContact' => '\eZmaxAPI\Model\EzsignsignerResponseCompoundContact',
        'pkiEzsignsignerID' => 'int',
        'fkiTaxassignmentID' => 'int',
        'fkiSecretquestionID' => 'int',
        'fkiUserlogintypeID' => 'int',
        'sUserlogintypeDescriptionX' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'objContact' => null,
        'pkiEzsignsignerID' => null,
        'fkiTaxassignmentID' => null,
        'fkiSecretquestionID' => null,
        'fkiUserlogintypeID' => null,
        'sUserlogintypeDescriptionX' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'objContact' => 'objContact',
        'pkiEzsignsignerID' => 'pkiEzsignsignerID',
        'fkiTaxassignmentID' => 'fkiTaxassignmentID',
        'fkiSecretquestionID' => 'fkiSecretquestionID',
        'fkiUserlogintypeID' => 'fkiUserlogintypeID',
        'sUserlogintypeDescriptionX' => 'sUserlogintypeDescriptionX'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'objContact' => 'setObjContact',
        'pkiEzsignsignerID' => 'setPkiEzsignsignerID',
        'fkiTaxassignmentID' => 'setFkiTaxassignmentID',
        'fkiSecretquestionID' => 'setFkiSecretquestionID',
        'fkiUserlogintypeID' => 'setFkiUserlogintypeID',
        'sUserlogintypeDescriptionX' => 'setSUserlogintypeDescriptionX'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'objContact' => 'getObjContact',
        'pkiEzsignsignerID' => 'getPkiEzsignsignerID',
        'fkiTaxassignmentID' => 'getFkiTaxassignmentID',
        'fkiSecretquestionID' => 'getFkiSecretquestionID',
        'fkiUserlogintypeID' => 'getFkiUserlogintypeID',
        'sUserlogintypeDescriptionX' => 'getSUserlogintypeDescriptionX'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['objContact'] = $data['objContact'] ?? null;
        $this->container['pkiEzsignsignerID'] = $data['pkiEzsignsignerID'] ?? null;
        $this->container['fkiTaxassignmentID'] = $data['fkiTaxassignmentID'] ?? null;
        $this->container['fkiSecretquestionID'] = $data['fkiSecretquestionID'] ?? null;
        $this->container['fkiUserlogintypeID'] = $data['fkiUserlogintypeID'] ?? null;
        $this->container['sUserlogintypeDescriptionX'] = $data['sUserlogintypeDescriptionX'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['objContact'] === null) {
            $invalidProperties[] = "'objContact' can't be null";
        }
        if ($this->container['pkiEzsignsignerID'] === null) {
            $invalidProperties[] = "'pkiEzsignsignerID' can't be null";
        }
        if ($this->container['fkiTaxassignmentID'] === null) {
            $invalidProperties[] = "'fkiTaxassignmentID' can't be null";
        }
        if (($this->container['fkiTaxassignmentID'] > 15)) {
            $invalidProperties[] = "invalid value for 'fkiTaxassignmentID', must be smaller than or equal to 15.";
        }

        if (($this->container['fkiTaxassignmentID'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiTaxassignmentID', must be bigger than or equal to 1.";
        }

        if ($this->container['fkiUserlogintypeID'] === null) {
            $invalidProperties[] = "'fkiUserlogintypeID' can't be null";
        }
        if ($this->container['sUserlogintypeDescriptionX'] === null) {
            $invalidProperties[] = "'sUserlogintypeDescriptionX' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets objContact
     *
     * @return \eZmaxAPI\Model\EzsignsignerResponseCompoundContact
     */
    public function getObjContact()
    {
        return $this->container['objContact'];
    }

    /**
     * Sets objContact
     *
     * @param \eZmaxAPI\Model\EzsignsignerResponseCompoundContact $objContact objContact
     *
     * @return self
     */
    public function setObjContact($objContact)
    {
        $this->container['objContact'] = $objContact;

        return $this;
    }

    /**
     * Gets pkiEzsignsignerID
     *
     * @return int
     */
    public function getPkiEzsignsignerID()
    {
        return $this->container['pkiEzsignsignerID'];
    }

    /**
     * Sets pkiEzsignsignerID
     *
     * @param int $pkiEzsignsignerID The unique ID of the Ezsignsigner
     *
     * @return self
     */
    public function setPkiEzsignsignerID($pkiEzsignsignerID)
    {
        $this->container['pkiEzsignsignerID'] = $pkiEzsignsignerID;

        return $this;
    }

    /**
     * Gets fkiTaxassignmentID
     *
     * @return int
     */
    public function getFkiTaxassignmentID()
    {
        return $this->container['fkiTaxassignmentID'];
    }

    /**
     * Sets fkiTaxassignmentID
     *
     * @param int $fkiTaxassignmentID The unique ID of the Taxassignment.  Valid values:  |Value|Description| |-|-| |1|No tax| |2|GST| |3|HST (ON)| |4|HST (NB)| |5|HST (NS)| |6|HST (NL)| |7|HST (PE)| |8|GST + QST (QC)| |9|GST + QST (QC) Non-Recoverable| |10|GST + PST (BC)| |11|GST + PST (SK)| |12|GST + RST (MB)| |13|GST + PST (BC) Non-Recoverable| |14|GST + PST (SK) Non-Recoverable| |15|GST + RST (MB) Non-Recoverable|
     *
     * @return self
     */
    public function setFkiTaxassignmentID($fkiTaxassignmentID)
    {

        if (($fkiTaxassignmentID > 15)) {
            throw new \InvalidArgumentException('invalid value for $fkiTaxassignmentID when calling EzsignsignerResponseCompound., must be smaller than or equal to 15.');
        }
        if (($fkiTaxassignmentID < 1)) {
            throw new \InvalidArgumentException('invalid value for $fkiTaxassignmentID when calling EzsignsignerResponseCompound., must be bigger than or equal to 1.');
        }

        $this->container['fkiTaxassignmentID'] = $fkiTaxassignmentID;

        return $this;
    }

    /**
     * Gets fkiSecretquestionID
     *
     * @return int|null
     */
    public function getFkiSecretquestionID()
    {
        return $this->container['fkiSecretquestionID'];
    }

    /**
     * Sets fkiSecretquestionID
     *
     * @param int|null $fkiSecretquestionID The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father's middle name| |15|Your mother's maiden name| |16|Name of your eldest child| |17|Your spouse's middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat's name| |22|Date of Birth (YYYY-MM-DD)|
     *
     * @return self
     */
    public function setFkiSecretquestionID($fkiSecretquestionID)
    {
        $this->container['fkiSecretquestionID'] = $fkiSecretquestionID;

        return $this;
    }

    /**
     * Gets fkiUserlogintypeID
     *
     * @return int
     */
    public function getFkiUserlogintypeID()
    {
        return $this->container['fkiUserlogintypeID'];
    }

    /**
     * Sets fkiUserlogintypeID
     *
     * @param int $fkiUserlogintypeID The unique ID of the Userlogintype
     *
     * @return self
     */
    public function setFkiUserlogintypeID($fkiUserlogintypeID)
    {
        $this->container['fkiUserlogintypeID'] = $fkiUserlogintypeID;

        return $this;
    }

    /**
     * Gets sUserlogintypeDescriptionX
     *
     * @return string
     */
    public function getSUserlogintypeDescriptionX()
    {
        return $this->container['sUserlogintypeDescriptionX'];
    }

    /**
     * Sets sUserlogintypeDescriptionX
     *
     * @param string $sUserlogintypeDescriptionX The description of the Userlogintype in the language of the requester
     *
     * @return self
     */
    public function setSUserlogintypeDescriptionX($sUserlogintypeDescriptionX)
    {
        $this->container['sUserlogintypeDescriptionX'] = $sUserlogintypeDescriptionX;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


