<?php
/**
 * EzsigndocumentRequestCompound
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * EzsigndocumentRequestCompound Class Doc Comment
 *
 * @category Class
 * @description An Ezsigndocument Object and children to create a complete structure
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EzsigndocumentRequestCompound implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ezsigndocument-RequestCompound';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pkiEzsigndocumentID' => 'int',
        'fkiEzsignfolderID' => 'int',
        'fkiEzsigntemplateID' => 'int',
        'fkiEzsignfoldersignerassociationID' => 'int',
        'fkiLanguageID' => 'int',
        'eEzsigndocumentSource' => 'string',
        'eEzsigndocumentFormat' => 'string',
        'sEzsigndocumentBase64' => 'string',
        'sEzsigndocumentUrl' => 'string',
        'bEzsigndocumentForcerepair' => 'bool',
        'sEzsigndocumentPassword' => 'string',
        'eEzsigndocumentForm' => 'string',
        'dtEzsigndocumentDuedate' => 'string',
        'sEzsigndocumentName' => 'string',
        'sEzsigndocumentExternalid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pkiEzsigndocumentID' => null,
        'fkiEzsignfolderID' => null,
        'fkiEzsigntemplateID' => null,
        'fkiEzsignfoldersignerassociationID' => null,
        'fkiLanguageID' => null,
        'eEzsigndocumentSource' => null,
        'eEzsigndocumentFormat' => null,
        'sEzsigndocumentBase64' => 'byte',
        'sEzsigndocumentUrl' => null,
        'bEzsigndocumentForcerepair' => null,
        'sEzsigndocumentPassword' => null,
        'eEzsigndocumentForm' => null,
        'dtEzsigndocumentDuedate' => null,
        'sEzsigndocumentName' => null,
        'sEzsigndocumentExternalid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pkiEzsigndocumentID' => false,
		'fkiEzsignfolderID' => false,
		'fkiEzsigntemplateID' => false,
		'fkiEzsignfoldersignerassociationID' => false,
		'fkiLanguageID' => false,
		'eEzsigndocumentSource' => false,
		'eEzsigndocumentFormat' => false,
		'sEzsigndocumentBase64' => false,
		'sEzsigndocumentUrl' => false,
		'bEzsigndocumentForcerepair' => false,
		'sEzsigndocumentPassword' => false,
		'eEzsigndocumentForm' => false,
		'dtEzsigndocumentDuedate' => false,
		'sEzsigndocumentName' => false,
		'sEzsigndocumentExternalid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pkiEzsigndocumentID' => 'pkiEzsigndocumentID',
        'fkiEzsignfolderID' => 'fkiEzsignfolderID',
        'fkiEzsigntemplateID' => 'fkiEzsigntemplateID',
        'fkiEzsignfoldersignerassociationID' => 'fkiEzsignfoldersignerassociationID',
        'fkiLanguageID' => 'fkiLanguageID',
        'eEzsigndocumentSource' => 'eEzsigndocumentSource',
        'eEzsigndocumentFormat' => 'eEzsigndocumentFormat',
        'sEzsigndocumentBase64' => 'sEzsigndocumentBase64',
        'sEzsigndocumentUrl' => 'sEzsigndocumentUrl',
        'bEzsigndocumentForcerepair' => 'bEzsigndocumentForcerepair',
        'sEzsigndocumentPassword' => 'sEzsigndocumentPassword',
        'eEzsigndocumentForm' => 'eEzsigndocumentForm',
        'dtEzsigndocumentDuedate' => 'dtEzsigndocumentDuedate',
        'sEzsigndocumentName' => 'sEzsigndocumentName',
        'sEzsigndocumentExternalid' => 'sEzsigndocumentExternalid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pkiEzsigndocumentID' => 'setPkiEzsigndocumentID',
        'fkiEzsignfolderID' => 'setFkiEzsignfolderID',
        'fkiEzsigntemplateID' => 'setFkiEzsigntemplateID',
        'fkiEzsignfoldersignerassociationID' => 'setFkiEzsignfoldersignerassociationID',
        'fkiLanguageID' => 'setFkiLanguageID',
        'eEzsigndocumentSource' => 'setEEzsigndocumentSource',
        'eEzsigndocumentFormat' => 'setEEzsigndocumentFormat',
        'sEzsigndocumentBase64' => 'setSEzsigndocumentBase64',
        'sEzsigndocumentUrl' => 'setSEzsigndocumentUrl',
        'bEzsigndocumentForcerepair' => 'setBEzsigndocumentForcerepair',
        'sEzsigndocumentPassword' => 'setSEzsigndocumentPassword',
        'eEzsigndocumentForm' => 'setEEzsigndocumentForm',
        'dtEzsigndocumentDuedate' => 'setDtEzsigndocumentDuedate',
        'sEzsigndocumentName' => 'setSEzsigndocumentName',
        'sEzsigndocumentExternalid' => 'setSEzsigndocumentExternalid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pkiEzsigndocumentID' => 'getPkiEzsigndocumentID',
        'fkiEzsignfolderID' => 'getFkiEzsignfolderID',
        'fkiEzsigntemplateID' => 'getFkiEzsigntemplateID',
        'fkiEzsignfoldersignerassociationID' => 'getFkiEzsignfoldersignerassociationID',
        'fkiLanguageID' => 'getFkiLanguageID',
        'eEzsigndocumentSource' => 'getEEzsigndocumentSource',
        'eEzsigndocumentFormat' => 'getEEzsigndocumentFormat',
        'sEzsigndocumentBase64' => 'getSEzsigndocumentBase64',
        'sEzsigndocumentUrl' => 'getSEzsigndocumentUrl',
        'bEzsigndocumentForcerepair' => 'getBEzsigndocumentForcerepair',
        'sEzsigndocumentPassword' => 'getSEzsigndocumentPassword',
        'eEzsigndocumentForm' => 'getEEzsigndocumentForm',
        'dtEzsigndocumentDuedate' => 'getDtEzsigndocumentDuedate',
        'sEzsigndocumentName' => 'getSEzsigndocumentName',
        'sEzsigndocumentExternalid' => 'getSEzsigndocumentExternalid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const E_EZSIGNDOCUMENT_SOURCE_BASE64 = 'Base64';
    public const E_EZSIGNDOCUMENT_SOURCE_EZSIGNTEMPLATE = 'Ezsigntemplate';
    public const E_EZSIGNDOCUMENT_SOURCE_URL = 'Url';
    public const E_EZSIGNDOCUMENT_FORMAT_PDF = 'Pdf';
    public const E_EZSIGNDOCUMENT_FORMAT_DOC = 'Doc';
    public const E_EZSIGNDOCUMENT_FORMAT_DOCX = 'Docx';
    public const E_EZSIGNDOCUMENT_FORMAT_XLS = 'Xls';
    public const E_EZSIGNDOCUMENT_FORMAT_XLSX = 'Xlsx';
    public const E_EZSIGNDOCUMENT_FORMAT_PPT = 'Ppt';
    public const E_EZSIGNDOCUMENT_FORMAT_PPTX = 'Pptx';
    public const E_EZSIGNDOCUMENT_FORM_KEEP = 'Keep';
    public const E_EZSIGNDOCUMENT_FORM_CONVERT = 'Convert';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEEzsigndocumentSourceAllowableValues()
    {
        return [
            self::E_EZSIGNDOCUMENT_SOURCE_BASE64,
            self::E_EZSIGNDOCUMENT_SOURCE_EZSIGNTEMPLATE,
            self::E_EZSIGNDOCUMENT_SOURCE_URL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEEzsigndocumentFormatAllowableValues()
    {
        return [
            self::E_EZSIGNDOCUMENT_FORMAT_PDF,
            self::E_EZSIGNDOCUMENT_FORMAT_DOC,
            self::E_EZSIGNDOCUMENT_FORMAT_DOCX,
            self::E_EZSIGNDOCUMENT_FORMAT_XLS,
            self::E_EZSIGNDOCUMENT_FORMAT_XLSX,
            self::E_EZSIGNDOCUMENT_FORMAT_PPT,
            self::E_EZSIGNDOCUMENT_FORMAT_PPTX,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEEzsigndocumentFormAllowableValues()
    {
        return [
            self::E_EZSIGNDOCUMENT_FORM_KEEP,
            self::E_EZSIGNDOCUMENT_FORM_CONVERT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pkiEzsigndocumentID', $data ?? [], null);
        $this->setIfExists('fkiEzsignfolderID', $data ?? [], null);
        $this->setIfExists('fkiEzsigntemplateID', $data ?? [], null);
        $this->setIfExists('fkiEzsignfoldersignerassociationID', $data ?? [], null);
        $this->setIfExists('fkiLanguageID', $data ?? [], null);
        $this->setIfExists('eEzsigndocumentSource', $data ?? [], null);
        $this->setIfExists('eEzsigndocumentFormat', $data ?? [], null);
        $this->setIfExists('sEzsigndocumentBase64', $data ?? [], null);
        $this->setIfExists('sEzsigndocumentUrl', $data ?? [], null);
        $this->setIfExists('bEzsigndocumentForcerepair', $data ?? [], true);
        $this->setIfExists('sEzsigndocumentPassword', $data ?? [], null);
        $this->setIfExists('eEzsigndocumentForm', $data ?? [], null);
        $this->setIfExists('dtEzsigndocumentDuedate', $data ?? [], null);
        $this->setIfExists('sEzsigndocumentName', $data ?? [], null);
        $this->setIfExists('sEzsigndocumentExternalid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['pkiEzsigndocumentID']) && ($this->container['pkiEzsigndocumentID'] < 0)) {
            $invalidProperties[] = "invalid value for 'pkiEzsigndocumentID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiEzsignfolderID'] === null) {
            $invalidProperties[] = "'fkiEzsignfolderID' can't be null";
        }
        if (($this->container['fkiEzsignfolderID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzsignfolderID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzsigntemplateID']) && ($this->container['fkiEzsigntemplateID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzsigntemplateID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzsignfoldersignerassociationID']) && ($this->container['fkiEzsignfoldersignerassociationID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiEzsignfoldersignerassociationID', must be bigger than or equal to 0.";
        }

        if ($this->container['fkiLanguageID'] === null) {
            $invalidProperties[] = "'fkiLanguageID' can't be null";
        }
        if (($this->container['fkiLanguageID'] > 2)) {
            $invalidProperties[] = "invalid value for 'fkiLanguageID', must be smaller than or equal to 2.";
        }

        if (($this->container['fkiLanguageID'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiLanguageID', must be bigger than or equal to 1.";
        }

        if ($this->container['eEzsigndocumentSource'] === null) {
            $invalidProperties[] = "'eEzsigndocumentSource' can't be null";
        }
        $allowedValues = $this->getEEzsigndocumentSourceAllowableValues();
        if (!is_null($this->container['eEzsigndocumentSource']) && !in_array($this->container['eEzsigndocumentSource'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eEzsigndocumentSource', must be one of '%s'",
                $this->container['eEzsigndocumentSource'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEEzsigndocumentFormatAllowableValues();
        if (!is_null($this->container['eEzsigndocumentFormat']) && !in_array($this->container['eEzsigndocumentFormat'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eEzsigndocumentFormat', must be one of '%s'",
                $this->container['eEzsigndocumentFormat'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEEzsigndocumentFormAllowableValues();
        if (!is_null($this->container['eEzsigndocumentForm']) && !in_array($this->container['eEzsigndocumentForm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eEzsigndocumentForm', must be one of '%s'",
                $this->container['eEzsigndocumentForm'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['dtEzsigndocumentDuedate'] === null) {
            $invalidProperties[] = "'dtEzsigndocumentDuedate' can't be null";
        }
        if ($this->container['sEzsigndocumentName'] === null) {
            $invalidProperties[] = "'sEzsigndocumentName' can't be null";
        }
//        if (!is_null($this->container['sEzsigndocumentExternalid']) && !preg_match("/^.{0,64}$/", $this->container['sEzsigndocumentExternalid'])) {
        if (!is_null($this->container['sEzsigndocumentExternalid']) && !preg_match("/^.{0,64}$/", $this->container['sEzsigndocumentExternalid'])) {
            $invalidProperties[] = "invalid value for 'sEzsigndocumentExternalid', must be conform to the pattern /^.{0,64}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pkiEzsigndocumentID
     *
     * @return int|null
     */
    public function getPkiEzsigndocumentID()
    {
        return $this->container['pkiEzsigndocumentID'];
    }

    /**
     * Sets pkiEzsigndocumentID
     *
     * @param int|null $pkiEzsigndocumentID The unique ID of the Ezsigndocument
     *
     * @return self
     */
    public function setPkiEzsigndocumentID($pkiEzsigndocumentID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($pkiEzsigndocumentID)) {
            //throw new \InvalidArgumentException('non-nullable pkiEzsigndocumentID cannot be null');
        //}

//        if (($pkiEzsigndocumentID < 0)) {
        if (!is_null($pkiEzsigndocumentID) && ($pkiEzsigndocumentID < 0)) {
            throw new \InvalidArgumentException('invalid value for $pkiEzsigndocumentID when calling EzsigndocumentRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['pkiEzsigndocumentID'] = $pkiEzsigndocumentID;
        $this->container['pkiEzsigndocumentID'] = (is_null($pkiEzsigndocumentID) ? null : (int) $pkiEzsigndocumentID);

        return $this;
    }

    /**
     * Gets fkiEzsignfolderID
     *
     * @return int
     */
    public function getFkiEzsignfolderID()
    {
        return $this->container['fkiEzsignfolderID'];
    }

    /**
     * Sets fkiEzsignfolderID
     *
     * @param int $fkiEzsignfolderID The unique ID of the Ezsignfolder
     *
     * @return self
     */
    public function setFkiEzsignfolderID($fkiEzsignfolderID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzsignfolderID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzsignfolderID cannot be null');
        //}

//        if (($fkiEzsignfolderID < 0)) {
        if (($fkiEzsignfolderID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiEzsignfolderID when calling EzsigndocumentRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzsignfolderID'] = $fkiEzsignfolderID;
        $this->container['fkiEzsignfolderID'] = (is_null($fkiEzsignfolderID) ? null : (int) $fkiEzsignfolderID);

        return $this;
    }

    /**
     * Gets fkiEzsigntemplateID
     *
     * @return int|null
     */
    public function getFkiEzsigntemplateID()
    {
        return $this->container['fkiEzsigntemplateID'];
    }

    /**
     * Sets fkiEzsigntemplateID
     *
     * @param int|null $fkiEzsigntemplateID The unique ID of the Ezsigntemplate
     *
     * @return self
     */
    public function setFkiEzsigntemplateID($fkiEzsigntemplateID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzsigntemplateID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzsigntemplateID cannot be null');
        //}

//        if (($fkiEzsigntemplateID < 0)) {
        if (!is_null($fkiEzsigntemplateID) && ($fkiEzsigntemplateID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiEzsigntemplateID when calling EzsigndocumentRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzsigntemplateID'] = $fkiEzsigntemplateID;
        $this->container['fkiEzsigntemplateID'] = (is_null($fkiEzsigntemplateID) ? null : (int) $fkiEzsigntemplateID);

        return $this;
    }

    /**
     * Gets fkiEzsignfoldersignerassociationID
     *
     * @return int|null
     */
    public function getFkiEzsignfoldersignerassociationID()
    {
        return $this->container['fkiEzsignfoldersignerassociationID'];
    }

    /**
     * Sets fkiEzsignfoldersignerassociationID
     *
     * @param int|null $fkiEzsignfoldersignerassociationID The unique ID of the Ezsignfoldersignerassociation
     *
     * @return self
     */
    public function setFkiEzsignfoldersignerassociationID($fkiEzsignfoldersignerassociationID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiEzsignfoldersignerassociationID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzsignfoldersignerassociationID cannot be null');
        //}

//        if (($fkiEzsignfoldersignerassociationID < 0)) {
        if (!is_null($fkiEzsignfoldersignerassociationID) && ($fkiEzsignfoldersignerassociationID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiEzsignfoldersignerassociationID when calling EzsigndocumentRequestCompound., must be bigger than or equal to 0.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiEzsignfoldersignerassociationID'] = $fkiEzsignfoldersignerassociationID;
        $this->container['fkiEzsignfoldersignerassociationID'] = (is_null($fkiEzsignfoldersignerassociationID) ? null : (int) $fkiEzsignfoldersignerassociationID);

        return $this;
    }

    /**
     * Gets fkiLanguageID
     *
     * @return int
     */
    public function getFkiLanguageID()
    {
        return $this->container['fkiLanguageID'];
    }

    /**
     * Sets fkiLanguageID
     *
     * @param int $fkiLanguageID The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
     *
     * @return self
     */
    public function setFkiLanguageID($fkiLanguageID)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($fkiLanguageID)) {
            //throw new \InvalidArgumentException('non-nullable fkiLanguageID cannot be null');
        //}

//        if (($fkiLanguageID > 2)) {
        if (($fkiLanguageID > 2)) {
            throw new \InvalidArgumentException('invalid value for $fkiLanguageID when calling EzsigndocumentRequestCompound., must be smaller than or equal to 2.');
        }
//        if (($fkiLanguageID < 1)) {
        if (($fkiLanguageID < 1)) {
            throw new \InvalidArgumentException('invalid value for $fkiLanguageID when calling EzsigndocumentRequestCompound., must be bigger than or equal to 1.');
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['fkiLanguageID'] = $fkiLanguageID;
        $this->container['fkiLanguageID'] = (is_null($fkiLanguageID) ? null : (int) $fkiLanguageID);

        return $this;
    }

    /**
     * Gets eEzsigndocumentSource
     *
     * @return string
     */
    public function getEEzsigndocumentSource()
    {
        return is_null($this->container['eEzsigndocumentSource']) ? null : trim($this->container['eEzsigndocumentSource']);
    }

    /**
     * Sets eEzsigndocumentSource
     *
     * @param string $eEzsigndocumentSource Indicates where to look for the document binary content.
     *
     * @return self
     */
    public function setEEzsigndocumentSource($eEzsigndocumentSource)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eEzsigndocumentSource)) {
            //throw new \InvalidArgumentException('non-nullable eEzsigndocumentSource cannot be null');
        //}
        $allowedValues = $this->getEEzsigndocumentSourceAllowableValues();
        if (!in_array($eEzsigndocumentSource, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eEzsigndocumentSource', must be one of '%s'",
                    $eEzsigndocumentSource,
                    implode("', '", $allowedValues)
                )
            );
        }
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eEzsigndocumentSource'] = $eEzsigndocumentSource;
        $this->container['eEzsigndocumentSource'] = (is_null($eEzsigndocumentSource) ? null : trim((string) $eEzsigndocumentSource));

        return $this;
    }

    /**
     * Gets eEzsigndocumentFormat
     *
     * @return string|null
     */
    public function getEEzsigndocumentFormat()
    {
        return is_null($this->container['eEzsigndocumentFormat']) ? null : trim($this->container['eEzsigndocumentFormat']);
    }

    /**
     * Sets eEzsigndocumentFormat
     *
     * @param string|null $eEzsigndocumentFormat Indicates the format of the document.
     *
     * @return self
     */
    public function setEEzsigndocumentFormat($eEzsigndocumentFormat)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eEzsigndocumentFormat)) {
            //throw new \InvalidArgumentException('non-nullable eEzsigndocumentFormat cannot be null');
        //}
        $allowedValues = $this->getEEzsigndocumentFormatAllowableValues();
        if (!in_array($eEzsigndocumentFormat, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eEzsigndocumentFormat', must be one of '%s'",
                    $eEzsigndocumentFormat,
                    implode("', '", $allowedValues)
                )
            );
        }
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eEzsigndocumentFormat'] = $eEzsigndocumentFormat;
        $this->container['eEzsigndocumentFormat'] = (is_null($eEzsigndocumentFormat) ? null : trim((string) $eEzsigndocumentFormat));

        return $this;
    }

    /**
     * Gets sEzsigndocumentBase64
     *
     * @return string|null
     */
    public function getSEzsigndocumentBase64()
    {
        return $this->container['sEzsigndocumentBase64'];
    }

    /**
     * Sets sEzsigndocumentBase64
     *
     * @param string|null $sEzsigndocumentBase64 The Base64 encoded binary content of the document.  This field is Required when eEzsigndocumentSource = Base64.
     *
     * @return self
     */
    public function setSEzsigndocumentBase64($sEzsigndocumentBase64)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sEzsigndocumentBase64)) {
            //throw new \InvalidArgumentException('non-nullable sEzsigndocumentBase64 cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sEzsigndocumentBase64'] = $sEzsigndocumentBase64;
        $this->container['sEzsigndocumentBase64'] = (is_null($sEzsigndocumentBase64) ? null : $sEzsigndocumentBase64);

        return $this;
    }

    /**
     * Gets sEzsigndocumentUrl
     *
     * @return string|null
     */
    public function getSEzsigndocumentUrl()
    {
        return is_null($this->container['sEzsigndocumentUrl']) ? null : trim($this->container['sEzsigndocumentUrl']);
    }

    /**
     * Sets sEzsigndocumentUrl
     *
     * @param string|null $sEzsigndocumentUrl The url where the document content resides.  This field is Required when eEzsigndocumentSource = Url.
     *
     * @return self
     */
    public function setSEzsigndocumentUrl($sEzsigndocumentUrl)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sEzsigndocumentUrl)) {
            //throw new \InvalidArgumentException('non-nullable sEzsigndocumentUrl cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sEzsigndocumentUrl'] = $sEzsigndocumentUrl;
        $this->container['sEzsigndocumentUrl'] = (is_null($sEzsigndocumentUrl) ? null : trim((string) $sEzsigndocumentUrl));

        return $this;
    }

    /**
     * Gets bEzsigndocumentForcerepair
     *
     * @return bool|null
     */
    public function getBEzsigndocumentForcerepair()
    {
        return $this->container['bEzsigndocumentForcerepair'];
    }

    /**
     * Sets bEzsigndocumentForcerepair
     *
     * @param bool|null $bEzsigndocumentForcerepair Try to repair the document or flatten it if it cannot be used for electronic signature.
     *
     * @return self
     */
    public function setBEzsigndocumentForcerepair($bEzsigndocumentForcerepair)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bEzsigndocumentForcerepair)) {
            //throw new \InvalidArgumentException('non-nullable bEzsigndocumentForcerepair cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bEzsigndocumentForcerepair'] = $bEzsigndocumentForcerepair;
        $this->container['bEzsigndocumentForcerepair'] = (is_null($bEzsigndocumentForcerepair) ? null : (bool) $bEzsigndocumentForcerepair);

        return $this;
    }

    /**
     * Gets sEzsigndocumentPassword
     *
     * @return string|null
     */
    public function getSEzsigndocumentPassword()
    {
        return is_null($this->container['sEzsigndocumentPassword']) ? null : trim($this->container['sEzsigndocumentPassword']);
    }

    /**
     * Sets sEzsigndocumentPassword
     *
     * @param string|null $sEzsigndocumentPassword If the source document is password protected, the password to open/modify it.
     *
     * @return self
     */
    public function setSEzsigndocumentPassword($sEzsigndocumentPassword)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sEzsigndocumentPassword)) {
            //throw new \InvalidArgumentException('non-nullable sEzsigndocumentPassword cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sEzsigndocumentPassword'] = $sEzsigndocumentPassword;
        $this->container['sEzsigndocumentPassword'] = (is_null($sEzsigndocumentPassword) ? null : trim((string) $sEzsigndocumentPassword));

        return $this;
    }

    /**
     * Gets eEzsigndocumentForm
     *
     * @return string|null
     */
    public function getEEzsigndocumentForm()
    {
        return is_null($this->container['eEzsigndocumentForm']) ? null : trim($this->container['eEzsigndocumentForm']);
    }

    /**
     * Sets eEzsigndocumentForm
     *
     * @param string|null $eEzsigndocumentForm If the document contains an existing PDF form this property must be set.  **Keep** leaves the form as-is in the document.  **Convert** removes the form and convert all the existing fields to Ezsignformfieldgroups and assign them to the specified **fkiEzsignfoldersignerassociationID**
     *
     * @return self
     */
    public function setEEzsigndocumentForm($eEzsigndocumentForm)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($eEzsigndocumentForm)) {
            //throw new \InvalidArgumentException('non-nullable eEzsigndocumentForm cannot be null');
        //}
        $allowedValues = $this->getEEzsigndocumentFormAllowableValues();
        if (!in_array($eEzsigndocumentForm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eEzsigndocumentForm', must be one of '%s'",
                    $eEzsigndocumentForm,
                    implode("', '", $allowedValues)
                )
            );
        }
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['eEzsigndocumentForm'] = $eEzsigndocumentForm;
        $this->container['eEzsigndocumentForm'] = (is_null($eEzsigndocumentForm) ? null : trim((string) $eEzsigndocumentForm));

        return $this;
    }

    /**
     * Gets dtEzsigndocumentDuedate
     *
     * @return string
     */
    public function getDtEzsigndocumentDuedate()
    {
        return is_null($this->container['dtEzsigndocumentDuedate']) ? null : trim($this->container['dtEzsigndocumentDuedate']);
    }

    /**
     * Sets dtEzsigndocumentDuedate
     *
     * @param string $dtEzsigndocumentDuedate The maximum date and time at which the Ezsigndocument can be signed.
     *
     * @return self
     */
    public function setDtEzsigndocumentDuedate($dtEzsigndocumentDuedate)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtEzsigndocumentDuedate)) {
            //throw new \InvalidArgumentException('non-nullable dtEzsigndocumentDuedate cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtEzsigndocumentDuedate'] = $dtEzsigndocumentDuedate;
        $this->container['dtEzsigndocumentDuedate'] = (is_null($dtEzsigndocumentDuedate) ? null : trim((string) $dtEzsigndocumentDuedate));

        return $this;
    }

    /**
     * Gets sEzsigndocumentName
     *
     * @return string
     */
    public function getSEzsigndocumentName()
    {
        return is_null($this->container['sEzsigndocumentName']) ? null : trim($this->container['sEzsigndocumentName']);
    }

    /**
     * Sets sEzsigndocumentName
     *
     * @param string $sEzsigndocumentName The name of the document that will be presented to Ezsignfoldersignerassociations
     *
     * @return self
     */
    public function setSEzsigndocumentName($sEzsigndocumentName)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sEzsigndocumentName)) {
            //throw new \InvalidArgumentException('non-nullable sEzsigndocumentName cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sEzsigndocumentName'] = $sEzsigndocumentName;
        $this->container['sEzsigndocumentName'] = (is_null($sEzsigndocumentName) ? null : trim((string) $sEzsigndocumentName));

        return $this;
    }

    /**
     * Gets sEzsigndocumentExternalid
     *
     * @return string|null
     */
    public function getSEzsigndocumentExternalid()
    {
        return is_null($this->container['sEzsigndocumentExternalid']) ? null : trim($this->container['sEzsigndocumentExternalid']);
    }

    /**
     * Sets sEzsigndocumentExternalid
     *
     * @param string|null $sEzsigndocumentExternalid This field can be used to store an External ID from the client's system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format.
     *
     * @return self
     */
    public function setSEzsigndocumentExternalid($sEzsigndocumentExternalid)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($sEzsigndocumentExternalid)) {
            //throw new \InvalidArgumentException('non-nullable sEzsigndocumentExternalid cannot be null');
        //}

//        if ((!preg_match("/^.{0,64}$/", ObjectSerializer::toString($sEzsigndocumentExternalid)))) {
        if (!is_null($sEzsigndocumentExternalid) && (!preg_match("/^.{0,64}$/", ObjectSerializer::toString($sEzsigndocumentExternalid)))) {
            throw new \InvalidArgumentException("invalid value for \$sEzsigndocumentExternalid when calling EzsigndocumentRequestCompound., must conform to the pattern /^.{0,64}$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['sEzsigndocumentExternalid'] = $sEzsigndocumentExternalid;
        $this->container['sEzsigndocumentExternalid'] = (is_null($sEzsigndocumentExternalid) ? null : trim((string) $sEzsigndocumentExternalid));

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


