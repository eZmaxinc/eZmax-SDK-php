<?php
/**
 * EzsignsignatureResponseCompound
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;
use \eZmaxAPI\ObjectSerializer;

/**
 * EzsignsignatureResponseCompound Class Doc Comment
 *
 * @category Class
 * @description An Ezsignsignature Object and children to create a complete structure
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EzsignsignatureResponseCompound extends EzsignsignatureResponse
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ezsignsignature-ResponseCompound';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dtEzsignsignatureDateInFolderTimezone' => 'string',
        'bEzsignsignatureCustomdate' => 'bool',
        'aObjEzsignsignaturecustomdate' => '\eZmaxAPI\Model\EzsignsignaturecustomdateResponseCompound[]',
        'objCreditcardtransaction' => '\eZmaxAPI\Model\CustomCreditcardtransactionResponse',
        'aObjEzsignelementdependency' => '\eZmaxAPI\Model\EzsignelementdependencyResponseCompound[]',
        'objTimezone' => '\eZmaxAPI\Model\CustomTimezoneWithCodeResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dtEzsignsignatureDateInFolderTimezone' => null,
        'bEzsignsignatureCustomdate' => null,
        'aObjEzsignsignaturecustomdate' => null,
        'objCreditcardtransaction' => null,
        'aObjEzsignelementdependency' => null,
        'objTimezone' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dtEzsignsignatureDateInFolderTimezone' => false,
		'bEzsignsignatureCustomdate' => false,
		'aObjEzsignsignaturecustomdate' => false,
		'objCreditcardtransaction' => false,
		'aObjEzsignelementdependency' => false,
		'objTimezone' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables + parent::openAPINullables();
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dtEzsignsignatureDateInFolderTimezone' => 'dtEzsignsignatureDateInFolderTimezone',
        'bEzsignsignatureCustomdate' => 'bEzsignsignatureCustomdate',
        'aObjEzsignsignaturecustomdate' => 'a_objEzsignsignaturecustomdate',
        'objCreditcardtransaction' => 'objCreditcardtransaction',
        'aObjEzsignelementdependency' => 'a_objEzsignelementdependency',
        'objTimezone' => 'objTimezone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dtEzsignsignatureDateInFolderTimezone' => 'setDtEzsignsignatureDateInFolderTimezone',
        'bEzsignsignatureCustomdate' => 'setBEzsignsignatureCustomdate',
        'aObjEzsignsignaturecustomdate' => 'setAObjEzsignsignaturecustomdate',
        'objCreditcardtransaction' => 'setObjCreditcardtransaction',
        'aObjEzsignelementdependency' => 'setAObjEzsignelementdependency',
        'objTimezone' => 'setObjTimezone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dtEzsignsignatureDateInFolderTimezone' => 'getDtEzsignsignatureDateInFolderTimezone',
        'bEzsignsignatureCustomdate' => 'getBEzsignsignatureCustomdate',
        'aObjEzsignsignaturecustomdate' => 'getAObjEzsignsignaturecustomdate',
        'objCreditcardtransaction' => 'getObjCreditcardtransaction',
        'aObjEzsignelementdependency' => 'getAObjEzsignelementdependency',
        'objTimezone' => 'getObjTimezone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }



    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->setIfExists('dtEzsignsignatureDateInFolderTimezone', $data ?? [], null);
        $this->setIfExists('bEzsignsignatureCustomdate', $data ?? [], null);
        $this->setIfExists('aObjEzsignsignaturecustomdate', $data ?? [], null);
        $this->setIfExists('objCreditcardtransaction', $data ?? [], null);
        $this->setIfExists('aObjEzsignelementdependency', $data ?? [], null);
        $this->setIfExists('objTimezone', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

	//if (!is_null($this->container['dtEzsignsignatureDateInFolderTimezone']) && !preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", $this->container['dtEzsignsignatureDateInFolderTimezone'])) {
        if (!is_null($this->container['dtEzsignsignatureDateInFolderTimezone']) && !preg_match("/(*UTF8)^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", $this->container['dtEzsignsignatureDateInFolderTimezone'])) {
            $invalidProperties[] = "invalid value for 'dtEzsignsignatureDateInFolderTimezone', must be conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dtEzsignsignatureDateInFolderTimezone
     *
     * @return string|null
     */
    public function getDtEzsignsignatureDateInFolderTimezone()
    {
	//return $this->container['dtEzsignsignatureDateInFolderTimezone'];
        return is_null($this->container['dtEzsignsignatureDateInFolderTimezone']) ? null : trim($this->container['dtEzsignsignatureDateInFolderTimezone']);
    }

    /**
     * Sets dtEzsignsignatureDateInFolderTimezone
     *
     * @param string|null $dtEzsignsignatureDateInFolderTimezone The date the Ezsignsignature was signed in folder's timezone
     *
     * @return self
     */
    public function setDtEzsignsignatureDateInFolderTimezone($dtEzsignsignatureDateInFolderTimezone)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($dtEzsignsignatureDateInFolderTimezone)) {
            //throw new \InvalidArgumentException('non-nullable dtEzsignsignatureDateInFolderTimezone cannot be null');
        //}

	//if ((!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", ObjectSerializer::toString($dtEzsignsignatureDateInFolderTimezone)))) {
        if (!is_null($dtEzsignsignatureDateInFolderTimezone) && (!preg_match("/(*UTF8)^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/", ObjectSerializer::toString($dtEzsignsignatureDateInFolderTimezone)))) {
	    //throw new \InvalidArgumentException("invalid value for \$dtEzsignsignatureDateInFolderTimezone when calling EzsignsignatureResponseCompound., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/.");
            throw new \InvalidArgumentException("invalid value ".(is_null($dtEzsignsignatureDateInFolderTimezone)?'null':'"'.$dtEzsignsignatureDateInFolderTimezone.'"')." for dtEzsignsignatureDateInFolderTimezone when calling EzsignsignatureResponseCompound., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/.");
        }

        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['dtEzsignsignatureDateInFolderTimezone'] = $dtEzsignsignatureDateInFolderTimezone;
        $this->container['dtEzsignsignatureDateInFolderTimezone'] = (is_null($dtEzsignsignatureDateInFolderTimezone) ? null : trim((string) $dtEzsignsignatureDateInFolderTimezone));

        return $this;
    }

    /**
     * Gets bEzsignsignatureCustomdate
     *
     * @return bool|null
     */
    public function getBEzsignsignatureCustomdate()
    {
	//return $this->container['bEzsignsignatureCustomdate'];
        return $this->container['bEzsignsignatureCustomdate'];
    }

    /**
     * Sets bEzsignsignatureCustomdate
     *
     * @param bool|null $bEzsignsignatureCustomdate Whether the Ezsignsignature has a custom date format or not. (Only possible when eEzsignsignatureType is **Name** or **Handwritten**)
     *
     * @return self
     */
    public function setBEzsignsignatureCustomdate($bEzsignsignatureCustomdate)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($bEzsignsignatureCustomdate)) {
            //throw new \InvalidArgumentException('non-nullable bEzsignsignatureCustomdate cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['bEzsignsignatureCustomdate'] = $bEzsignsignatureCustomdate;
        $this->container['bEzsignsignatureCustomdate'] = (is_null($bEzsignsignatureCustomdate) ? null : (bool) $bEzsignsignatureCustomdate);

        return $this;
    }

    /**
     * Gets aObjEzsignsignaturecustomdate
     *
     * @return \eZmaxAPI\Model\EzsignsignaturecustomdateResponseCompound[]|null
     */
    public function getAObjEzsignsignaturecustomdate()
    {
	//return $this->container['aObjEzsignsignaturecustomdate'];
        return $this->container['aObjEzsignsignaturecustomdate'];
    }

    /**
     * Sets aObjEzsignsignaturecustomdate
     *
     * @param \eZmaxAPI\Model\EzsignsignaturecustomdateResponseCompound[]|null $aObjEzsignsignaturecustomdate An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsignsignatureCustomdate is true.  Use an empty array if you don't want to have a date at all.
     *
     * @return self
     */
    public function setAObjEzsignsignaturecustomdate($aObjEzsignsignaturecustomdate)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($aObjEzsignsignaturecustomdate)) {
            //throw new \InvalidArgumentException('non-nullable aObjEzsignsignaturecustomdate cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['aObjEzsignsignaturecustomdate'] = $aObjEzsignsignaturecustomdate;
        $this->container['aObjEzsignsignaturecustomdate'] = $aObjEzsignsignaturecustomdate;

        return $this;
    }

    /**
     * Gets objCreditcardtransaction
     *
     * @return \eZmaxAPI\Model\CustomCreditcardtransactionResponse|null
     */
    public function getObjCreditcardtransaction()
    {
	//return $this->container['objCreditcardtransaction'];
        return $this->container['objCreditcardtransaction'];
    }

    /**
     * Sets objCreditcardtransaction
     *
     * @param \eZmaxAPI\Model\CustomCreditcardtransactionResponse|null $objCreditcardtransaction objCreditcardtransaction
     *
     * @return self
     */
    public function setObjCreditcardtransaction($objCreditcardtransaction)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($objCreditcardtransaction)) {
            //throw new \InvalidArgumentException('non-nullable objCreditcardtransaction cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['objCreditcardtransaction'] = $objCreditcardtransaction;
        $this->container['objCreditcardtransaction'] = $objCreditcardtransaction;

        return $this;
    }

    /**
     * Gets aObjEzsignelementdependency
     *
     * @return \eZmaxAPI\Model\EzsignelementdependencyResponseCompound[]|null
     */
    public function getAObjEzsignelementdependency()
    {
	//return $this->container['aObjEzsignelementdependency'];
        return $this->container['aObjEzsignelementdependency'];
    }

    /**
     * Sets aObjEzsignelementdependency
     *
     * @param \eZmaxAPI\Model\EzsignelementdependencyResponseCompound[]|null $aObjEzsignelementdependency aObjEzsignelementdependency
     *
     * @return self
     */
    public function setAObjEzsignelementdependency($aObjEzsignelementdependency)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($aObjEzsignelementdependency)) {
            //throw new \InvalidArgumentException('non-nullable aObjEzsignelementdependency cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['aObjEzsignelementdependency'] = $aObjEzsignelementdependency;
        $this->container['aObjEzsignelementdependency'] = $aObjEzsignelementdependency;

        return $this;
    }

    /**
     * Gets objTimezone
     *
     * @return \eZmaxAPI\Model\CustomTimezoneWithCodeResponse|null
     */
    public function getObjTimezone()
    {
	//return $this->container['objTimezone'];
        return $this->container['objTimezone'];
    }

    /**
     * Sets objTimezone
     *
     * @param \eZmaxAPI\Model\CustomTimezoneWithCodeResponse|null $objTimezone objTimezone
     *
     * @return self
     */
    public function setObjTimezone($objTimezone)
    {
	//Openapi doesn't allow to set a variable to null when it's defined as Non-nullable even if it is the normal way of unsetting a variable
        //if (is_null($objTimezone)) {
            //throw new \InvalidArgumentException('non-nullable objTimezone cannot be null');
        //}
        
	//Openapi doesn't cast variable so if you set a value to "1" instead of 1 in a int, it's not casted automatically
	//$this->container['objTimezone'] = $objTimezone;
        $this->container['objTimezone'] = $objTimezone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


