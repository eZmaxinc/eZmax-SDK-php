<?php
/**
 * EzsignfoldertypeGetObjectV1ResponseMPayload
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Model;

use \ArrayAccess;
use \eZmaxAPI\ObjectSerializer;

/**
 * EzsignfoldertypeGetObjectV1ResponseMPayload Class Doc Comment
 *
 * @category Class
 * @description Payload for GET /1/object/ezsignfoldertype/{pkiEzsignfoldertypeID}
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EzsignfoldertypeGetObjectV1ResponseMPayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ezsignfoldertype-getObject-v1-Response-mPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pkiEzsignfoldertypeID' => 'int',
        'objEzsignfoldertypeName' => '\eZmaxAPI\Model\MultilingualEzsignfoldertypeName',
        'fkiBrandingID' => 'int',
        'fkiBillingentityinternalID' => 'int',
        'fkiUsergroupID' => 'int',
        'fkiUsergroupIDRestricted' => 'int',
        'fkiEzsigntsarequirementID' => 'int',
        'sBrandingDescriptionX' => 'string',
        'sBillingentityinternalDescriptionX' => 'string',
        'sEzsigntsarequirementDescriptionX' => 'string',
        'sEmailAddressSigned' => 'string',
        'sEmailAddressSummary' => 'string',
        'sUsergroupNameX' => 'string',
        'sUsergroupNameXRestricted' => 'string',
        'eEzsignfoldertypePrivacylevel' => '\eZmaxAPI\Model\FieldEEzsignfoldertypePrivacylevel',
        'eEzsignfoldertypeSendreminderfrequency' => '\eZmaxAPI\Model\FieldEEzsignfoldertypeSendreminderfrequency',
        'iEzsignfoldertypeArchivaldays' => 'int',
        'eEzsignfoldertypeDisposal' => '\eZmaxAPI\Model\FieldEEzsignfoldertypeDisposal',
        'iEzsignfoldertypeDisposaldays' => 'int',
        'iEzsignfoldertypeDeadlinedays' => 'int',
        'bEzsignfoldertypeSendattatchmentsigner' => 'bool',
        'bEzsignfoldertypeSendsignedtodocumentowner' => 'bool',
        'bEzsignfoldertypeSendsignedtofolderowner' => 'bool',
        'bEzsignfoldertypeSendsignedtofullgroup' => 'bool',
        'bEzsignfoldertypeSendsignedtolimitedgroup' => 'bool',
        'bEzsignfoldertypeSendsignedtocolleague' => 'bool',
        'bEzsignfoldertypeSendsummarytodocumentowner' => 'bool',
        'bEzsignfoldertypeSendsummarytofolderowner' => 'bool',
        'bEzsignfoldertypeSendsummarytofullgroup' => 'bool',
        'bEzsignfoldertypeSendsummarytolimitedgroup' => 'bool',
        'bEzsignfoldertypeSendsummarytocolleague' => 'bool',
        'bEzsignfoldertypeIncludeproofsigner' => 'bool',
        'bEzsignfoldertypeIncludeproofuser' => 'bool',
        'bEzsignfoldertypeIsactive' => 'bool',
        'aFkiUserIDSigned' => 'int[]',
        'aFkiUserIDSummary' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pkiEzsignfoldertypeID' => null,
        'objEzsignfoldertypeName' => null,
        'fkiBrandingID' => null,
        'fkiBillingentityinternalID' => null,
        'fkiUsergroupID' => null,
        'fkiUsergroupIDRestricted' => null,
        'fkiEzsigntsarequirementID' => null,
        'sBrandingDescriptionX' => null,
        'sBillingentityinternalDescriptionX' => null,
        'sEzsigntsarequirementDescriptionX' => null,
        'sEmailAddressSigned' => null,
        'sEmailAddressSummary' => null,
        'sUsergroupNameX' => null,
        'sUsergroupNameXRestricted' => null,
        'eEzsignfoldertypePrivacylevel' => null,
        'eEzsignfoldertypeSendreminderfrequency' => null,
        'iEzsignfoldertypeArchivaldays' => null,
        'eEzsignfoldertypeDisposal' => null,
        'iEzsignfoldertypeDisposaldays' => null,
        'iEzsignfoldertypeDeadlinedays' => null,
        'bEzsignfoldertypeSendattatchmentsigner' => null,
        'bEzsignfoldertypeSendsignedtodocumentowner' => null,
        'bEzsignfoldertypeSendsignedtofolderowner' => null,
        'bEzsignfoldertypeSendsignedtofullgroup' => null,
        'bEzsignfoldertypeSendsignedtolimitedgroup' => null,
        'bEzsignfoldertypeSendsignedtocolleague' => null,
        'bEzsignfoldertypeSendsummarytodocumentowner' => null,
        'bEzsignfoldertypeSendsummarytofolderowner' => null,
        'bEzsignfoldertypeSendsummarytofullgroup' => null,
        'bEzsignfoldertypeSendsummarytolimitedgroup' => null,
        'bEzsignfoldertypeSendsummarytocolleague' => null,
        'bEzsignfoldertypeIncludeproofsigner' => null,
        'bEzsignfoldertypeIncludeproofuser' => null,
        'bEzsignfoldertypeIsactive' => null,
        'aFkiUserIDSigned' => null,
        'aFkiUserIDSummary' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pkiEzsignfoldertypeID' => false,
		'objEzsignfoldertypeName' => false,
		'fkiBrandingID' => false,
		'fkiBillingentityinternalID' => false,
		'fkiUsergroupID' => false,
		'fkiUsergroupIDRestricted' => false,
		'fkiEzsigntsarequirementID' => false,
		'sBrandingDescriptionX' => false,
		'sBillingentityinternalDescriptionX' => false,
		'sEzsigntsarequirementDescriptionX' => false,
		'sEmailAddressSigned' => false,
		'sEmailAddressSummary' => false,
		'sUsergroupNameX' => false,
		'sUsergroupNameXRestricted' => false,
		'eEzsignfoldertypePrivacylevel' => false,
		'eEzsignfoldertypeSendreminderfrequency' => false,
		'iEzsignfoldertypeArchivaldays' => false,
		'eEzsignfoldertypeDisposal' => false,
		'iEzsignfoldertypeDisposaldays' => false,
		'iEzsignfoldertypeDeadlinedays' => false,
		'bEzsignfoldertypeSendattatchmentsigner' => false,
		'bEzsignfoldertypeSendsignedtodocumentowner' => false,
		'bEzsignfoldertypeSendsignedtofolderowner' => false,
		'bEzsignfoldertypeSendsignedtofullgroup' => false,
		'bEzsignfoldertypeSendsignedtolimitedgroup' => false,
		'bEzsignfoldertypeSendsignedtocolleague' => false,
		'bEzsignfoldertypeSendsummarytodocumentowner' => false,
		'bEzsignfoldertypeSendsummarytofolderowner' => false,
		'bEzsignfoldertypeSendsummarytofullgroup' => false,
		'bEzsignfoldertypeSendsummarytolimitedgroup' => false,
		'bEzsignfoldertypeSendsummarytocolleague' => false,
		'bEzsignfoldertypeIncludeproofsigner' => false,
		'bEzsignfoldertypeIncludeproofuser' => false,
		'bEzsignfoldertypeIsactive' => false,
		'aFkiUserIDSigned' => false,
		'aFkiUserIDSummary' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pkiEzsignfoldertypeID' => 'pkiEzsignfoldertypeID',
        'objEzsignfoldertypeName' => 'objEzsignfoldertypeName',
        'fkiBrandingID' => 'fkiBrandingID',
        'fkiBillingentityinternalID' => 'fkiBillingentityinternalID',
        'fkiUsergroupID' => 'fkiUsergroupID',
        'fkiUsergroupIDRestricted' => 'fkiUsergroupIDRestricted',
        'fkiEzsigntsarequirementID' => 'fkiEzsigntsarequirementID',
        'sBrandingDescriptionX' => 'sBrandingDescriptionX',
        'sBillingentityinternalDescriptionX' => 'sBillingentityinternalDescriptionX',
        'sEzsigntsarequirementDescriptionX' => 'sEzsigntsarequirementDescriptionX',
        'sEmailAddressSigned' => 'sEmailAddressSigned',
        'sEmailAddressSummary' => 'sEmailAddressSummary',
        'sUsergroupNameX' => 'sUsergroupNameX',
        'sUsergroupNameXRestricted' => 'sUsergroupNameXRestricted',
        'eEzsignfoldertypePrivacylevel' => 'eEzsignfoldertypePrivacylevel',
        'eEzsignfoldertypeSendreminderfrequency' => 'eEzsignfoldertypeSendreminderfrequency',
        'iEzsignfoldertypeArchivaldays' => 'iEzsignfoldertypeArchivaldays',
        'eEzsignfoldertypeDisposal' => 'eEzsignfoldertypeDisposal',
        'iEzsignfoldertypeDisposaldays' => 'iEzsignfoldertypeDisposaldays',
        'iEzsignfoldertypeDeadlinedays' => 'iEzsignfoldertypeDeadlinedays',
        'bEzsignfoldertypeSendattatchmentsigner' => 'bEzsignfoldertypeSendattatchmentsigner',
        'bEzsignfoldertypeSendsignedtodocumentowner' => 'bEzsignfoldertypeSendsignedtodocumentowner',
        'bEzsignfoldertypeSendsignedtofolderowner' => 'bEzsignfoldertypeSendsignedtofolderowner',
        'bEzsignfoldertypeSendsignedtofullgroup' => 'bEzsignfoldertypeSendsignedtofullgroup',
        'bEzsignfoldertypeSendsignedtolimitedgroup' => 'bEzsignfoldertypeSendsignedtolimitedgroup',
        'bEzsignfoldertypeSendsignedtocolleague' => 'bEzsignfoldertypeSendsignedtocolleague',
        'bEzsignfoldertypeSendsummarytodocumentowner' => 'bEzsignfoldertypeSendsummarytodocumentowner',
        'bEzsignfoldertypeSendsummarytofolderowner' => 'bEzsignfoldertypeSendsummarytofolderowner',
        'bEzsignfoldertypeSendsummarytofullgroup' => 'bEzsignfoldertypeSendsummarytofullgroup',
        'bEzsignfoldertypeSendsummarytolimitedgroup' => 'bEzsignfoldertypeSendsummarytolimitedgroup',
        'bEzsignfoldertypeSendsummarytocolleague' => 'bEzsignfoldertypeSendsummarytocolleague',
        'bEzsignfoldertypeIncludeproofsigner' => 'bEzsignfoldertypeIncludeproofsigner',
        'bEzsignfoldertypeIncludeproofuser' => 'bEzsignfoldertypeIncludeproofuser',
        'bEzsignfoldertypeIsactive' => 'bEzsignfoldertypeIsactive',
        'aFkiUserIDSigned' => 'a_fkiUserIDSigned',
        'aFkiUserIDSummary' => 'a_fkiUserIDSummary'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pkiEzsignfoldertypeID' => 'setPkiEzsignfoldertypeID',
        'objEzsignfoldertypeName' => 'setObjEzsignfoldertypeName',
        'fkiBrandingID' => 'setFkiBrandingID',
        'fkiBillingentityinternalID' => 'setFkiBillingentityinternalID',
        'fkiUsergroupID' => 'setFkiUsergroupID',
        'fkiUsergroupIDRestricted' => 'setFkiUsergroupIDRestricted',
        'fkiEzsigntsarequirementID' => 'setFkiEzsigntsarequirementID',
        'sBrandingDescriptionX' => 'setSBrandingDescriptionX',
        'sBillingentityinternalDescriptionX' => 'setSBillingentityinternalDescriptionX',
        'sEzsigntsarequirementDescriptionX' => 'setSEzsigntsarequirementDescriptionX',
        'sEmailAddressSigned' => 'setSEmailAddressSigned',
        'sEmailAddressSummary' => 'setSEmailAddressSummary',
        'sUsergroupNameX' => 'setSUsergroupNameX',
        'sUsergroupNameXRestricted' => 'setSUsergroupNameXRestricted',
        'eEzsignfoldertypePrivacylevel' => 'setEEzsignfoldertypePrivacylevel',
        'eEzsignfoldertypeSendreminderfrequency' => 'setEEzsignfoldertypeSendreminderfrequency',
        'iEzsignfoldertypeArchivaldays' => 'setIEzsignfoldertypeArchivaldays',
        'eEzsignfoldertypeDisposal' => 'setEEzsignfoldertypeDisposal',
        'iEzsignfoldertypeDisposaldays' => 'setIEzsignfoldertypeDisposaldays',
        'iEzsignfoldertypeDeadlinedays' => 'setIEzsignfoldertypeDeadlinedays',
        'bEzsignfoldertypeSendattatchmentsigner' => 'setBEzsignfoldertypeSendattatchmentsigner',
        'bEzsignfoldertypeSendsignedtodocumentowner' => 'setBEzsignfoldertypeSendsignedtodocumentowner',
        'bEzsignfoldertypeSendsignedtofolderowner' => 'setBEzsignfoldertypeSendsignedtofolderowner',
        'bEzsignfoldertypeSendsignedtofullgroup' => 'setBEzsignfoldertypeSendsignedtofullgroup',
        'bEzsignfoldertypeSendsignedtolimitedgroup' => 'setBEzsignfoldertypeSendsignedtolimitedgroup',
        'bEzsignfoldertypeSendsignedtocolleague' => 'setBEzsignfoldertypeSendsignedtocolleague',
        'bEzsignfoldertypeSendsummarytodocumentowner' => 'setBEzsignfoldertypeSendsummarytodocumentowner',
        'bEzsignfoldertypeSendsummarytofolderowner' => 'setBEzsignfoldertypeSendsummarytofolderowner',
        'bEzsignfoldertypeSendsummarytofullgroup' => 'setBEzsignfoldertypeSendsummarytofullgroup',
        'bEzsignfoldertypeSendsummarytolimitedgroup' => 'setBEzsignfoldertypeSendsummarytolimitedgroup',
        'bEzsignfoldertypeSendsummarytocolleague' => 'setBEzsignfoldertypeSendsummarytocolleague',
        'bEzsignfoldertypeIncludeproofsigner' => 'setBEzsignfoldertypeIncludeproofsigner',
        'bEzsignfoldertypeIncludeproofuser' => 'setBEzsignfoldertypeIncludeproofuser',
        'bEzsignfoldertypeIsactive' => 'setBEzsignfoldertypeIsactive',
        'aFkiUserIDSigned' => 'setAFkiUserIDSigned',
        'aFkiUserIDSummary' => 'setAFkiUserIDSummary'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pkiEzsignfoldertypeID' => 'getPkiEzsignfoldertypeID',
        'objEzsignfoldertypeName' => 'getObjEzsignfoldertypeName',
        'fkiBrandingID' => 'getFkiBrandingID',
        'fkiBillingentityinternalID' => 'getFkiBillingentityinternalID',
        'fkiUsergroupID' => 'getFkiUsergroupID',
        'fkiUsergroupIDRestricted' => 'getFkiUsergroupIDRestricted',
        'fkiEzsigntsarequirementID' => 'getFkiEzsigntsarequirementID',
        'sBrandingDescriptionX' => 'getSBrandingDescriptionX',
        'sBillingentityinternalDescriptionX' => 'getSBillingentityinternalDescriptionX',
        'sEzsigntsarequirementDescriptionX' => 'getSEzsigntsarequirementDescriptionX',
        'sEmailAddressSigned' => 'getSEmailAddressSigned',
        'sEmailAddressSummary' => 'getSEmailAddressSummary',
        'sUsergroupNameX' => 'getSUsergroupNameX',
        'sUsergroupNameXRestricted' => 'getSUsergroupNameXRestricted',
        'eEzsignfoldertypePrivacylevel' => 'getEEzsignfoldertypePrivacylevel',
        'eEzsignfoldertypeSendreminderfrequency' => 'getEEzsignfoldertypeSendreminderfrequency',
        'iEzsignfoldertypeArchivaldays' => 'getIEzsignfoldertypeArchivaldays',
        'eEzsignfoldertypeDisposal' => 'getEEzsignfoldertypeDisposal',
        'iEzsignfoldertypeDisposaldays' => 'getIEzsignfoldertypeDisposaldays',
        'iEzsignfoldertypeDeadlinedays' => 'getIEzsignfoldertypeDeadlinedays',
        'bEzsignfoldertypeSendattatchmentsigner' => 'getBEzsignfoldertypeSendattatchmentsigner',
        'bEzsignfoldertypeSendsignedtodocumentowner' => 'getBEzsignfoldertypeSendsignedtodocumentowner',
        'bEzsignfoldertypeSendsignedtofolderowner' => 'getBEzsignfoldertypeSendsignedtofolderowner',
        'bEzsignfoldertypeSendsignedtofullgroup' => 'getBEzsignfoldertypeSendsignedtofullgroup',
        'bEzsignfoldertypeSendsignedtolimitedgroup' => 'getBEzsignfoldertypeSendsignedtolimitedgroup',
        'bEzsignfoldertypeSendsignedtocolleague' => 'getBEzsignfoldertypeSendsignedtocolleague',
        'bEzsignfoldertypeSendsummarytodocumentowner' => 'getBEzsignfoldertypeSendsummarytodocumentowner',
        'bEzsignfoldertypeSendsummarytofolderowner' => 'getBEzsignfoldertypeSendsummarytofolderowner',
        'bEzsignfoldertypeSendsummarytofullgroup' => 'getBEzsignfoldertypeSendsummarytofullgroup',
        'bEzsignfoldertypeSendsummarytolimitedgroup' => 'getBEzsignfoldertypeSendsummarytolimitedgroup',
        'bEzsignfoldertypeSendsummarytocolleague' => 'getBEzsignfoldertypeSendsummarytocolleague',
        'bEzsignfoldertypeIncludeproofsigner' => 'getBEzsignfoldertypeIncludeproofsigner',
        'bEzsignfoldertypeIncludeproofuser' => 'getBEzsignfoldertypeIncludeproofuser',
        'bEzsignfoldertypeIsactive' => 'getBEzsignfoldertypeIsactive',
        'aFkiUserIDSigned' => 'getAFkiUserIDSigned',
        'aFkiUserIDSummary' => 'getAFkiUserIDSummary'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pkiEzsignfoldertypeID', $data ?? [], null);
        $this->setIfExists('objEzsignfoldertypeName', $data ?? [], null);
        $this->setIfExists('fkiBrandingID', $data ?? [], null);
        $this->setIfExists('fkiBillingentityinternalID', $data ?? [], null);
        $this->setIfExists('fkiUsergroupID', $data ?? [], null);
        $this->setIfExists('fkiUsergroupIDRestricted', $data ?? [], null);
        $this->setIfExists('fkiEzsigntsarequirementID', $data ?? [], null);
        $this->setIfExists('sBrandingDescriptionX', $data ?? [], null);
        $this->setIfExists('sBillingentityinternalDescriptionX', $data ?? [], null);
        $this->setIfExists('sEzsigntsarequirementDescriptionX', $data ?? [], null);
        $this->setIfExists('sEmailAddressSigned', $data ?? [], null);
        $this->setIfExists('sEmailAddressSummary', $data ?? [], null);
        $this->setIfExists('sUsergroupNameX', $data ?? [], null);
        $this->setIfExists('sUsergroupNameXRestricted', $data ?? [], null);
        $this->setIfExists('eEzsignfoldertypePrivacylevel', $data ?? [], null);
        $this->setIfExists('eEzsignfoldertypeSendreminderfrequency', $data ?? [], null);
        $this->setIfExists('iEzsignfoldertypeArchivaldays', $data ?? [], null);
        $this->setIfExists('eEzsignfoldertypeDisposal', $data ?? [], null);
        $this->setIfExists('iEzsignfoldertypeDisposaldays', $data ?? [], null);
        $this->setIfExists('iEzsignfoldertypeDeadlinedays', $data ?? [], null);
        $this->setIfExists('bEzsignfoldertypeSendattatchmentsigner', $data ?? [], null);
        $this->setIfExists('bEzsignfoldertypeSendsignedtodocumentowner', $data ?? [], null);
        $this->setIfExists('bEzsignfoldertypeSendsignedtofolderowner', $data ?? [], null);
        $this->setIfExists('bEzsignfoldertypeSendsignedtofullgroup', $data ?? [], null);
        $this->setIfExists('bEzsignfoldertypeSendsignedtolimitedgroup', $data ?? [], null);
        $this->setIfExists('bEzsignfoldertypeSendsignedtocolleague', $data ?? [], null);
        $this->setIfExists('bEzsignfoldertypeSendsummarytodocumentowner', $data ?? [], null);
        $this->setIfExists('bEzsignfoldertypeSendsummarytofolderowner', $data ?? [], null);
        $this->setIfExists('bEzsignfoldertypeSendsummarytofullgroup', $data ?? [], null);
        $this->setIfExists('bEzsignfoldertypeSendsummarytolimitedgroup', $data ?? [], null);
        $this->setIfExists('bEzsignfoldertypeSendsummarytocolleague', $data ?? [], null);
        $this->setIfExists('bEzsignfoldertypeIncludeproofsigner', $data ?? [], null);
        $this->setIfExists('bEzsignfoldertypeIncludeproofuser', $data ?? [], null);
        $this->setIfExists('bEzsignfoldertypeIsactive', $data ?? [], null);
        $this->setIfExists('aFkiUserIDSigned', $data ?? [], null);
        $this->setIfExists('aFkiUserIDSummary', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pkiEzsignfoldertypeID'] === null) {
            $invalidProperties[] = "'pkiEzsignfoldertypeID' can't be null";
        }
        if (($this->container['pkiEzsignfoldertypeID'] < 0)) {
            $invalidProperties[] = "invalid value for 'pkiEzsignfoldertypeID', must be bigger than or equal to 0.";
        }

        if ($this->container['objEzsignfoldertypeName'] === null) {
            $invalidProperties[] = "'objEzsignfoldertypeName' can't be null";
        }
        if ($this->container['fkiBrandingID'] === null) {
            $invalidProperties[] = "'fkiBrandingID' can't be null";
        }
        if (($this->container['fkiBrandingID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiBrandingID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiBillingentityinternalID']) && ($this->container['fkiBillingentityinternalID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiBillingentityinternalID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiUsergroupID']) && ($this->container['fkiUsergroupID'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiUsergroupID', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiUsergroupIDRestricted']) && ($this->container['fkiUsergroupIDRestricted'] < 0)) {
            $invalidProperties[] = "invalid value for 'fkiUsergroupIDRestricted', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fkiEzsigntsarequirementID']) && ($this->container['fkiEzsigntsarequirementID'] > 3)) {
            $invalidProperties[] = "invalid value for 'fkiEzsigntsarequirementID', must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['fkiEzsigntsarequirementID']) && ($this->container['fkiEzsigntsarequirementID'] < 1)) {
            $invalidProperties[] = "invalid value for 'fkiEzsigntsarequirementID', must be bigger than or equal to 1.";
        }

        if ($this->container['sBrandingDescriptionX'] === null) {
            $invalidProperties[] = "'sBrandingDescriptionX' can't be null";
        }
        if ($this->container['eEzsignfoldertypePrivacylevel'] === null) {
            $invalidProperties[] = "'eEzsignfoldertypePrivacylevel' can't be null";
        }
        if ($this->container['iEzsignfoldertypeArchivaldays'] === null) {
            $invalidProperties[] = "'iEzsignfoldertypeArchivaldays' can't be null";
        }
        if (($this->container['iEzsignfoldertypeArchivaldays'] > 180)) {
            $invalidProperties[] = "invalid value for 'iEzsignfoldertypeArchivaldays', must be smaller than or equal to 180.";
        }

        if (($this->container['iEzsignfoldertypeArchivaldays'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzsignfoldertypeArchivaldays', must be bigger than or equal to 0.";
        }

        if ($this->container['eEzsignfoldertypeDisposal'] === null) {
            $invalidProperties[] = "'eEzsignfoldertypeDisposal' can't be null";
        }
        if (!is_null($this->container['iEzsignfoldertypeDisposaldays']) && ($this->container['iEzsignfoldertypeDisposaldays'] > 9999)) {
            $invalidProperties[] = "invalid value for 'iEzsignfoldertypeDisposaldays', must be smaller than or equal to 9999.";
        }

        if (!is_null($this->container['iEzsignfoldertypeDisposaldays']) && ($this->container['iEzsignfoldertypeDisposaldays'] < 0)) {
            $invalidProperties[] = "invalid value for 'iEzsignfoldertypeDisposaldays', must be bigger than or equal to 0.";
        }

        if ($this->container['iEzsignfoldertypeDeadlinedays'] === null) {
            $invalidProperties[] = "'iEzsignfoldertypeDeadlinedays' can't be null";
        }
        if (($this->container['iEzsignfoldertypeDeadlinedays'] > 60)) {
            $invalidProperties[] = "invalid value for 'iEzsignfoldertypeDeadlinedays', must be smaller than or equal to 60.";
        }

        if (($this->container['iEzsignfoldertypeDeadlinedays'] < 1)) {
            $invalidProperties[] = "invalid value for 'iEzsignfoldertypeDeadlinedays', must be bigger than or equal to 1.";
        }

        if ($this->container['bEzsignfoldertypeSendattatchmentsigner'] === null) {
            $invalidProperties[] = "'bEzsignfoldertypeSendattatchmentsigner' can't be null";
        }
        if ($this->container['bEzsignfoldertypeSendsignedtodocumentowner'] === null) {
            $invalidProperties[] = "'bEzsignfoldertypeSendsignedtodocumentowner' can't be null";
        }
        if ($this->container['bEzsignfoldertypeSendsignedtofolderowner'] === null) {
            $invalidProperties[] = "'bEzsignfoldertypeSendsignedtofolderowner' can't be null";
        }
        if ($this->container['bEzsignfoldertypeSendsignedtocolleague'] === null) {
            $invalidProperties[] = "'bEzsignfoldertypeSendsignedtocolleague' can't be null";
        }
        if ($this->container['bEzsignfoldertypeSendsummarytodocumentowner'] === null) {
            $invalidProperties[] = "'bEzsignfoldertypeSendsummarytodocumentowner' can't be null";
        }
        if ($this->container['bEzsignfoldertypeSendsummarytofolderowner'] === null) {
            $invalidProperties[] = "'bEzsignfoldertypeSendsummarytofolderowner' can't be null";
        }
        if ($this->container['bEzsignfoldertypeSendsummarytocolleague'] === null) {
            $invalidProperties[] = "'bEzsignfoldertypeSendsummarytocolleague' can't be null";
        }
        if ($this->container['bEzsignfoldertypeIncludeproofsigner'] === null) {
            $invalidProperties[] = "'bEzsignfoldertypeIncludeproofsigner' can't be null";
        }
        if ($this->container['bEzsignfoldertypeIncludeproofuser'] === null) {
            $invalidProperties[] = "'bEzsignfoldertypeIncludeproofuser' can't be null";
        }
        if ($this->container['bEzsignfoldertypeIsactive'] === null) {
            $invalidProperties[] = "'bEzsignfoldertypeIsactive' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pkiEzsignfoldertypeID
     *
     * @return int
     */
    public function getPkiEzsignfoldertypeID()
    {
        return $this->container['pkiEzsignfoldertypeID'];
    }

    /**
     * Sets pkiEzsignfoldertypeID
     *
     * @param int $pkiEzsignfoldertypeID The unique ID of the Ezsignfoldertype.
     *
     * @return self
     */
    public function setPkiEzsignfoldertypeID($pkiEzsignfoldertypeID)
    {

        if (($pkiEzsignfoldertypeID < 0)) {
            throw new \InvalidArgumentException('invalid value for $pkiEzsignfoldertypeID when calling EzsignfoldertypeGetObjectV1ResponseMPayload., must be bigger than or equal to 0.');
        }


        //if (is_null($pkiEzsignfoldertypeID)) {
            //throw new \InvalidArgumentException('non-nullable pkiEzsignfoldertypeID cannot be null');
        //}
        $this->container['pkiEzsignfoldertypeID'] = (is_null($pkiEzsignfoldertypeID) ? null : (int) $pkiEzsignfoldertypeID);

        return $this;
    }

    /**
     * Gets objEzsignfoldertypeName
     *
     * @return \eZmaxAPI\Model\MultilingualEzsignfoldertypeName
     */
    public function getObjEzsignfoldertypeName()
    {
        return $this->container['objEzsignfoldertypeName'];
    }

    /**
     * Sets objEzsignfoldertypeName
     *
     * @param \eZmaxAPI\Model\MultilingualEzsignfoldertypeName $objEzsignfoldertypeName objEzsignfoldertypeName
     *
     * @return self
     */
    public function setObjEzsignfoldertypeName($objEzsignfoldertypeName)
    {

        //if (is_null($objEzsignfoldertypeName)) {
            //throw new \InvalidArgumentException('non-nullable objEzsignfoldertypeName cannot be null');
        //}
        $this->container['objEzsignfoldertypeName'] = $objEzsignfoldertypeName;

        return $this;
    }

    /**
     * Gets fkiBrandingID
     *
     * @return int
     */
    public function getFkiBrandingID()
    {
        return $this->container['fkiBrandingID'];
    }

    /**
     * Sets fkiBrandingID
     *
     * @param int $fkiBrandingID The unique ID of the Branding
     *
     * @return self
     */
    public function setFkiBrandingID($fkiBrandingID)
    {

        if (($fkiBrandingID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiBrandingID when calling EzsignfoldertypeGetObjectV1ResponseMPayload., must be bigger than or equal to 0.');
        }


        //if (is_null($fkiBrandingID)) {
            //throw new \InvalidArgumentException('non-nullable fkiBrandingID cannot be null');
        //}
        $this->container['fkiBrandingID'] = (is_null($fkiBrandingID) ? null : (int) $fkiBrandingID);

        return $this;
    }

    /**
     * Gets fkiBillingentityinternalID
     *
     * @return int|null
     */
    public function getFkiBillingentityinternalID()
    {
        return $this->container['fkiBillingentityinternalID'];
    }

    /**
     * Sets fkiBillingentityinternalID
     *
     * @param int|null $fkiBillingentityinternalID The unique ID of the Billingentityinternal.
     *
     * @return self
     */
    public function setFkiBillingentityinternalID($fkiBillingentityinternalID)
    {

        if (!is_null($fkiBillingentityinternalID) && ($fkiBillingentityinternalID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiBillingentityinternalID when calling EzsignfoldertypeGetObjectV1ResponseMPayload., must be bigger than or equal to 0.');
        }


        //if (is_null($fkiBillingentityinternalID)) {
            //throw new \InvalidArgumentException('non-nullable fkiBillingentityinternalID cannot be null');
        //}
        $this->container['fkiBillingentityinternalID'] = (is_null($fkiBillingentityinternalID) ? null : (int) $fkiBillingentityinternalID);

        return $this;
    }

    /**
     * Gets fkiUsergroupID
     *
     * @return int|null
     */
    public function getFkiUsergroupID()
    {
        return $this->container['fkiUsergroupID'];
    }

    /**
     * Sets fkiUsergroupID
     *
     * @param int|null $fkiUsergroupID The unique ID of the Usergroup
     *
     * @return self
     */
    public function setFkiUsergroupID($fkiUsergroupID)
    {

        if (!is_null($fkiUsergroupID) && ($fkiUsergroupID < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiUsergroupID when calling EzsignfoldertypeGetObjectV1ResponseMPayload., must be bigger than or equal to 0.');
        }


        //if (is_null($fkiUsergroupID)) {
            //throw new \InvalidArgumentException('non-nullable fkiUsergroupID cannot be null');
        //}
        $this->container['fkiUsergroupID'] = (is_null($fkiUsergroupID) ? null : (int) $fkiUsergroupID);

        return $this;
    }

    /**
     * Gets fkiUsergroupIDRestricted
     *
     * @return int|null
     */
    public function getFkiUsergroupIDRestricted()
    {
        return $this->container['fkiUsergroupIDRestricted'];
    }

    /**
     * Sets fkiUsergroupIDRestricted
     *
     * @param int|null $fkiUsergroupIDRestricted The unique ID of the Usergroup
     *
     * @return self
     */
    public function setFkiUsergroupIDRestricted($fkiUsergroupIDRestricted)
    {

        if (!is_null($fkiUsergroupIDRestricted) && ($fkiUsergroupIDRestricted < 0)) {
            throw new \InvalidArgumentException('invalid value for $fkiUsergroupIDRestricted when calling EzsignfoldertypeGetObjectV1ResponseMPayload., must be bigger than or equal to 0.');
        }


        //if (is_null($fkiUsergroupIDRestricted)) {
            //throw new \InvalidArgumentException('non-nullable fkiUsergroupIDRestricted cannot be null');
        //}
        $this->container['fkiUsergroupIDRestricted'] = (is_null($fkiUsergroupIDRestricted) ? null : (int) $fkiUsergroupIDRestricted);

        return $this;
    }

    /**
     * Gets fkiEzsigntsarequirementID
     *
     * @return int|null
     */
    public function getFkiEzsigntsarequirementID()
    {
        return $this->container['fkiEzsigntsarequirementID'];
    }

    /**
     * Sets fkiEzsigntsarequirementID
     *
     * @param int|null $fkiEzsigntsarequirementID The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     *
     * @return self
     */
    public function setFkiEzsigntsarequirementID($fkiEzsigntsarequirementID)
    {

        if (!is_null($fkiEzsigntsarequirementID) && ($fkiEzsigntsarequirementID > 3)) {
            throw new \InvalidArgumentException('invalid value for $fkiEzsigntsarequirementID when calling EzsignfoldertypeGetObjectV1ResponseMPayload., must be smaller than or equal to 3.');
        }
        if (!is_null($fkiEzsigntsarequirementID) && ($fkiEzsigntsarequirementID < 1)) {
            throw new \InvalidArgumentException('invalid value for $fkiEzsigntsarequirementID when calling EzsignfoldertypeGetObjectV1ResponseMPayload., must be bigger than or equal to 1.');
        }


        //if (is_null($fkiEzsigntsarequirementID)) {
            //throw new \InvalidArgumentException('non-nullable fkiEzsigntsarequirementID cannot be null');
        //}
        $this->container['fkiEzsigntsarequirementID'] = (is_null($fkiEzsigntsarequirementID) ? null : (int) $fkiEzsigntsarequirementID);

        return $this;
    }

    /**
     * Gets sBrandingDescriptionX
     *
     * @return string
     */
    public function getSBrandingDescriptionX()
    {
        return $this->container['sBrandingDescriptionX'];
    }

    /**
     * Sets sBrandingDescriptionX
     *
     * @param string $sBrandingDescriptionX The Description of the Branding in the language of the requester
     *
     * @return self
     */
    public function setSBrandingDescriptionX($sBrandingDescriptionX)
    {

        //if (is_null($sBrandingDescriptionX)) {
            //throw new \InvalidArgumentException('non-nullable sBrandingDescriptionX cannot be null');
        //}
        $this->container['sBrandingDescriptionX'] = (is_null($sBrandingDescriptionX) ? null : (string) $sBrandingDescriptionX);

        return $this;
    }

    /**
     * Gets sBillingentityinternalDescriptionX
     *
     * @return string|null
     */
    public function getSBillingentityinternalDescriptionX()
    {
        return $this->container['sBillingentityinternalDescriptionX'];
    }

    /**
     * Sets sBillingentityinternalDescriptionX
     *
     * @param string|null $sBillingentityinternalDescriptionX The description of the Billingentityinternal in the language of the requester
     *
     * @return self
     */
    public function setSBillingentityinternalDescriptionX($sBillingentityinternalDescriptionX)
    {

        //if (is_null($sBillingentityinternalDescriptionX)) {
            //throw new \InvalidArgumentException('non-nullable sBillingentityinternalDescriptionX cannot be null');
        //}
        $this->container['sBillingentityinternalDescriptionX'] = (is_null($sBillingentityinternalDescriptionX) ? null : (string) $sBillingentityinternalDescriptionX);

        return $this;
    }

    /**
     * Gets sEzsigntsarequirementDescriptionX
     *
     * @return string|null
     */
    public function getSEzsigntsarequirementDescriptionX()
    {
        return $this->container['sEzsigntsarequirementDescriptionX'];
    }

    /**
     * Sets sEzsigntsarequirementDescriptionX
     *
     * @param string|null $sEzsigntsarequirementDescriptionX The description of the Ezsigntsarequirement in the language of the requester
     *
     * @return self
     */
    public function setSEzsigntsarequirementDescriptionX($sEzsigntsarequirementDescriptionX)
    {

        //if (is_null($sEzsigntsarequirementDescriptionX)) {
            //throw new \InvalidArgumentException('non-nullable sEzsigntsarequirementDescriptionX cannot be null');
        //}
        $this->container['sEzsigntsarequirementDescriptionX'] = (is_null($sEzsigntsarequirementDescriptionX) ? null : (string) $sEzsigntsarequirementDescriptionX);

        return $this;
    }

    /**
     * Gets sEmailAddressSigned
     *
     * @return string|null
     */
    public function getSEmailAddressSigned()
    {
        return $this->container['sEmailAddressSigned'];
    }

    /**
     * Sets sEmailAddressSigned
     *
     * @param string|null $sEmailAddressSigned The email address.
     *
     * @return self
     */
    public function setSEmailAddressSigned($sEmailAddressSigned)
    {

        //if (is_null($sEmailAddressSigned)) {
            //throw new \InvalidArgumentException('non-nullable sEmailAddressSigned cannot be null');
        //}
        $this->container['sEmailAddressSigned'] = (is_null($sEmailAddressSigned) ? null : (string) $sEmailAddressSigned);

        return $this;
    }

    /**
     * Gets sEmailAddressSummary
     *
     * @return string|null
     */
    public function getSEmailAddressSummary()
    {
        return $this->container['sEmailAddressSummary'];
    }

    /**
     * Sets sEmailAddressSummary
     *
     * @param string|null $sEmailAddressSummary The email address.
     *
     * @return self
     */
    public function setSEmailAddressSummary($sEmailAddressSummary)
    {

        //if (is_null($sEmailAddressSummary)) {
            //throw new \InvalidArgumentException('non-nullable sEmailAddressSummary cannot be null');
        //}
        $this->container['sEmailAddressSummary'] = (is_null($sEmailAddressSummary) ? null : (string) $sEmailAddressSummary);

        return $this;
    }

    /**
     * Gets sUsergroupNameX
     *
     * @return string|null
     */
    public function getSUsergroupNameX()
    {
        return $this->container['sUsergroupNameX'];
    }

    /**
     * Sets sUsergroupNameX
     *
     * @param string|null $sUsergroupNameX The Name of the Usergroup in the language of the requester
     *
     * @return self
     */
    public function setSUsergroupNameX($sUsergroupNameX)
    {

        //if (is_null($sUsergroupNameX)) {
            //throw new \InvalidArgumentException('non-nullable sUsergroupNameX cannot be null');
        //}
        $this->container['sUsergroupNameX'] = (is_null($sUsergroupNameX) ? null : (string) $sUsergroupNameX);

        return $this;
    }

    /**
     * Gets sUsergroupNameXRestricted
     *
     * @return string|null
     */
    public function getSUsergroupNameXRestricted()
    {
        return $this->container['sUsergroupNameXRestricted'];
    }

    /**
     * Sets sUsergroupNameXRestricted
     *
     * @param string|null $sUsergroupNameXRestricted The Name of the Usergroup in the language of the requester
     *
     * @return self
     */
    public function setSUsergroupNameXRestricted($sUsergroupNameXRestricted)
    {

        //if (is_null($sUsergroupNameXRestricted)) {
            //throw new \InvalidArgumentException('non-nullable sUsergroupNameXRestricted cannot be null');
        //}
        $this->container['sUsergroupNameXRestricted'] = (is_null($sUsergroupNameXRestricted) ? null : (string) $sUsergroupNameXRestricted);

        return $this;
    }

    /**
     * Gets eEzsignfoldertypePrivacylevel
     *
     * @return \eZmaxAPI\Model\FieldEEzsignfoldertypePrivacylevel
     */
    public function getEEzsignfoldertypePrivacylevel()
    {
        return $this->container['eEzsignfoldertypePrivacylevel'];
    }

    /**
     * Sets eEzsignfoldertypePrivacylevel
     *
     * @param \eZmaxAPI\Model\FieldEEzsignfoldertypePrivacylevel $eEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel
     *
     * @return self
     */
    public function setEEzsignfoldertypePrivacylevel($eEzsignfoldertypePrivacylevel)
    {

        //if (is_null($eEzsignfoldertypePrivacylevel)) {
            //throw new \InvalidArgumentException('non-nullable eEzsignfoldertypePrivacylevel cannot be null');
        //}
        $this->container['eEzsignfoldertypePrivacylevel'] = $eEzsignfoldertypePrivacylevel;

        return $this;
    }

    /**
     * Gets eEzsignfoldertypeSendreminderfrequency
     *
     * @return \eZmaxAPI\Model\FieldEEzsignfoldertypeSendreminderfrequency|null
     */
    public function getEEzsignfoldertypeSendreminderfrequency()
    {
        return $this->container['eEzsignfoldertypeSendreminderfrequency'];
    }

    /**
     * Sets eEzsignfoldertypeSendreminderfrequency
     *
     * @param \eZmaxAPI\Model\FieldEEzsignfoldertypeSendreminderfrequency|null $eEzsignfoldertypeSendreminderfrequency eEzsignfoldertypeSendreminderfrequency
     *
     * @return self
     */
    public function setEEzsignfoldertypeSendreminderfrequency($eEzsignfoldertypeSendreminderfrequency)
    {

        //if (is_null($eEzsignfoldertypeSendreminderfrequency)) {
            //throw new \InvalidArgumentException('non-nullable eEzsignfoldertypeSendreminderfrequency cannot be null');
        //}
        $this->container['eEzsignfoldertypeSendreminderfrequency'] = $eEzsignfoldertypeSendreminderfrequency;

        return $this;
    }

    /**
     * Gets iEzsignfoldertypeArchivaldays
     *
     * @return int
     */
    public function getIEzsignfoldertypeArchivaldays()
    {
        return $this->container['iEzsignfoldertypeArchivaldays'];
    }

    /**
     * Sets iEzsignfoldertypeArchivaldays
     *
     * @param int $iEzsignfoldertypeArchivaldays The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
     *
     * @return self
     */
    public function setIEzsignfoldertypeArchivaldays($iEzsignfoldertypeArchivaldays)
    {

        if (($iEzsignfoldertypeArchivaldays > 180)) {
            throw new \InvalidArgumentException('invalid value for $iEzsignfoldertypeArchivaldays when calling EzsignfoldertypeGetObjectV1ResponseMPayload., must be smaller than or equal to 180.');
        }
        if (($iEzsignfoldertypeArchivaldays < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzsignfoldertypeArchivaldays when calling EzsignfoldertypeGetObjectV1ResponseMPayload., must be bigger than or equal to 0.');
        }


        //if (is_null($iEzsignfoldertypeArchivaldays)) {
            //throw new \InvalidArgumentException('non-nullable iEzsignfoldertypeArchivaldays cannot be null');
        //}
        $this->container['iEzsignfoldertypeArchivaldays'] = (is_null($iEzsignfoldertypeArchivaldays) ? null : (int) $iEzsignfoldertypeArchivaldays);

        return $this;
    }

    /**
     * Gets eEzsignfoldertypeDisposal
     *
     * @return \eZmaxAPI\Model\FieldEEzsignfoldertypeDisposal
     */
    public function getEEzsignfoldertypeDisposal()
    {
        return $this->container['eEzsignfoldertypeDisposal'];
    }

    /**
     * Sets eEzsignfoldertypeDisposal
     *
     * @param \eZmaxAPI\Model\FieldEEzsignfoldertypeDisposal $eEzsignfoldertypeDisposal eEzsignfoldertypeDisposal
     *
     * @return self
     */
    public function setEEzsignfoldertypeDisposal($eEzsignfoldertypeDisposal)
    {

        //if (is_null($eEzsignfoldertypeDisposal)) {
            //throw new \InvalidArgumentException('non-nullable eEzsignfoldertypeDisposal cannot be null');
        //}
        $this->container['eEzsignfoldertypeDisposal'] = $eEzsignfoldertypeDisposal;

        return $this;
    }

    /**
     * Gets iEzsignfoldertypeDisposaldays
     *
     * @return int|null
     */
    public function getIEzsignfoldertypeDisposaldays()
    {
        return $this->container['iEzsignfoldertypeDisposaldays'];
    }

    /**
     * Sets iEzsignfoldertypeDisposaldays
     *
     * @param int|null $iEzsignfoldertypeDisposaldays The number of days after the archival before the disposal of the Ezsignfolder
     *
     * @return self
     */
    public function setIEzsignfoldertypeDisposaldays($iEzsignfoldertypeDisposaldays)
    {

        if (!is_null($iEzsignfoldertypeDisposaldays) && ($iEzsignfoldertypeDisposaldays > 9999)) {
            throw new \InvalidArgumentException('invalid value for $iEzsignfoldertypeDisposaldays when calling EzsignfoldertypeGetObjectV1ResponseMPayload., must be smaller than or equal to 9999.');
        }
        if (!is_null($iEzsignfoldertypeDisposaldays) && ($iEzsignfoldertypeDisposaldays < 0)) {
            throw new \InvalidArgumentException('invalid value for $iEzsignfoldertypeDisposaldays when calling EzsignfoldertypeGetObjectV1ResponseMPayload., must be bigger than or equal to 0.');
        }


        //if (is_null($iEzsignfoldertypeDisposaldays)) {
            //throw new \InvalidArgumentException('non-nullable iEzsignfoldertypeDisposaldays cannot be null');
        //}
        $this->container['iEzsignfoldertypeDisposaldays'] = (is_null($iEzsignfoldertypeDisposaldays) ? null : (int) $iEzsignfoldertypeDisposaldays);

        return $this;
    }

    /**
     * Gets iEzsignfoldertypeDeadlinedays
     *
     * @return int
     */
    public function getIEzsignfoldertypeDeadlinedays()
    {
        return $this->container['iEzsignfoldertypeDeadlinedays'];
    }

    /**
     * Sets iEzsignfoldertypeDeadlinedays
     *
     * @param int $iEzsignfoldertypeDeadlinedays The number of days to get all Ezsignsignatures
     *
     * @return self
     */
    public function setIEzsignfoldertypeDeadlinedays($iEzsignfoldertypeDeadlinedays)
    {

        if (($iEzsignfoldertypeDeadlinedays > 60)) {
            throw new \InvalidArgumentException('invalid value for $iEzsignfoldertypeDeadlinedays when calling EzsignfoldertypeGetObjectV1ResponseMPayload., must be smaller than or equal to 60.');
        }
        if (($iEzsignfoldertypeDeadlinedays < 1)) {
            throw new \InvalidArgumentException('invalid value for $iEzsignfoldertypeDeadlinedays when calling EzsignfoldertypeGetObjectV1ResponseMPayload., must be bigger than or equal to 1.');
        }


        //if (is_null($iEzsignfoldertypeDeadlinedays)) {
            //throw new \InvalidArgumentException('non-nullable iEzsignfoldertypeDeadlinedays cannot be null');
        //}
        $this->container['iEzsignfoldertypeDeadlinedays'] = (is_null($iEzsignfoldertypeDeadlinedays) ? null : (int) $iEzsignfoldertypeDeadlinedays);

        return $this;
    }

    /**
     * Gets bEzsignfoldertypeSendattatchmentsigner
     *
     * @return bool
     */
    public function getBEzsignfoldertypeSendattatchmentsigner()
    {
        return $this->container['bEzsignfoldertypeSendattatchmentsigner'];
    }

    /**
     * Sets bEzsignfoldertypeSendattatchmentsigner
     *
     * @param bool $bEzsignfoldertypeSendattatchmentsigner Whether we send the Ezsigndocument and the proof as attachment in the email
     *
     * @return self
     */
    public function setBEzsignfoldertypeSendattatchmentsigner($bEzsignfoldertypeSendattatchmentsigner)
    {

        //if (is_null($bEzsignfoldertypeSendattatchmentsigner)) {
            //throw new \InvalidArgumentException('non-nullable bEzsignfoldertypeSendattatchmentsigner cannot be null');
        //}
        $this->container['bEzsignfoldertypeSendattatchmentsigner'] = (is_null($bEzsignfoldertypeSendattatchmentsigner) ? null : (bool) $bEzsignfoldertypeSendattatchmentsigner);

        return $this;
    }

    /**
     * Gets bEzsignfoldertypeSendsignedtodocumentowner
     *
     * @return bool
     */
    public function getBEzsignfoldertypeSendsignedtodocumentowner()
    {
        return $this->container['bEzsignfoldertypeSendsignedtodocumentowner'];
    }

    /**
     * Sets bEzsignfoldertypeSendsignedtodocumentowner
     *
     * @param bool $bEzsignfoldertypeSendsignedtodocumentowner Whether we send the signed Ezsigndocument to the Ezsigndocument's owner
     *
     * @return self
     */
    public function setBEzsignfoldertypeSendsignedtodocumentowner($bEzsignfoldertypeSendsignedtodocumentowner)
    {

        //if (is_null($bEzsignfoldertypeSendsignedtodocumentowner)) {
            //throw new \InvalidArgumentException('non-nullable bEzsignfoldertypeSendsignedtodocumentowner cannot be null');
        //}
        $this->container['bEzsignfoldertypeSendsignedtodocumentowner'] = (is_null($bEzsignfoldertypeSendsignedtodocumentowner) ? null : (bool) $bEzsignfoldertypeSendsignedtodocumentowner);

        return $this;
    }

    /**
     * Gets bEzsignfoldertypeSendsignedtofolderowner
     *
     * @return bool
     */
    public function getBEzsignfoldertypeSendsignedtofolderowner()
    {
        return $this->container['bEzsignfoldertypeSendsignedtofolderowner'];
    }

    /**
     * Sets bEzsignfoldertypeSendsignedtofolderowner
     *
     * @param bool $bEzsignfoldertypeSendsignedtofolderowner Whether we send the signed Ezsigndocument to the Ezsignfolder's owner
     *
     * @return self
     */
    public function setBEzsignfoldertypeSendsignedtofolderowner($bEzsignfoldertypeSendsignedtofolderowner)
    {

        //if (is_null($bEzsignfoldertypeSendsignedtofolderowner)) {
            //throw new \InvalidArgumentException('non-nullable bEzsignfoldertypeSendsignedtofolderowner cannot be null');
        //}
        $this->container['bEzsignfoldertypeSendsignedtofolderowner'] = (is_null($bEzsignfoldertypeSendsignedtofolderowner) ? null : (bool) $bEzsignfoldertypeSendsignedtofolderowner);

        return $this;
    }

    /**
     * Gets bEzsignfoldertypeSendsignedtofullgroup
     *
     * @return bool|null
     */
    public function getBEzsignfoldertypeSendsignedtofullgroup()
    {
        return $this->container['bEzsignfoldertypeSendsignedtofullgroup'];
    }

    /**
     * Sets bEzsignfoldertypeSendsignedtofullgroup
     *
     * @param bool|null $bEzsignfoldertypeSendsignedtofullgroup Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
     *
     * @return self
     */
    public function setBEzsignfoldertypeSendsignedtofullgroup($bEzsignfoldertypeSendsignedtofullgroup)
    {

        //if (is_null($bEzsignfoldertypeSendsignedtofullgroup)) {
            //throw new \InvalidArgumentException('non-nullable bEzsignfoldertypeSendsignedtofullgroup cannot be null');
        //}
        $this->container['bEzsignfoldertypeSendsignedtofullgroup'] = (is_null($bEzsignfoldertypeSendsignedtofullgroup) ? null : (bool) $bEzsignfoldertypeSendsignedtofullgroup);

        return $this;
    }

    /**
     * Gets bEzsignfoldertypeSendsignedtolimitedgroup
     *
     * @return bool|null
     */
    public function getBEzsignfoldertypeSendsignedtolimitedgroup()
    {
        return $this->container['bEzsignfoldertypeSendsignedtolimitedgroup'];
    }

    /**
     * Sets bEzsignfoldertypeSendsignedtolimitedgroup
     *
     * @param bool|null $bEzsignfoldertypeSendsignedtolimitedgroup Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
     *
     * @return self
     */
    public function setBEzsignfoldertypeSendsignedtolimitedgroup($bEzsignfoldertypeSendsignedtolimitedgroup)
    {

        //if (is_null($bEzsignfoldertypeSendsignedtolimitedgroup)) {
            //throw new \InvalidArgumentException('non-nullable bEzsignfoldertypeSendsignedtolimitedgroup cannot be null');
        //}
        $this->container['bEzsignfoldertypeSendsignedtolimitedgroup'] = (is_null($bEzsignfoldertypeSendsignedtolimitedgroup) ? null : (bool) $bEzsignfoldertypeSendsignedtolimitedgroup);

        return $this;
    }

    /**
     * Gets bEzsignfoldertypeSendsignedtocolleague
     *
     * @return bool
     */
    public function getBEzsignfoldertypeSendsignedtocolleague()
    {
        return $this->container['bEzsignfoldertypeSendsignedtocolleague'];
    }

    /**
     * Sets bEzsignfoldertypeSendsignedtocolleague
     *
     * @param bool $bEzsignfoldertypeSendsignedtocolleague Whether we send the signed Ezsigndocument to the colleagues
     *
     * @return self
     */
    public function setBEzsignfoldertypeSendsignedtocolleague($bEzsignfoldertypeSendsignedtocolleague)
    {

        //if (is_null($bEzsignfoldertypeSendsignedtocolleague)) {
            //throw new \InvalidArgumentException('non-nullable bEzsignfoldertypeSendsignedtocolleague cannot be null');
        //}
        $this->container['bEzsignfoldertypeSendsignedtocolleague'] = (is_null($bEzsignfoldertypeSendsignedtocolleague) ? null : (bool) $bEzsignfoldertypeSendsignedtocolleague);

        return $this;
    }

    /**
     * Gets bEzsignfoldertypeSendsummarytodocumentowner
     *
     * @return bool
     */
    public function getBEzsignfoldertypeSendsummarytodocumentowner()
    {
        return $this->container['bEzsignfoldertypeSendsummarytodocumentowner'];
    }

    /**
     * Sets bEzsignfoldertypeSendsummarytodocumentowner
     *
     * @param bool $bEzsignfoldertypeSendsummarytodocumentowner Whether we send the summary to the Ezsigndocument's owner
     *
     * @return self
     */
    public function setBEzsignfoldertypeSendsummarytodocumentowner($bEzsignfoldertypeSendsummarytodocumentowner)
    {

        //if (is_null($bEzsignfoldertypeSendsummarytodocumentowner)) {
            //throw new \InvalidArgumentException('non-nullable bEzsignfoldertypeSendsummarytodocumentowner cannot be null');
        //}
        $this->container['bEzsignfoldertypeSendsummarytodocumentowner'] = (is_null($bEzsignfoldertypeSendsummarytodocumentowner) ? null : (bool) $bEzsignfoldertypeSendsummarytodocumentowner);

        return $this;
    }

    /**
     * Gets bEzsignfoldertypeSendsummarytofolderowner
     *
     * @return bool
     */
    public function getBEzsignfoldertypeSendsummarytofolderowner()
    {
        return $this->container['bEzsignfoldertypeSendsummarytofolderowner'];
    }

    /**
     * Sets bEzsignfoldertypeSendsummarytofolderowner
     *
     * @param bool $bEzsignfoldertypeSendsummarytofolderowner Whether we send the summary to the Ezsignfolder's owner
     *
     * @return self
     */
    public function setBEzsignfoldertypeSendsummarytofolderowner($bEzsignfoldertypeSendsummarytofolderowner)
    {

        //if (is_null($bEzsignfoldertypeSendsummarytofolderowner)) {
            //throw new \InvalidArgumentException('non-nullable bEzsignfoldertypeSendsummarytofolderowner cannot be null');
        //}
        $this->container['bEzsignfoldertypeSendsummarytofolderowner'] = (is_null($bEzsignfoldertypeSendsummarytofolderowner) ? null : (bool) $bEzsignfoldertypeSendsummarytofolderowner);

        return $this;
    }

    /**
     * Gets bEzsignfoldertypeSendsummarytofullgroup
     *
     * @return bool|null
     */
    public function getBEzsignfoldertypeSendsummarytofullgroup()
    {
        return $this->container['bEzsignfoldertypeSendsummarytofullgroup'];
    }

    /**
     * Sets bEzsignfoldertypeSendsummarytofullgroup
     *
     * @param bool|null $bEzsignfoldertypeSendsummarytofullgroup Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
     *
     * @return self
     */
    public function setBEzsignfoldertypeSendsummarytofullgroup($bEzsignfoldertypeSendsummarytofullgroup)
    {

        //if (is_null($bEzsignfoldertypeSendsummarytofullgroup)) {
            //throw new \InvalidArgumentException('non-nullable bEzsignfoldertypeSendsummarytofullgroup cannot be null');
        //}
        $this->container['bEzsignfoldertypeSendsummarytofullgroup'] = (is_null($bEzsignfoldertypeSendsummarytofullgroup) ? null : (bool) $bEzsignfoldertypeSendsummarytofullgroup);

        return $this;
    }

    /**
     * Gets bEzsignfoldertypeSendsummarytolimitedgroup
     *
     * @return bool|null
     */
    public function getBEzsignfoldertypeSendsummarytolimitedgroup()
    {
        return $this->container['bEzsignfoldertypeSendsummarytolimitedgroup'];
    }

    /**
     * Sets bEzsignfoldertypeSendsummarytolimitedgroup
     *
     * @param bool|null $bEzsignfoldertypeSendsummarytolimitedgroup Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
     *
     * @return self
     */
    public function setBEzsignfoldertypeSendsummarytolimitedgroup($bEzsignfoldertypeSendsummarytolimitedgroup)
    {

        //if (is_null($bEzsignfoldertypeSendsummarytolimitedgroup)) {
            //throw new \InvalidArgumentException('non-nullable bEzsignfoldertypeSendsummarytolimitedgroup cannot be null');
        //}
        $this->container['bEzsignfoldertypeSendsummarytolimitedgroup'] = (is_null($bEzsignfoldertypeSendsummarytolimitedgroup) ? null : (bool) $bEzsignfoldertypeSendsummarytolimitedgroup);

        return $this;
    }

    /**
     * Gets bEzsignfoldertypeSendsummarytocolleague
     *
     * @return bool
     */
    public function getBEzsignfoldertypeSendsummarytocolleague()
    {
        return $this->container['bEzsignfoldertypeSendsummarytocolleague'];
    }

    /**
     * Sets bEzsignfoldertypeSendsummarytocolleague
     *
     * @param bool $bEzsignfoldertypeSendsummarytocolleague Whether we send the summary to the colleagues
     *
     * @return self
     */
    public function setBEzsignfoldertypeSendsummarytocolleague($bEzsignfoldertypeSendsummarytocolleague)
    {

        //if (is_null($bEzsignfoldertypeSendsummarytocolleague)) {
            //throw new \InvalidArgumentException('non-nullable bEzsignfoldertypeSendsummarytocolleague cannot be null');
        //}
        $this->container['bEzsignfoldertypeSendsummarytocolleague'] = (is_null($bEzsignfoldertypeSendsummarytocolleague) ? null : (bool) $bEzsignfoldertypeSendsummarytocolleague);

        return $this;
    }

    /**
     * Gets bEzsignfoldertypeIncludeproofsigner
     *
     * @return bool
     */
    public function getBEzsignfoldertypeIncludeproofsigner()
    {
        return $this->container['bEzsignfoldertypeIncludeproofsigner'];
    }

    /**
     * Sets bEzsignfoldertypeIncludeproofsigner
     *
     * @param bool $bEzsignfoldertypeIncludeproofsigner Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
     *
     * @return self
     */
    public function setBEzsignfoldertypeIncludeproofsigner($bEzsignfoldertypeIncludeproofsigner)
    {

        //if (is_null($bEzsignfoldertypeIncludeproofsigner)) {
            //throw new \InvalidArgumentException('non-nullable bEzsignfoldertypeIncludeproofsigner cannot be null');
        //}
        $this->container['bEzsignfoldertypeIncludeproofsigner'] = (is_null($bEzsignfoldertypeIncludeproofsigner) ? null : (bool) $bEzsignfoldertypeIncludeproofsigner);

        return $this;
    }

    /**
     * Gets bEzsignfoldertypeIncludeproofuser
     *
     * @return bool
     */
    public function getBEzsignfoldertypeIncludeproofuser()
    {
        return $this->container['bEzsignfoldertypeIncludeproofuser'];
    }

    /**
     * Sets bEzsignfoldertypeIncludeproofuser
     *
     * @param bool $bEzsignfoldertypeIncludeproofuser Whether we include the proof with the signed Ezsigndocument for users
     *
     * @return self
     */
    public function setBEzsignfoldertypeIncludeproofuser($bEzsignfoldertypeIncludeproofuser)
    {

        //if (is_null($bEzsignfoldertypeIncludeproofuser)) {
            //throw new \InvalidArgumentException('non-nullable bEzsignfoldertypeIncludeproofuser cannot be null');
        //}
        $this->container['bEzsignfoldertypeIncludeproofuser'] = (is_null($bEzsignfoldertypeIncludeproofuser) ? null : (bool) $bEzsignfoldertypeIncludeproofuser);

        return $this;
    }

    /**
     * Gets bEzsignfoldertypeIsactive
     *
     * @return bool
     */
    public function getBEzsignfoldertypeIsactive()
    {
        return $this->container['bEzsignfoldertypeIsactive'];
    }

    /**
     * Sets bEzsignfoldertypeIsactive
     *
     * @param bool $bEzsignfoldertypeIsactive Whether the Ezsignfoldertype is active or not
     *
     * @return self
     */
    public function setBEzsignfoldertypeIsactive($bEzsignfoldertypeIsactive)
    {

        //if (is_null($bEzsignfoldertypeIsactive)) {
            //throw new \InvalidArgumentException('non-nullable bEzsignfoldertypeIsactive cannot be null');
        //}
        $this->container['bEzsignfoldertypeIsactive'] = (is_null($bEzsignfoldertypeIsactive) ? null : (bool) $bEzsignfoldertypeIsactive);

        return $this;
    }

    /**
     * Gets aFkiUserIDSigned
     *
     * @return int[]|null
     */
    public function getAFkiUserIDSigned()
    {
        return $this->container['aFkiUserIDSigned'];
    }

    /**
     * Sets aFkiUserIDSigned
     *
     * @param int[]|null $aFkiUserIDSigned aFkiUserIDSigned
     *
     * @return self
     */
    public function setAFkiUserIDSigned($aFkiUserIDSigned)
    {

        //if (is_null($aFkiUserIDSigned)) {
            //throw new \InvalidArgumentException('non-nullable aFkiUserIDSigned cannot be null');
        //}
        $this->container['aFkiUserIDSigned'] = (is_null($aFkiUserIDSigned) ? null : $aFkiUserIDSigned);

        return $this;
    }

    /**
     * Gets aFkiUserIDSummary
     *
     * @return int[]|null
     */
    public function getAFkiUserIDSummary()
    {
        return $this->container['aFkiUserIDSummary'];
    }

    /**
     * Sets aFkiUserIDSummary
     *
     * @param int[]|null $aFkiUserIDSummary aFkiUserIDSummary
     *
     * @return self
     */
    public function setAFkiUserIDSummary($aFkiUserIDSummary)
    {

        //if (is_null($aFkiUserIDSummary)) {
            //throw new \InvalidArgumentException('non-nullable aFkiUserIDSummary cannot be null');
        //}
        $this->container['aFkiUserIDSummary'] = (is_null($aFkiUserIDSummary) ? null : $aFkiUserIDSummary);

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


