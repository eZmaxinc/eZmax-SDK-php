<?php
/**
 * ObjectEzsignfoldersignerassociationApi
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use eZmaxAPI\ApiException;
use eZmaxAPI\Configuration;
use eZmaxAPI\HeaderSelector;
use eZmaxAPI\ObjectSerializer;
use eZmaxAPI\RequestSignature;

/**
 * ObjectEzsignfoldersignerassociationApi Class Doc Comment
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ObjectEzsignfoldersignerassociationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'ezsignfoldersignerassociationCreateEmbeddedUrlV1' => [
            'application/json',
        ],
        'ezsignfoldersignerassociationCreateObjectV1' => [
            'application/json',
        ],
        'ezsignfoldersignerassociationCreateObjectV2' => [
            'application/json',
        ],
        'ezsignfoldersignerassociationDeleteObjectV1' => [
            'application/json',
        ],
        'ezsignfoldersignerassociationEditObjectV1' => [
            'application/json',
        ],
        'ezsignfoldersignerassociationForceDisconnectV1' => [
            'application/json',
        ],
        'ezsignfoldersignerassociationGetInPersonLoginUrlV1' => [
            'application/json',
        ],
        'ezsignfoldersignerassociationGetObjectV1' => [
            'application/json',
        ],
        'ezsignfoldersignerassociationGetObjectV2' => [
            'application/json',
        ],
        'ezsignfoldersignerassociationPatchObjectV1' => [
            'application/json',
        ],
        'ezsignfoldersignerassociationReassignV1' => [
            'application/json',
        ],
    ];

    /** @var array[] $objEzmaxConfig **/
    public const objEzmaxConfig = [
        'ezsignfoldersignerassociationCreateEmbeddedUrlV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsignfoldersignerassociationCreateObjectV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => true,
        ],
        'ezsignfoldersignerassociationCreateObjectV2' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsignfoldersignerassociationDeleteObjectV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsignfoldersignerassociationEditObjectV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsignfoldersignerassociationForceDisconnectV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsignfoldersignerassociationGetInPersonLoginUrlV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsignfoldersignerassociationGetObjectV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => true,
        ],
        'ezsignfoldersignerassociationGetObjectV2' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsignfoldersignerassociationPatchObjectV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsignfoldersignerassociationReassignV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
    ];
/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation ezsignfoldersignerassociationCreateEmbeddedUrlV1
     *
     * Creates an Url to allow embedded signing
     *
     * @param  int $pkiEzsignfoldersignerassociationID pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationCreateEmbeddedUrlV1Request $ezsignfoldersignerassociationCreateEmbeddedUrlV1Request ezsignfoldersignerassociationCreateEmbeddedUrlV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationCreateEmbeddedUrlV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignfoldersignerassociationCreateEmbeddedUrlV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsignfoldersignerassociationCreateEmbeddedUrlV1($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationCreateEmbeddedUrlV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationCreateEmbeddedUrlV1'][0])
    {
        list($response) = $this->ezsignfoldersignerassociationCreateEmbeddedUrlV1WithHttpInfo($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationCreateEmbeddedUrlV1Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsignfoldersignerassociationCreateEmbeddedUrlV1WithHttpInfo
     *
     * Creates an Url to allow embedded signing
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationCreateEmbeddedUrlV1Request $ezsignfoldersignerassociationCreateEmbeddedUrlV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationCreateEmbeddedUrlV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignfoldersignerassociationCreateEmbeddedUrlV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsignfoldersignerassociationCreateEmbeddedUrlV1WithHttpInfo($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationCreateEmbeddedUrlV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationCreateEmbeddedUrlV1'][0])
    {
        $request = $this->ezsignfoldersignerassociationCreateEmbeddedUrlV1Request($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationCreateEmbeddedUrlV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsignfoldersignerassociationCreateEmbeddedUrlV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignfoldersignerassociationCreateEmbeddedUrlV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignfoldersignerassociationCreateEmbeddedUrlV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationCreateEmbeddedUrlV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignfoldersignerassociationCreateEmbeddedUrlV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignfoldersignerassociationCreateEmbeddedUrlV1Async
     *
     * Creates an Url to allow embedded signing
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationCreateEmbeddedUrlV1Request $ezsignfoldersignerassociationCreateEmbeddedUrlV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationCreateEmbeddedUrlV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationCreateEmbeddedUrlV1Async($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationCreateEmbeddedUrlV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationCreateEmbeddedUrlV1'][0])
    {
        return $this->ezsignfoldersignerassociationCreateEmbeddedUrlV1AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationCreateEmbeddedUrlV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignfoldersignerassociationCreateEmbeddedUrlV1AsyncWithHttpInfo
     *
     * Creates an Url to allow embedded signing
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationCreateEmbeddedUrlV1Request $ezsignfoldersignerassociationCreateEmbeddedUrlV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationCreateEmbeddedUrlV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationCreateEmbeddedUrlV1AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationCreateEmbeddedUrlV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationCreateEmbeddedUrlV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationCreateEmbeddedUrlV1Response';
        $request = $this->ezsignfoldersignerassociationCreateEmbeddedUrlV1Request($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationCreateEmbeddedUrlV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignfoldersignerassociationCreateEmbeddedUrlV1'
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationCreateEmbeddedUrlV1Request $ezsignfoldersignerassociationCreateEmbeddedUrlV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationCreateEmbeddedUrlV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsignfoldersignerassociationCreateEmbeddedUrlV1Request($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationCreateEmbeddedUrlV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationCreateEmbeddedUrlV1'][0])
    {

        // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
        if ($pkiEzsignfoldersignerassociationID === null || (is_array($pkiEzsignfoldersignerassociationID) && count($pkiEzsignfoldersignerassociationID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsignfoldersignerassociationID when calling ezsignfoldersignerassociationCreateEmbeddedUrlV1'
            );
        }
        if ($pkiEzsignfoldersignerassociationID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationCreateEmbeddedUrlV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsignfoldersignerassociationID)?'null':'"'.$pkiEzsignfoldersignerassociationID.'"').' for "pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationCreateEmbeddedUrlV1, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'ezsignfoldersignerassociationCreateEmbeddedUrlV1Request' is set
        if ($ezsignfoldersignerassociationCreateEmbeddedUrlV1Request === null || (is_array($ezsignfoldersignerassociationCreateEmbeddedUrlV1Request) && count($ezsignfoldersignerassociationCreateEmbeddedUrlV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsignfoldersignerassociationCreateEmbeddedUrlV1Request when calling ezsignfoldersignerassociationCreateEmbeddedUrlV1'
            );
        }


        $resourcePath = '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/createEmbeddedUrl';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsignfoldersignerassociationID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsignfoldersignerassociationID' . '}',
                ObjectSerializer::toPathValue($pkiEzsignfoldersignerassociationID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsignfoldersignerassociationCreateEmbeddedUrlV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsignfoldersignerassociationCreateEmbeddedUrlV1Request));
            } else {
                $httpBody = $ezsignfoldersignerassociationCreateEmbeddedUrlV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'POST', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignfoldersignerassociationCreateObjectV1
     *
     * Create a new Ezsignfoldersignerassociation
     *
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV1Request[] $ezsignfoldersignerassociationCreateObjectV1Request ezsignfoldersignerassociationCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV1Response
     * @deprecated
     */
    public function ezsignfoldersignerassociationCreateObjectV1($ezsignfoldersignerassociationCreateObjectV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationCreateObjectV1'][0])
    {
        list($response) = $this->ezsignfoldersignerassociationCreateObjectV1WithHttpInfo($ezsignfoldersignerassociationCreateObjectV1Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsignfoldersignerassociationCreateObjectV1WithHttpInfo
     *
     * Create a new Ezsignfoldersignerassociation
     *
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV1Request[] $ezsignfoldersignerassociationCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV1Response, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function ezsignfoldersignerassociationCreateObjectV1WithHttpInfo($ezsignfoldersignerassociationCreateObjectV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationCreateObjectV1'][0])
    {
        $request = $this->ezsignfoldersignerassociationCreateObjectV1Request($ezsignfoldersignerassociationCreateObjectV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignfoldersignerassociationCreateObjectV1Async
     *
     * Create a new Ezsignfoldersignerassociation
     *
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV1Request[] $ezsignfoldersignerassociationCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function ezsignfoldersignerassociationCreateObjectV1Async($ezsignfoldersignerassociationCreateObjectV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationCreateObjectV1'][0])
    {
        return $this->ezsignfoldersignerassociationCreateObjectV1AsyncWithHttpInfo($ezsignfoldersignerassociationCreateObjectV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignfoldersignerassociationCreateObjectV1AsyncWithHttpInfo
     *
     * Create a new Ezsignfoldersignerassociation
     *
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV1Request[] $ezsignfoldersignerassociationCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function ezsignfoldersignerassociationCreateObjectV1AsyncWithHttpInfo($ezsignfoldersignerassociationCreateObjectV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationCreateObjectV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV1Response';
        $request = $this->ezsignfoldersignerassociationCreateObjectV1Request($ezsignfoldersignerassociationCreateObjectV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignfoldersignerassociationCreateObjectV1'
     *
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV1Request[] $ezsignfoldersignerassociationCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function ezsignfoldersignerassociationCreateObjectV1Request($ezsignfoldersignerassociationCreateObjectV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationCreateObjectV1'][0])
    {

        // verify the required parameter 'ezsignfoldersignerassociationCreateObjectV1Request' is set
        if ($ezsignfoldersignerassociationCreateObjectV1Request === null || (is_array($ezsignfoldersignerassociationCreateObjectV1Request) && count($ezsignfoldersignerassociationCreateObjectV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsignfoldersignerassociationCreateObjectV1Request when calling ezsignfoldersignerassociationCreateObjectV1'
            );
        }


        $resourcePath = '/1/object/ezsignfoldersignerassociation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsignfoldersignerassociationCreateObjectV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsignfoldersignerassociationCreateObjectV1Request));
            } else {
                $httpBody = $ezsignfoldersignerassociationCreateObjectV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'POST', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignfoldersignerassociationCreateObjectV2
     *
     * Create a new Ezsignfoldersignerassociation
     *
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV2Request $ezsignfoldersignerassociationCreateObjectV2Request ezsignfoldersignerassociationCreateObjectV2Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationCreateObjectV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV2Response
     */
    public function ezsignfoldersignerassociationCreateObjectV2($ezsignfoldersignerassociationCreateObjectV2Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationCreateObjectV2'][0])
    {
        list($response) = $this->ezsignfoldersignerassociationCreateObjectV2WithHttpInfo($ezsignfoldersignerassociationCreateObjectV2Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsignfoldersignerassociationCreateObjectV2WithHttpInfo
     *
     * Create a new Ezsignfoldersignerassociation
     *
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV2Request $ezsignfoldersignerassociationCreateObjectV2Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationCreateObjectV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV2Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsignfoldersignerassociationCreateObjectV2WithHttpInfo($ezsignfoldersignerassociationCreateObjectV2Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationCreateObjectV2'][0])
    {
        $request = $this->ezsignfoldersignerassociationCreateObjectV2Request($ezsignfoldersignerassociationCreateObjectV2Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV2Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV2Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV2Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV2Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV2Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignfoldersignerassociationCreateObjectV2Async
     *
     * Create a new Ezsignfoldersignerassociation
     *
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV2Request $ezsignfoldersignerassociationCreateObjectV2Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationCreateObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationCreateObjectV2Async($ezsignfoldersignerassociationCreateObjectV2Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationCreateObjectV2'][0])
    {
        return $this->ezsignfoldersignerassociationCreateObjectV2AsyncWithHttpInfo($ezsignfoldersignerassociationCreateObjectV2Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignfoldersignerassociationCreateObjectV2AsyncWithHttpInfo
     *
     * Create a new Ezsignfoldersignerassociation
     *
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV2Request $ezsignfoldersignerassociationCreateObjectV2Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationCreateObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationCreateObjectV2AsyncWithHttpInfo($ezsignfoldersignerassociationCreateObjectV2Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationCreateObjectV2'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV2Response';
        $request = $this->ezsignfoldersignerassociationCreateObjectV2Request($ezsignfoldersignerassociationCreateObjectV2Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignfoldersignerassociationCreateObjectV2'
     *
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationCreateObjectV2Request $ezsignfoldersignerassociationCreateObjectV2Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationCreateObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsignfoldersignerassociationCreateObjectV2Request($ezsignfoldersignerassociationCreateObjectV2Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationCreateObjectV2'][0])
    {

        // verify the required parameter 'ezsignfoldersignerassociationCreateObjectV2Request' is set
        if ($ezsignfoldersignerassociationCreateObjectV2Request === null || (is_array($ezsignfoldersignerassociationCreateObjectV2Request) && count($ezsignfoldersignerassociationCreateObjectV2Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsignfoldersignerassociationCreateObjectV2Request when calling ezsignfoldersignerassociationCreateObjectV2'
            );
        }


        $resourcePath = '/2/object/ezsignfoldersignerassociation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsignfoldersignerassociationCreateObjectV2Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsignfoldersignerassociationCreateObjectV2Request));
            } else {
                $httpBody = $ezsignfoldersignerassociationCreateObjectV2Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'POST', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignfoldersignerassociationDeleteObjectV1
     *
     * Delete an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationDeleteObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignfoldersignerassociationDeleteObjectV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsignfoldersignerassociationDeleteObjectV1($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationDeleteObjectV1'][0])
    {
        list($response) = $this->ezsignfoldersignerassociationDeleteObjectV1WithHttpInfo($pkiEzsignfoldersignerassociationID, $contentType);
        return $response;
    }

    /**
     * Operation ezsignfoldersignerassociationDeleteObjectV1WithHttpInfo
     *
     * Delete an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationDeleteObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignfoldersignerassociationDeleteObjectV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsignfoldersignerassociationDeleteObjectV1WithHttpInfo($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationDeleteObjectV1'][0])
    {
        $request = $this->ezsignfoldersignerassociationDeleteObjectV1Request($pkiEzsignfoldersignerassociationID, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsignfoldersignerassociationDeleteObjectV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignfoldersignerassociationDeleteObjectV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignfoldersignerassociationDeleteObjectV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationDeleteObjectV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignfoldersignerassociationDeleteObjectV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignfoldersignerassociationDeleteObjectV1Async
     *
     * Delete an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationDeleteObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationDeleteObjectV1Async($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationDeleteObjectV1'][0])
    {
        return $this->ezsignfoldersignerassociationDeleteObjectV1AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignfoldersignerassociationDeleteObjectV1AsyncWithHttpInfo
     *
     * Delete an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationDeleteObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationDeleteObjectV1AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationDeleteObjectV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationDeleteObjectV1Response';
        $request = $this->ezsignfoldersignerassociationDeleteObjectV1Request($pkiEzsignfoldersignerassociationID, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignfoldersignerassociationDeleteObjectV1'
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationDeleteObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsignfoldersignerassociationDeleteObjectV1Request($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationDeleteObjectV1'][0])
    {

        // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
        if ($pkiEzsignfoldersignerassociationID === null || (is_array($pkiEzsignfoldersignerassociationID) && count($pkiEzsignfoldersignerassociationID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsignfoldersignerassociationID when calling ezsignfoldersignerassociationDeleteObjectV1'
            );
        }
        if ($pkiEzsignfoldersignerassociationID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationDeleteObjectV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsignfoldersignerassociationID)?'null':'"'.$pkiEzsignfoldersignerassociationID.'"').' for "pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationDeleteObjectV1, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsignfoldersignerassociationID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsignfoldersignerassociationID' . '}',
                ObjectSerializer::toPathValue($pkiEzsignfoldersignerassociationID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'DELETE', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignfoldersignerassociationEditObjectV1
     *
     * Edit an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationEditObjectV1Request $ezsignfoldersignerassociationEditObjectV1Request ezsignfoldersignerassociationEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationEditObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignfoldersignerassociationEditObjectV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsignfoldersignerassociationEditObjectV1($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationEditObjectV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationEditObjectV1'][0])
    {
        list($response) = $this->ezsignfoldersignerassociationEditObjectV1WithHttpInfo($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationEditObjectV1Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsignfoldersignerassociationEditObjectV1WithHttpInfo
     *
     * Edit an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationEditObjectV1Request $ezsignfoldersignerassociationEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationEditObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignfoldersignerassociationEditObjectV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsignfoldersignerassociationEditObjectV1WithHttpInfo($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationEditObjectV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationEditObjectV1'][0])
    {
        $request = $this->ezsignfoldersignerassociationEditObjectV1Request($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationEditObjectV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsignfoldersignerassociationEditObjectV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignfoldersignerassociationEditObjectV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignfoldersignerassociationEditObjectV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationEditObjectV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignfoldersignerassociationEditObjectV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignfoldersignerassociationEditObjectV1Async
     *
     * Edit an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationEditObjectV1Request $ezsignfoldersignerassociationEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationEditObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationEditObjectV1Async($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationEditObjectV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationEditObjectV1'][0])
    {
        return $this->ezsignfoldersignerassociationEditObjectV1AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationEditObjectV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignfoldersignerassociationEditObjectV1AsyncWithHttpInfo
     *
     * Edit an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationEditObjectV1Request $ezsignfoldersignerassociationEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationEditObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationEditObjectV1AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationEditObjectV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationEditObjectV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationEditObjectV1Response';
        $request = $this->ezsignfoldersignerassociationEditObjectV1Request($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationEditObjectV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignfoldersignerassociationEditObjectV1'
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationEditObjectV1Request $ezsignfoldersignerassociationEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationEditObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsignfoldersignerassociationEditObjectV1Request($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationEditObjectV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationEditObjectV1'][0])
    {

        // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
        if ($pkiEzsignfoldersignerassociationID === null || (is_array($pkiEzsignfoldersignerassociationID) && count($pkiEzsignfoldersignerassociationID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsignfoldersignerassociationID when calling ezsignfoldersignerassociationEditObjectV1'
            );
        }
        if ($pkiEzsignfoldersignerassociationID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationEditObjectV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsignfoldersignerassociationID)?'null':'"'.$pkiEzsignfoldersignerassociationID.'"').' for "pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationEditObjectV1, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'ezsignfoldersignerassociationEditObjectV1Request' is set
        if ($ezsignfoldersignerassociationEditObjectV1Request === null || (is_array($ezsignfoldersignerassociationEditObjectV1Request) && count($ezsignfoldersignerassociationEditObjectV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsignfoldersignerassociationEditObjectV1Request when calling ezsignfoldersignerassociationEditObjectV1'
            );
        }


        $resourcePath = '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsignfoldersignerassociationID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsignfoldersignerassociationID' . '}',
                ObjectSerializer::toPathValue($pkiEzsignfoldersignerassociationID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsignfoldersignerassociationEditObjectV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsignfoldersignerassociationEditObjectV1Request));
            } else {
                $httpBody = $ezsignfoldersignerassociationEditObjectV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'PUT', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignfoldersignerassociationForceDisconnectV1
     *
     * Disconnects the Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID pkiEzsignfoldersignerassociationID (required)
     * @param  object $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationForceDisconnectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignfoldersignerassociationForceDisconnectV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsignfoldersignerassociationForceDisconnectV1($pkiEzsignfoldersignerassociationID, $body, string $contentType = self::contentTypes['ezsignfoldersignerassociationForceDisconnectV1'][0])
    {
        list($response) = $this->ezsignfoldersignerassociationForceDisconnectV1WithHttpInfo($pkiEzsignfoldersignerassociationID, $body, $contentType);
        return $response;
    }

    /**
     * Operation ezsignfoldersignerassociationForceDisconnectV1WithHttpInfo
     *
     * Disconnects the Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationForceDisconnectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignfoldersignerassociationForceDisconnectV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsignfoldersignerassociationForceDisconnectV1WithHttpInfo($pkiEzsignfoldersignerassociationID, $body, string $contentType = self::contentTypes['ezsignfoldersignerassociationForceDisconnectV1'][0])
    {
        $request = $this->ezsignfoldersignerassociationForceDisconnectV1Request($pkiEzsignfoldersignerassociationID, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsignfoldersignerassociationForceDisconnectV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignfoldersignerassociationForceDisconnectV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignfoldersignerassociationForceDisconnectV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationForceDisconnectV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignfoldersignerassociationForceDisconnectV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignfoldersignerassociationForceDisconnectV1Async
     *
     * Disconnects the Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationForceDisconnectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationForceDisconnectV1Async($pkiEzsignfoldersignerassociationID, $body, string $contentType = self::contentTypes['ezsignfoldersignerassociationForceDisconnectV1'][0])
    {
        return $this->ezsignfoldersignerassociationForceDisconnectV1AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignfoldersignerassociationForceDisconnectV1AsyncWithHttpInfo
     *
     * Disconnects the Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationForceDisconnectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationForceDisconnectV1AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, $body, string $contentType = self::contentTypes['ezsignfoldersignerassociationForceDisconnectV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationForceDisconnectV1Response';
        $request = $this->ezsignfoldersignerassociationForceDisconnectV1Request($pkiEzsignfoldersignerassociationID, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignfoldersignerassociationForceDisconnectV1'
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationForceDisconnectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsignfoldersignerassociationForceDisconnectV1Request($pkiEzsignfoldersignerassociationID, $body, string $contentType = self::contentTypes['ezsignfoldersignerassociationForceDisconnectV1'][0])
    {

        // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
        if ($pkiEzsignfoldersignerassociationID === null || (is_array($pkiEzsignfoldersignerassociationID) && count($pkiEzsignfoldersignerassociationID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsignfoldersignerassociationID when calling ezsignfoldersignerassociationForceDisconnectV1'
            );
        }
        if ($pkiEzsignfoldersignerassociationID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationForceDisconnectV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsignfoldersignerassociationID)?'null':'"'.$pkiEzsignfoldersignerassociationID.'"').' for "pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationForceDisconnectV1, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling ezsignfoldersignerassociationForceDisconnectV1'
            );
        }


        $resourcePath = '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/forceDisconnect';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsignfoldersignerassociationID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsignfoldersignerassociationID' . '}',
                ObjectSerializer::toPathValue($pkiEzsignfoldersignerassociationID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'POST', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignfoldersignerassociationGetInPersonLoginUrlV1
     *
     * Retrieve a Login Url to allow In-Person signing
     *
     * @param  int $pkiEzsignfoldersignerassociationID pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationGetInPersonLoginUrlV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignfoldersignerassociationGetInPersonLoginUrlV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsignfoldersignerassociationGetInPersonLoginUrlV1($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationGetInPersonLoginUrlV1'][0])
    {
        list($response) = $this->ezsignfoldersignerassociationGetInPersonLoginUrlV1WithHttpInfo($pkiEzsignfoldersignerassociationID, $contentType);
        return $response;
    }

    /**
     * Operation ezsignfoldersignerassociationGetInPersonLoginUrlV1WithHttpInfo
     *
     * Retrieve a Login Url to allow In-Person signing
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationGetInPersonLoginUrlV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignfoldersignerassociationGetInPersonLoginUrlV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsignfoldersignerassociationGetInPersonLoginUrlV1WithHttpInfo($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationGetInPersonLoginUrlV1'][0])
    {
        $request = $this->ezsignfoldersignerassociationGetInPersonLoginUrlV1Request($pkiEzsignfoldersignerassociationID, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsignfoldersignerassociationGetInPersonLoginUrlV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignfoldersignerassociationGetInPersonLoginUrlV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignfoldersignerassociationGetInPersonLoginUrlV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationGetInPersonLoginUrlV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignfoldersignerassociationGetInPersonLoginUrlV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignfoldersignerassociationGetInPersonLoginUrlV1Async
     *
     * Retrieve a Login Url to allow In-Person signing
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationGetInPersonLoginUrlV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationGetInPersonLoginUrlV1Async($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationGetInPersonLoginUrlV1'][0])
    {
        return $this->ezsignfoldersignerassociationGetInPersonLoginUrlV1AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignfoldersignerassociationGetInPersonLoginUrlV1AsyncWithHttpInfo
     *
     * Retrieve a Login Url to allow In-Person signing
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationGetInPersonLoginUrlV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationGetInPersonLoginUrlV1AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationGetInPersonLoginUrlV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationGetInPersonLoginUrlV1Response';
        $request = $this->ezsignfoldersignerassociationGetInPersonLoginUrlV1Request($pkiEzsignfoldersignerassociationID, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignfoldersignerassociationGetInPersonLoginUrlV1'
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationGetInPersonLoginUrlV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsignfoldersignerassociationGetInPersonLoginUrlV1Request($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationGetInPersonLoginUrlV1'][0])
    {

        // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
        if ($pkiEzsignfoldersignerassociationID === null || (is_array($pkiEzsignfoldersignerassociationID) && count($pkiEzsignfoldersignerassociationID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsignfoldersignerassociationID when calling ezsignfoldersignerassociationGetInPersonLoginUrlV1'
            );
        }
        if ($pkiEzsignfoldersignerassociationID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationGetInPersonLoginUrlV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsignfoldersignerassociationID)?'null':'"'.$pkiEzsignfoldersignerassociationID.'"').' for "pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationGetInPersonLoginUrlV1, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/getInPersonLoginUrl';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsignfoldersignerassociationID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsignfoldersignerassociationID' . '}',
                ObjectSerializer::toPathValue($pkiEzsignfoldersignerassociationID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignfoldersignerassociationGetObjectV1
     *
     * Retrieve an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationGetObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignfoldersignerassociationGetObjectV1Response|\eZmaxAPI\Model\CommonResponseError
     * @deprecated
     */
    public function ezsignfoldersignerassociationGetObjectV1($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationGetObjectV1'][0])
    {
        list($response) = $this->ezsignfoldersignerassociationGetObjectV1WithHttpInfo($pkiEzsignfoldersignerassociationID, $contentType);
        return $response;
    }

    /**
     * Operation ezsignfoldersignerassociationGetObjectV1WithHttpInfo
     *
     * Retrieve an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationGetObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignfoldersignerassociationGetObjectV1Response|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function ezsignfoldersignerassociationGetObjectV1WithHttpInfo($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationGetObjectV1'][0])
    {
        $request = $this->ezsignfoldersignerassociationGetObjectV1Request($pkiEzsignfoldersignerassociationID, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsignfoldersignerassociationGetObjectV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignfoldersignerassociationGetObjectV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignfoldersignerassociationGetObjectV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationGetObjectV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignfoldersignerassociationGetObjectV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignfoldersignerassociationGetObjectV1Async
     *
     * Retrieve an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationGetObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function ezsignfoldersignerassociationGetObjectV1Async($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationGetObjectV1'][0])
    {
        return $this->ezsignfoldersignerassociationGetObjectV1AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignfoldersignerassociationGetObjectV1AsyncWithHttpInfo
     *
     * Retrieve an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationGetObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function ezsignfoldersignerassociationGetObjectV1AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationGetObjectV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationGetObjectV1Response';
        $request = $this->ezsignfoldersignerassociationGetObjectV1Request($pkiEzsignfoldersignerassociationID, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignfoldersignerassociationGetObjectV1'
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationGetObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function ezsignfoldersignerassociationGetObjectV1Request($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationGetObjectV1'][0])
    {

        // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
        if ($pkiEzsignfoldersignerassociationID === null || (is_array($pkiEzsignfoldersignerassociationID) && count($pkiEzsignfoldersignerassociationID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsignfoldersignerassociationID when calling ezsignfoldersignerassociationGetObjectV1'
            );
        }
        if ($pkiEzsignfoldersignerassociationID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationGetObjectV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsignfoldersignerassociationID)?'null':'"'.$pkiEzsignfoldersignerassociationID.'"').' for "pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationGetObjectV1, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsignfoldersignerassociationID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsignfoldersignerassociationID' . '}',
                ObjectSerializer::toPathValue($pkiEzsignfoldersignerassociationID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignfoldersignerassociationGetObjectV2
     *
     * Retrieve an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationGetObjectV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignfoldersignerassociationGetObjectV2Response|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsignfoldersignerassociationGetObjectV2($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationGetObjectV2'][0])
    {
        list($response) = $this->ezsignfoldersignerassociationGetObjectV2WithHttpInfo($pkiEzsignfoldersignerassociationID, $contentType);
        return $response;
    }

    /**
     * Operation ezsignfoldersignerassociationGetObjectV2WithHttpInfo
     *
     * Retrieve an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationGetObjectV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignfoldersignerassociationGetObjectV2Response|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsignfoldersignerassociationGetObjectV2WithHttpInfo($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationGetObjectV2'][0])
    {
        $request = $this->ezsignfoldersignerassociationGetObjectV2Request($pkiEzsignfoldersignerassociationID, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsignfoldersignerassociationGetObjectV2Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignfoldersignerassociationGetObjectV2Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignfoldersignerassociationGetObjectV2Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationGetObjectV2Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignfoldersignerassociationGetObjectV2Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignfoldersignerassociationGetObjectV2Async
     *
     * Retrieve an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationGetObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationGetObjectV2Async($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationGetObjectV2'][0])
    {
        return $this->ezsignfoldersignerassociationGetObjectV2AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignfoldersignerassociationGetObjectV2AsyncWithHttpInfo
     *
     * Retrieve an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationGetObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationGetObjectV2AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationGetObjectV2'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationGetObjectV2Response';
        $request = $this->ezsignfoldersignerassociationGetObjectV2Request($pkiEzsignfoldersignerassociationID, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignfoldersignerassociationGetObjectV2'
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationGetObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsignfoldersignerassociationGetObjectV2Request($pkiEzsignfoldersignerassociationID, string $contentType = self::contentTypes['ezsignfoldersignerassociationGetObjectV2'][0])
    {

        // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
        if ($pkiEzsignfoldersignerassociationID === null || (is_array($pkiEzsignfoldersignerassociationID) && count($pkiEzsignfoldersignerassociationID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsignfoldersignerassociationID when calling ezsignfoldersignerassociationGetObjectV2'
            );
        }
        if ($pkiEzsignfoldersignerassociationID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationGetObjectV2, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsignfoldersignerassociationID)?'null':'"'.$pkiEzsignfoldersignerassociationID.'"').' for "pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationGetObjectV2, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/2/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsignfoldersignerassociationID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsignfoldersignerassociationID' . '}',
                ObjectSerializer::toPathValue($pkiEzsignfoldersignerassociationID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignfoldersignerassociationPatchObjectV1
     *
     * Patch an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationPatchObjectV1Request $ezsignfoldersignerassociationPatchObjectV1Request ezsignfoldersignerassociationPatchObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationPatchObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignfoldersignerassociationPatchObjectV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsignfoldersignerassociationPatchObjectV1($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationPatchObjectV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationPatchObjectV1'][0])
    {
        list($response) = $this->ezsignfoldersignerassociationPatchObjectV1WithHttpInfo($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationPatchObjectV1Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsignfoldersignerassociationPatchObjectV1WithHttpInfo
     *
     * Patch an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationPatchObjectV1Request $ezsignfoldersignerassociationPatchObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationPatchObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignfoldersignerassociationPatchObjectV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsignfoldersignerassociationPatchObjectV1WithHttpInfo($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationPatchObjectV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationPatchObjectV1'][0])
    {
        $request = $this->ezsignfoldersignerassociationPatchObjectV1Request($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationPatchObjectV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsignfoldersignerassociationPatchObjectV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignfoldersignerassociationPatchObjectV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignfoldersignerassociationPatchObjectV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationPatchObjectV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignfoldersignerassociationPatchObjectV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignfoldersignerassociationPatchObjectV1Async
     *
     * Patch an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationPatchObjectV1Request $ezsignfoldersignerassociationPatchObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationPatchObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationPatchObjectV1Async($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationPatchObjectV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationPatchObjectV1'][0])
    {
        return $this->ezsignfoldersignerassociationPatchObjectV1AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationPatchObjectV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignfoldersignerassociationPatchObjectV1AsyncWithHttpInfo
     *
     * Patch an existing Ezsignfoldersignerassociation
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationPatchObjectV1Request $ezsignfoldersignerassociationPatchObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationPatchObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationPatchObjectV1AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationPatchObjectV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationPatchObjectV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationPatchObjectV1Response';
        $request = $this->ezsignfoldersignerassociationPatchObjectV1Request($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationPatchObjectV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignfoldersignerassociationPatchObjectV1'
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationPatchObjectV1Request $ezsignfoldersignerassociationPatchObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationPatchObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsignfoldersignerassociationPatchObjectV1Request($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationPatchObjectV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationPatchObjectV1'][0])
    {

        // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
        if ($pkiEzsignfoldersignerassociationID === null || (is_array($pkiEzsignfoldersignerassociationID) && count($pkiEzsignfoldersignerassociationID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsignfoldersignerassociationID when calling ezsignfoldersignerassociationPatchObjectV1'
            );
        }
        if ($pkiEzsignfoldersignerassociationID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationPatchObjectV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsignfoldersignerassociationID)?'null':'"'.$pkiEzsignfoldersignerassociationID.'"').' for "pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationPatchObjectV1, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'ezsignfoldersignerassociationPatchObjectV1Request' is set
        if ($ezsignfoldersignerassociationPatchObjectV1Request === null || (is_array($ezsignfoldersignerassociationPatchObjectV1Request) && count($ezsignfoldersignerassociationPatchObjectV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsignfoldersignerassociationPatchObjectV1Request when calling ezsignfoldersignerassociationPatchObjectV1'
            );
        }


        $resourcePath = '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsignfoldersignerassociationID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsignfoldersignerassociationID' . '}',
                ObjectSerializer::toPathValue($pkiEzsignfoldersignerassociationID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsignfoldersignerassociationPatchObjectV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsignfoldersignerassociationPatchObjectV1Request));
            } else {
                $httpBody = $ezsignfoldersignerassociationPatchObjectV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'PATCH', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignfoldersignerassociationReassignV1
     *
     * Reassign remaining unsigned signatures and forms
     *
     * @param  int $pkiEzsignfoldersignerassociationID pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationReassignV1Request $ezsignfoldersignerassociationReassignV1Request ezsignfoldersignerassociationReassignV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationReassignV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignfoldersignerassociationReassignV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsignfoldersignerassociationReassignV1($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationReassignV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationReassignV1'][0])
    {
        list($response) = $this->ezsignfoldersignerassociationReassignV1WithHttpInfo($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationReassignV1Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsignfoldersignerassociationReassignV1WithHttpInfo
     *
     * Reassign remaining unsigned signatures and forms
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationReassignV1Request $ezsignfoldersignerassociationReassignV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationReassignV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignfoldersignerassociationReassignV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsignfoldersignerassociationReassignV1WithHttpInfo($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationReassignV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationReassignV1'][0])
    {
        $request = $this->ezsignfoldersignerassociationReassignV1Request($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationReassignV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsignfoldersignerassociationReassignV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignfoldersignerassociationReassignV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignfoldersignerassociationReassignV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationReassignV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignfoldersignerassociationReassignV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignfoldersignerassociationReassignV1Async
     *
     * Reassign remaining unsigned signatures and forms
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationReassignV1Request $ezsignfoldersignerassociationReassignV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationReassignV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationReassignV1Async($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationReassignV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationReassignV1'][0])
    {
        return $this->ezsignfoldersignerassociationReassignV1AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationReassignV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignfoldersignerassociationReassignV1AsyncWithHttpInfo
     *
     * Reassign remaining unsigned signatures and forms
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationReassignV1Request $ezsignfoldersignerassociationReassignV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationReassignV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignfoldersignerassociationReassignV1AsyncWithHttpInfo($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationReassignV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationReassignV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignfoldersignerassociationReassignV1Response';
        $request = $this->ezsignfoldersignerassociationReassignV1Request($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationReassignV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignfoldersignerassociationReassignV1'
     *
     * @param  int $pkiEzsignfoldersignerassociationID (required)
     * @param  \eZmaxAPI\Model\EzsignfoldersignerassociationReassignV1Request $ezsignfoldersignerassociationReassignV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignfoldersignerassociationReassignV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsignfoldersignerassociationReassignV1Request($pkiEzsignfoldersignerassociationID, $ezsignfoldersignerassociationReassignV1Request, string $contentType = self::contentTypes['ezsignfoldersignerassociationReassignV1'][0])
    {

        // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
        if ($pkiEzsignfoldersignerassociationID === null || (is_array($pkiEzsignfoldersignerassociationID) && count($pkiEzsignfoldersignerassociationID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsignfoldersignerassociationID when calling ezsignfoldersignerassociationReassignV1'
            );
        }
        if ($pkiEzsignfoldersignerassociationID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationReassignV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsignfoldersignerassociationID)?'null':'"'.$pkiEzsignfoldersignerassociationID.'"').' for "pkiEzsignfoldersignerassociationID" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociationReassignV1, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'ezsignfoldersignerassociationReassignV1Request' is set
        if ($ezsignfoldersignerassociationReassignV1Request === null || (is_array($ezsignfoldersignerassociationReassignV1Request) && count($ezsignfoldersignerassociationReassignV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsignfoldersignerassociationReassignV1Request when calling ezsignfoldersignerassociationReassignV1'
            );
        }


        $resourcePath = '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/reassign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsignfoldersignerassociationID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsignfoldersignerassociationID' . '}',
                ObjectSerializer::toPathValue($pkiEzsignfoldersignerassociationID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsignfoldersignerassociationReassignV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsignfoldersignerassociationReassignV1Request));
            } else {
                $httpBody = $ezsignfoldersignerassociationReassignV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'POST', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
