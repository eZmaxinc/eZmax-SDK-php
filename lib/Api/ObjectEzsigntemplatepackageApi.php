<?php
/**
 * ObjectEzsigntemplatepackageApi
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use eZmaxAPI\ApiException;
use eZmaxAPI\Configuration;
use eZmaxAPI\HeaderSelector;
use eZmaxAPI\ObjectSerializer;
use eZmaxAPI\RequestSignature;

/**
 * ObjectEzsigntemplatepackageApi Class Doc Comment
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ObjectEzsigntemplatepackageApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'ezsigntemplatepackageCreateObjectV1' => [
            'application/json',
        ],
        'ezsigntemplatepackageDeleteObjectV1' => [
            'application/json',
        ],
        'ezsigntemplatepackageEditEzsigntemplatepackagesignersV1' => [
            'application/json',
        ],
        'ezsigntemplatepackageEditObjectV1' => [
            'application/json',
        ],
        'ezsigntemplatepackageGetAutocompleteV2' => [
            'application/json',
        ],
        'ezsigntemplatepackageGetListV1' => [
            'application/json',
        ],
        'ezsigntemplatepackageGetObjectV2' => [
            'application/json',
        ],
    ];

    /** @var array[] $objEzmaxConfig **/
    public const objEzmaxConfig = [
        'ezsigntemplatepackageCreateObjectV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsigntemplatepackageDeleteObjectV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsigntemplatepackageEditEzsigntemplatepackagesignersV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsigntemplatepackageEditObjectV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsigntemplatepackageGetAutocompleteV2' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsigntemplatepackageGetListV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsigntemplatepackageGetObjectV2' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
    ];
/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation ezsigntemplatepackageCreateObjectV1
     *
     * Create a new Ezsigntemplatepackage
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepackageCreateObjectV1Request $ezsigntemplatepackageCreateObjectV1Request ezsigntemplatepackageCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsigntemplatepackageCreateObjectV1Response
     */
    public function ezsigntemplatepackageCreateObjectV1($ezsigntemplatepackageCreateObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepackageCreateObjectV1'][0])
    {
        list($response) = $this->ezsigntemplatepackageCreateObjectV1WithHttpInfo($ezsigntemplatepackageCreateObjectV1Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsigntemplatepackageCreateObjectV1WithHttpInfo
     *
     * Create a new Ezsigntemplatepackage
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepackageCreateObjectV1Request $ezsigntemplatepackageCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsigntemplatepackageCreateObjectV1Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsigntemplatepackageCreateObjectV1WithHttpInfo($ezsigntemplatepackageCreateObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepackageCreateObjectV1'][0])
    {
        $request = $this->ezsigntemplatepackageCreateObjectV1Request($ezsigntemplatepackageCreateObjectV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\eZmaxAPI\Model\EzsigntemplatepackageCreateObjectV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsigntemplatepackageCreateObjectV1Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsigntemplatepackageCreateObjectV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\eZmaxAPI\Model\EzsigntemplatepackageCreateObjectV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsigntemplatepackageCreateObjectV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsigntemplatepackageCreateObjectV1Async
     *
     * Create a new Ezsigntemplatepackage
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepackageCreateObjectV1Request $ezsigntemplatepackageCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepackageCreateObjectV1Async($ezsigntemplatepackageCreateObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepackageCreateObjectV1'][0])
    {
        return $this->ezsigntemplatepackageCreateObjectV1AsyncWithHttpInfo($ezsigntemplatepackageCreateObjectV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsigntemplatepackageCreateObjectV1AsyncWithHttpInfo
     *
     * Create a new Ezsigntemplatepackage
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepackageCreateObjectV1Request $ezsigntemplatepackageCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepackageCreateObjectV1AsyncWithHttpInfo($ezsigntemplatepackageCreateObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepackageCreateObjectV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsigntemplatepackageCreateObjectV1Response';
        $request = $this->ezsigntemplatepackageCreateObjectV1Request($ezsigntemplatepackageCreateObjectV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsigntemplatepackageCreateObjectV1'
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepackageCreateObjectV1Request $ezsigntemplatepackageCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsigntemplatepackageCreateObjectV1Request($ezsigntemplatepackageCreateObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepackageCreateObjectV1'][0])
    {

        // verify the required parameter 'ezsigntemplatepackageCreateObjectV1Request' is set
        if ($ezsigntemplatepackageCreateObjectV1Request === null || (is_array($ezsigntemplatepackageCreateObjectV1Request) && count($ezsigntemplatepackageCreateObjectV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsigntemplatepackageCreateObjectV1Request when calling ezsigntemplatepackageCreateObjectV1'
            );
        }


        $resourcePath = '/1/object/ezsigntemplatepackage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsigntemplatepackageCreateObjectV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsigntemplatepackageCreateObjectV1Request));
            } else {
                $httpBody = $ezsigntemplatepackageCreateObjectV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'POST', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsigntemplatepackageDeleteObjectV1
     *
     * Delete an existing Ezsigntemplatepackage
     *
     * @param  int $pkiEzsigntemplatepackageID pkiEzsigntemplatepackageID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageDeleteObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsigntemplatepackageDeleteObjectV1Response|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsigntemplatepackageDeleteObjectV1($pkiEzsigntemplatepackageID, string $contentType = self::contentTypes['ezsigntemplatepackageDeleteObjectV1'][0])
    {
        list($response) = $this->ezsigntemplatepackageDeleteObjectV1WithHttpInfo($pkiEzsigntemplatepackageID, $contentType);
        return $response;
    }

    /**
     * Operation ezsigntemplatepackageDeleteObjectV1WithHttpInfo
     *
     * Delete an existing Ezsigntemplatepackage
     *
     * @param  int $pkiEzsigntemplatepackageID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageDeleteObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsigntemplatepackageDeleteObjectV1Response|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsigntemplatepackageDeleteObjectV1WithHttpInfo($pkiEzsigntemplatepackageID, string $contentType = self::contentTypes['ezsigntemplatepackageDeleteObjectV1'][0])
    {
        $request = $this->ezsigntemplatepackageDeleteObjectV1Request($pkiEzsigntemplatepackageID, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsigntemplatepackageDeleteObjectV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsigntemplatepackageDeleteObjectV1Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsigntemplatepackageDeleteObjectV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\eZmaxAPI\Model\EzsigntemplatepackageDeleteObjectV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsigntemplatepackageDeleteObjectV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsigntemplatepackageDeleteObjectV1Async
     *
     * Delete an existing Ezsigntemplatepackage
     *
     * @param  int $pkiEzsigntemplatepackageID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageDeleteObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepackageDeleteObjectV1Async($pkiEzsigntemplatepackageID, string $contentType = self::contentTypes['ezsigntemplatepackageDeleteObjectV1'][0])
    {
        return $this->ezsigntemplatepackageDeleteObjectV1AsyncWithHttpInfo($pkiEzsigntemplatepackageID, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsigntemplatepackageDeleteObjectV1AsyncWithHttpInfo
     *
     * Delete an existing Ezsigntemplatepackage
     *
     * @param  int $pkiEzsigntemplatepackageID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageDeleteObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepackageDeleteObjectV1AsyncWithHttpInfo($pkiEzsigntemplatepackageID, string $contentType = self::contentTypes['ezsigntemplatepackageDeleteObjectV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsigntemplatepackageDeleteObjectV1Response';
        $request = $this->ezsigntemplatepackageDeleteObjectV1Request($pkiEzsigntemplatepackageID, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsigntemplatepackageDeleteObjectV1'
     *
     * @param  int $pkiEzsigntemplatepackageID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageDeleteObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsigntemplatepackageDeleteObjectV1Request($pkiEzsigntemplatepackageID, string $contentType = self::contentTypes['ezsigntemplatepackageDeleteObjectV1'][0])
    {

        // verify the required parameter 'pkiEzsigntemplatepackageID' is set
        if ($pkiEzsigntemplatepackageID === null || (is_array($pkiEzsigntemplatepackageID) && count($pkiEzsigntemplatepackageID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsigntemplatepackageID when calling ezsigntemplatepackageDeleteObjectV1'
            );
        }
        if ($pkiEzsigntemplatepackageID < 0) {
            throw new \InvalidArgumentException('invalid value for "$pkiEzsigntemplatepackageID" when calling ObjectEzsigntemplatepackageApi.ezsigntemplatepackageDeleteObjectV1, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/1/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsigntemplatepackageID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsigntemplatepackageID' . '}',
                ObjectSerializer::toPathValue($pkiEzsigntemplatepackageID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'DELETE', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsigntemplatepackageEditEzsigntemplatepackagesignersV1
     *
     * Edit multiple Ezsigntemplatepackagesigners
     *
     * @param  int $pkiEzsigntemplatepackageID pkiEzsigntemplatepackageID (required)
     * @param  \eZmaxAPI\Model\EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request $ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageEditEzsigntemplatepackagesignersV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsigntemplatepackageEditEzsigntemplatepackagesignersV1($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, string $contentType = self::contentTypes['ezsigntemplatepackageEditEzsigntemplatepackagesignersV1'][0])
    {
        list($response) = $this->ezsigntemplatepackageEditEzsigntemplatepackagesignersV1WithHttpInfo($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsigntemplatepackageEditEzsigntemplatepackagesignersV1WithHttpInfo
     *
     * Edit multiple Ezsigntemplatepackagesigners
     *
     * @param  int $pkiEzsigntemplatepackageID (required)
     * @param  \eZmaxAPI\Model\EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request $ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageEditEzsigntemplatepackagesignersV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsigntemplatepackageEditEzsigntemplatepackagesignersV1WithHttpInfo($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, string $contentType = self::contentTypes['ezsigntemplatepackageEditEzsigntemplatepackagesignersV1'][0])
    {
        $request = $this->ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\eZmaxAPI\Model\EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Async
     *
     * Edit multiple Ezsigntemplatepackagesigners
     *
     * @param  int $pkiEzsigntemplatepackageID (required)
     * @param  \eZmaxAPI\Model\EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request $ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageEditEzsigntemplatepackagesignersV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Async($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, string $contentType = self::contentTypes['ezsigntemplatepackageEditEzsigntemplatepackagesignersV1'][0])
    {
        return $this->ezsigntemplatepackageEditEzsigntemplatepackagesignersV1AsyncWithHttpInfo($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsigntemplatepackageEditEzsigntemplatepackagesignersV1AsyncWithHttpInfo
     *
     * Edit multiple Ezsigntemplatepackagesigners
     *
     * @param  int $pkiEzsigntemplatepackageID (required)
     * @param  \eZmaxAPI\Model\EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request $ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageEditEzsigntemplatepackagesignersV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepackageEditEzsigntemplatepackagesignersV1AsyncWithHttpInfo($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, string $contentType = self::contentTypes['ezsigntemplatepackageEditEzsigntemplatepackagesignersV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response';
        $request = $this->ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsigntemplatepackageEditEzsigntemplatepackagesignersV1'
     *
     * @param  int $pkiEzsigntemplatepackageID (required)
     * @param  \eZmaxAPI\Model\EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request $ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageEditEzsigntemplatepackagesignersV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, string $contentType = self::contentTypes['ezsigntemplatepackageEditEzsigntemplatepackagesignersV1'][0])
    {

        // verify the required parameter 'pkiEzsigntemplatepackageID' is set
        if ($pkiEzsigntemplatepackageID === null || (is_array($pkiEzsigntemplatepackageID) && count($pkiEzsigntemplatepackageID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsigntemplatepackageID when calling ezsigntemplatepackageEditEzsigntemplatepackagesignersV1'
            );
        }
        if ($pkiEzsigntemplatepackageID < 0) {
            throw new \InvalidArgumentException('invalid value for "$pkiEzsigntemplatepackageID" when calling ObjectEzsigntemplatepackageApi.ezsigntemplatepackageEditEzsigntemplatepackagesignersV1, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request' is set
        if ($ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request === null || (is_array($ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request) && count($ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request when calling ezsigntemplatepackageEditEzsigntemplatepackagesignersV1'
            );
        }


        $resourcePath = '/1/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}/editEzsigntemplatepackagesigners';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsigntemplatepackageID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsigntemplatepackageID' . '}',
                ObjectSerializer::toPathValue($pkiEzsigntemplatepackageID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request));
            } else {
                $httpBody = $ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'PUT', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsigntemplatepackageEditObjectV1
     *
     * Edit an existing Ezsigntemplatepackage
     *
     * @param  int $pkiEzsigntemplatepackageID pkiEzsigntemplatepackageID (required)
     * @param  \eZmaxAPI\Model\EzsigntemplatepackageEditObjectV1Request $ezsigntemplatepackageEditObjectV1Request ezsigntemplatepackageEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageEditObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsigntemplatepackageEditObjectV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsigntemplatepackageEditObjectV1($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepackageEditObjectV1'][0])
    {
        list($response) = $this->ezsigntemplatepackageEditObjectV1WithHttpInfo($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditObjectV1Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsigntemplatepackageEditObjectV1WithHttpInfo
     *
     * Edit an existing Ezsigntemplatepackage
     *
     * @param  int $pkiEzsigntemplatepackageID (required)
     * @param  \eZmaxAPI\Model\EzsigntemplatepackageEditObjectV1Request $ezsigntemplatepackageEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageEditObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsigntemplatepackageEditObjectV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsigntemplatepackageEditObjectV1WithHttpInfo($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepackageEditObjectV1'][0])
    {
        $request = $this->ezsigntemplatepackageEditObjectV1Request($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditObjectV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsigntemplatepackageEditObjectV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsigntemplatepackageEditObjectV1Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsigntemplatepackageEditObjectV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\eZmaxAPI\Model\EzsigntemplatepackageEditObjectV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsigntemplatepackageEditObjectV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsigntemplatepackageEditObjectV1Async
     *
     * Edit an existing Ezsigntemplatepackage
     *
     * @param  int $pkiEzsigntemplatepackageID (required)
     * @param  \eZmaxAPI\Model\EzsigntemplatepackageEditObjectV1Request $ezsigntemplatepackageEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageEditObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepackageEditObjectV1Async($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepackageEditObjectV1'][0])
    {
        return $this->ezsigntemplatepackageEditObjectV1AsyncWithHttpInfo($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditObjectV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsigntemplatepackageEditObjectV1AsyncWithHttpInfo
     *
     * Edit an existing Ezsigntemplatepackage
     *
     * @param  int $pkiEzsigntemplatepackageID (required)
     * @param  \eZmaxAPI\Model\EzsigntemplatepackageEditObjectV1Request $ezsigntemplatepackageEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageEditObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepackageEditObjectV1AsyncWithHttpInfo($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepackageEditObjectV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsigntemplatepackageEditObjectV1Response';
        $request = $this->ezsigntemplatepackageEditObjectV1Request($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditObjectV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsigntemplatepackageEditObjectV1'
     *
     * @param  int $pkiEzsigntemplatepackageID (required)
     * @param  \eZmaxAPI\Model\EzsigntemplatepackageEditObjectV1Request $ezsigntemplatepackageEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageEditObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsigntemplatepackageEditObjectV1Request($pkiEzsigntemplatepackageID, $ezsigntemplatepackageEditObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepackageEditObjectV1'][0])
    {

        // verify the required parameter 'pkiEzsigntemplatepackageID' is set
        if ($pkiEzsigntemplatepackageID === null || (is_array($pkiEzsigntemplatepackageID) && count($pkiEzsigntemplatepackageID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsigntemplatepackageID when calling ezsigntemplatepackageEditObjectV1'
            );
        }
        if ($pkiEzsigntemplatepackageID < 0) {
            throw new \InvalidArgumentException('invalid value for "$pkiEzsigntemplatepackageID" when calling ObjectEzsigntemplatepackageApi.ezsigntemplatepackageEditObjectV1, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'ezsigntemplatepackageEditObjectV1Request' is set
        if ($ezsigntemplatepackageEditObjectV1Request === null || (is_array($ezsigntemplatepackageEditObjectV1Request) && count($ezsigntemplatepackageEditObjectV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsigntemplatepackageEditObjectV1Request when calling ezsigntemplatepackageEditObjectV1'
            );
        }


        $resourcePath = '/1/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsigntemplatepackageID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsigntemplatepackageID' . '}',
                ObjectSerializer::toPathValue($pkiEzsigntemplatepackageID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsigntemplatepackageEditObjectV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsigntemplatepackageEditObjectV1Request));
            } else {
                $httpBody = $ezsigntemplatepackageEditObjectV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'PUT', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsigntemplatepackageGetAutocompleteV2
     *
     * Retrieve Ezsigntemplatepackages and IDs
     *
     * @param  string $sSelector The type of Ezsigntemplatepackages to return (required)
     * @param  string $eFilterActive Specify which results we want to display. (optional, default to 'Active')
     * @param  string $sQuery Allow to filter the returned results (optional)
     * @param  HeaderAcceptLanguage $acceptLanguage acceptLanguage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageGetAutocompleteV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsigntemplatepackageGetAutocompleteV2Response
     */
    public function ezsigntemplatepackageGetAutocompleteV2($sSelector, $eFilterActive = 'Active', $sQuery = null, $acceptLanguage = null, string $contentType = self::contentTypes['ezsigntemplatepackageGetAutocompleteV2'][0])
    {
        list($response) = $this->ezsigntemplatepackageGetAutocompleteV2WithHttpInfo($sSelector, $eFilterActive, $sQuery, $acceptLanguage, $contentType);
        return $response;
    }

    /**
     * Operation ezsigntemplatepackageGetAutocompleteV2WithHttpInfo
     *
     * Retrieve Ezsigntemplatepackages and IDs
     *
     * @param  string $sSelector The type of Ezsigntemplatepackages to return (required)
     * @param  string $eFilterActive Specify which results we want to display. (optional, default to 'Active')
     * @param  string $sQuery Allow to filter the returned results (optional)
     * @param  HeaderAcceptLanguage $acceptLanguage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageGetAutocompleteV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsigntemplatepackageGetAutocompleteV2Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsigntemplatepackageGetAutocompleteV2WithHttpInfo($sSelector, $eFilterActive = 'Active', $sQuery = null, $acceptLanguage = null, string $contentType = self::contentTypes['ezsigntemplatepackageGetAutocompleteV2'][0])
    {
        $request = $this->ezsigntemplatepackageGetAutocompleteV2Request($sSelector, $eFilterActive, $sQuery, $acceptLanguage, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsigntemplatepackageGetAutocompleteV2Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsigntemplatepackageGetAutocompleteV2Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsigntemplatepackageGetAutocompleteV2Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\eZmaxAPI\Model\EzsigntemplatepackageGetAutocompleteV2Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsigntemplatepackageGetAutocompleteV2Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsigntemplatepackageGetAutocompleteV2Async
     *
     * Retrieve Ezsigntemplatepackages and IDs
     *
     * @param  string $sSelector The type of Ezsigntemplatepackages to return (required)
     * @param  string $eFilterActive Specify which results we want to display. (optional, default to 'Active')
     * @param  string $sQuery Allow to filter the returned results (optional)
     * @param  HeaderAcceptLanguage $acceptLanguage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageGetAutocompleteV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepackageGetAutocompleteV2Async($sSelector, $eFilterActive = 'Active', $sQuery = null, $acceptLanguage = null, string $contentType = self::contentTypes['ezsigntemplatepackageGetAutocompleteV2'][0])
    {
        return $this->ezsigntemplatepackageGetAutocompleteV2AsyncWithHttpInfo($sSelector, $eFilterActive, $sQuery, $acceptLanguage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsigntemplatepackageGetAutocompleteV2AsyncWithHttpInfo
     *
     * Retrieve Ezsigntemplatepackages and IDs
     *
     * @param  string $sSelector The type of Ezsigntemplatepackages to return (required)
     * @param  string $eFilterActive Specify which results we want to display. (optional, default to 'Active')
     * @param  string $sQuery Allow to filter the returned results (optional)
     * @param  HeaderAcceptLanguage $acceptLanguage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageGetAutocompleteV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepackageGetAutocompleteV2AsyncWithHttpInfo($sSelector, $eFilterActive = 'Active', $sQuery = null, $acceptLanguage = null, string $contentType = self::contentTypes['ezsigntemplatepackageGetAutocompleteV2'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsigntemplatepackageGetAutocompleteV2Response';
        $request = $this->ezsigntemplatepackageGetAutocompleteV2Request($sSelector, $eFilterActive, $sQuery, $acceptLanguage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsigntemplatepackageGetAutocompleteV2'
     *
     * @param  string $sSelector The type of Ezsigntemplatepackages to return (required)
     * @param  string $eFilterActive Specify which results we want to display. (optional, default to 'Active')
     * @param  string $sQuery Allow to filter the returned results (optional)
     * @param  HeaderAcceptLanguage $acceptLanguage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageGetAutocompleteV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsigntemplatepackageGetAutocompleteV2Request($sSelector, $eFilterActive = 'Active', $sQuery = null, $acceptLanguage = null, string $contentType = self::contentTypes['ezsigntemplatepackageGetAutocompleteV2'][0])
    {

        // verify the required parameter 'sSelector' is set
        if ($sSelector === null || (is_array($sSelector) && count($sSelector) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sSelector when calling ezsigntemplatepackageGetAutocompleteV2'
            );
        }





        $resourcePath = '/2/object/ezsigntemplatepackage/getAutocomplete/{sSelector}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $eFilterActive,
            'eFilterActive', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sQuery,
            'sQuery', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($acceptLanguage !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($acceptLanguage);
        }

        // path params
        if ($sSelector !== null) {
            $resourcePath = str_replace(
                '{' . 'sSelector' . '}',
                ObjectSerializer::toPathValue($sSelector),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsigntemplatepackageGetListV1
     *
     * Retrieve Ezsigntemplatepackage list
     *
     * @param  string $eOrderBy Specify how you want the results to be sorted (optional)
     * @param  int $iRowMax iRowMax (optional)
     * @param  int $iRowOffset iRowOffset (optional, default to 0)
     * @param  HeaderAcceptLanguage $acceptLanguage acceptLanguage (optional)
     * @param  string $sFilter sFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageGetListV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsigntemplatepackageGetListV1Response|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsigntemplatepackageGetListV1($eOrderBy = null, $iRowMax = null, $iRowOffset = 0, $acceptLanguage = null, $sFilter = null, string $contentType = self::contentTypes['ezsigntemplatepackageGetListV1'][0])
    {
        list($response) = $this->ezsigntemplatepackageGetListV1WithHttpInfo($eOrderBy, $iRowMax, $iRowOffset, $acceptLanguage, $sFilter, $contentType);
        return $response;
    }

    /**
     * Operation ezsigntemplatepackageGetListV1WithHttpInfo
     *
     * Retrieve Ezsigntemplatepackage list
     *
     * @param  string $eOrderBy Specify how you want the results to be sorted (optional)
     * @param  int $iRowMax (optional)
     * @param  int $iRowOffset (optional, default to 0)
     * @param  HeaderAcceptLanguage $acceptLanguage (optional)
     * @param  string $sFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageGetListV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsigntemplatepackageGetListV1Response|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsigntemplatepackageGetListV1WithHttpInfo($eOrderBy = null, $iRowMax = null, $iRowOffset = 0, $acceptLanguage = null, $sFilter = null, string $contentType = self::contentTypes['ezsigntemplatepackageGetListV1'][0])
    {
        $request = $this->ezsigntemplatepackageGetListV1Request($eOrderBy, $iRowMax, $iRowOffset, $acceptLanguage, $sFilter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsigntemplatepackageGetListV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsigntemplatepackageGetListV1Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsigntemplatepackageGetListV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\eZmaxAPI\Model\EzsigntemplatepackageGetListV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsigntemplatepackageGetListV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsigntemplatepackageGetListV1Async
     *
     * Retrieve Ezsigntemplatepackage list
     *
     * @param  string $eOrderBy Specify how you want the results to be sorted (optional)
     * @param  int $iRowMax (optional)
     * @param  int $iRowOffset (optional, default to 0)
     * @param  HeaderAcceptLanguage $acceptLanguage (optional)
     * @param  string $sFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageGetListV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepackageGetListV1Async($eOrderBy = null, $iRowMax = null, $iRowOffset = 0, $acceptLanguage = null, $sFilter = null, string $contentType = self::contentTypes['ezsigntemplatepackageGetListV1'][0])
    {
        return $this->ezsigntemplatepackageGetListV1AsyncWithHttpInfo($eOrderBy, $iRowMax, $iRowOffset, $acceptLanguage, $sFilter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsigntemplatepackageGetListV1AsyncWithHttpInfo
     *
     * Retrieve Ezsigntemplatepackage list
     *
     * @param  string $eOrderBy Specify how you want the results to be sorted (optional)
     * @param  int $iRowMax (optional)
     * @param  int $iRowOffset (optional, default to 0)
     * @param  HeaderAcceptLanguage $acceptLanguage (optional)
     * @param  string $sFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageGetListV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepackageGetListV1AsyncWithHttpInfo($eOrderBy = null, $iRowMax = null, $iRowOffset = 0, $acceptLanguage = null, $sFilter = null, string $contentType = self::contentTypes['ezsigntemplatepackageGetListV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsigntemplatepackageGetListV1Response';
        $request = $this->ezsigntemplatepackageGetListV1Request($eOrderBy, $iRowMax, $iRowOffset, $acceptLanguage, $sFilter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsigntemplatepackageGetListV1'
     *
     * @param  string $eOrderBy Specify how you want the results to be sorted (optional)
     * @param  int $iRowMax (optional)
     * @param  int $iRowOffset (optional, default to 0)
     * @param  HeaderAcceptLanguage $acceptLanguage (optional)
     * @param  string $sFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageGetListV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsigntemplatepackageGetListV1Request($eOrderBy = null, $iRowMax = null, $iRowOffset = 0, $acceptLanguage = null, $sFilter = null, string $contentType = self::contentTypes['ezsigntemplatepackageGetListV1'][0])
    {


        if ($iRowMax !== null && $iRowMax > 10000) {
            throw new \InvalidArgumentException('invalid value for "$iRowMax" when calling ObjectEzsigntemplatepackageApi.ezsigntemplatepackageGetListV1, must be smaller than or equal to 10000.');
        }
        if ($iRowMax !== null && $iRowMax < 1) {
            throw new \InvalidArgumentException('invalid value for "$iRowMax" when calling ObjectEzsigntemplatepackageApi.ezsigntemplatepackageGetListV1, must be bigger than or equal to 1.');
        }
        
        if ($iRowOffset !== null && $iRowOffset < 0) {
            throw new \InvalidArgumentException('invalid value for "$iRowOffset" when calling ObjectEzsigntemplatepackageApi.ezsigntemplatepackageGetListV1, must be bigger than or equal to 0.');
        }
        



        $resourcePath = '/1/object/ezsigntemplatepackage/getList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $eOrderBy,
            'eOrderBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iRowMax,
            'iRowMax', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iRowOffset,
            'iRowOffset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sFilter,
            'sFilter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($acceptLanguage !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($acceptLanguage);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsigntemplatepackageGetObjectV2
     *
     * Retrieve an existing Ezsigntemplatepackage
     *
     * @param  int $pkiEzsigntemplatepackageID pkiEzsigntemplatepackageID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageGetObjectV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsigntemplatepackageGetObjectV2Response|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsigntemplatepackageGetObjectV2($pkiEzsigntemplatepackageID, string $contentType = self::contentTypes['ezsigntemplatepackageGetObjectV2'][0])
    {
        list($response) = $this->ezsigntemplatepackageGetObjectV2WithHttpInfo($pkiEzsigntemplatepackageID, $contentType);
        return $response;
    }

    /**
     * Operation ezsigntemplatepackageGetObjectV2WithHttpInfo
     *
     * Retrieve an existing Ezsigntemplatepackage
     *
     * @param  int $pkiEzsigntemplatepackageID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageGetObjectV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsigntemplatepackageGetObjectV2Response|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsigntemplatepackageGetObjectV2WithHttpInfo($pkiEzsigntemplatepackageID, string $contentType = self::contentTypes['ezsigntemplatepackageGetObjectV2'][0])
    {
        $request = $this->ezsigntemplatepackageGetObjectV2Request($pkiEzsigntemplatepackageID, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsigntemplatepackageGetObjectV2Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsigntemplatepackageGetObjectV2Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsigntemplatepackageGetObjectV2Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\eZmaxAPI\Model\EzsigntemplatepackageGetObjectV2Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsigntemplatepackageGetObjectV2Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsigntemplatepackageGetObjectV2Async
     *
     * Retrieve an existing Ezsigntemplatepackage
     *
     * @param  int $pkiEzsigntemplatepackageID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageGetObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepackageGetObjectV2Async($pkiEzsigntemplatepackageID, string $contentType = self::contentTypes['ezsigntemplatepackageGetObjectV2'][0])
    {
        return $this->ezsigntemplatepackageGetObjectV2AsyncWithHttpInfo($pkiEzsigntemplatepackageID, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsigntemplatepackageGetObjectV2AsyncWithHttpInfo
     *
     * Retrieve an existing Ezsigntemplatepackage
     *
     * @param  int $pkiEzsigntemplatepackageID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageGetObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepackageGetObjectV2AsyncWithHttpInfo($pkiEzsigntemplatepackageID, string $contentType = self::contentTypes['ezsigntemplatepackageGetObjectV2'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsigntemplatepackageGetObjectV2Response';
        $request = $this->ezsigntemplatepackageGetObjectV2Request($pkiEzsigntemplatepackageID, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsigntemplatepackageGetObjectV2'
     *
     * @param  int $pkiEzsigntemplatepackageID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepackageGetObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsigntemplatepackageGetObjectV2Request($pkiEzsigntemplatepackageID, string $contentType = self::contentTypes['ezsigntemplatepackageGetObjectV2'][0])
    {

        // verify the required parameter 'pkiEzsigntemplatepackageID' is set
        if ($pkiEzsigntemplatepackageID === null || (is_array($pkiEzsigntemplatepackageID) && count($pkiEzsigntemplatepackageID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsigntemplatepackageID when calling ezsigntemplatepackageGetObjectV2'
            );
        }
        if ($pkiEzsigntemplatepackageID < 0) {
            throw new \InvalidArgumentException('invalid value for "$pkiEzsigntemplatepackageID" when calling ObjectEzsigntemplatepackageApi.ezsigntemplatepackageGetObjectV2, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/2/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsigntemplatepackageID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsigntemplatepackageID' . '}',
                ObjectSerializer::toPathValue($pkiEzsigntemplatepackageID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
