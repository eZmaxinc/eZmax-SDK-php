<?php
/**
 * ObjectEzsigntemplatepublicApi
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use eZmaxAPI\ApiException;
use eZmaxAPI\Configuration;
use eZmaxAPI\HeaderSelector;
use eZmaxAPI\ObjectSerializer;
use eZmaxAPI\RequestSignature;

/**
 * ObjectEzsigntemplatepublicApi Class Doc Comment
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ObjectEzsigntemplatepublicApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'ezsigntemplatepublicCreateEzsignfolderV1' => [
            'application/json',
        ],
        'ezsigntemplatepublicCreateObjectV1' => [
            'application/json',
        ],
        'ezsigntemplatepublicEditObjectV1' => [
            'application/json',
        ],
        'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1' => [
            'application/json',
        ],
        'ezsigntemplatepublicGetFormsDataV1' => [
            'application/json',
        ],
        'ezsigntemplatepublicGetListV1' => [
            'application/json',
        ],
        'ezsigntemplatepublicGetObjectV2' => [
            'application/json',
        ],
        'ezsigntemplatepublicResetLimitExceededCounterV1' => [
            'application/json',
        ],
        'ezsigntemplatepublicResetUrlV1' => [
            'application/json',
        ],
    ];

    /** @var array[] $objEzmaxConfig **/
    public const objEzmaxConfig = [
        'ezsigntemplatepublicCreateEzsignfolderV1' => [
            'permissions' => [
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsigntemplatepublicCreateObjectV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsigntemplatepublicEditObjectV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1' => [
            'permissions' => [
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsigntemplatepublicGetFormsDataV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsigntemplatepublicGetListV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsigntemplatepublicGetObjectV2' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsigntemplatepublicResetLimitExceededCounterV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsigntemplatepublicResetUrlV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
    ];
/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation ezsigntemplatepublicCreateEzsignfolderV1
     *
     * Create an Ezsignfolder
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicCreateEzsignfolderV1Request $ezsigntemplatepublicCreateEzsignfolderV1Request ezsigntemplatepublicCreateEzsignfolderV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicCreateEzsignfolderV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsigntemplatepublicCreateEzsignfolderV1Response|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsigntemplatepublicCreateEzsignfolderV1($ezsigntemplatepublicCreateEzsignfolderV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicCreateEzsignfolderV1'][0])
    {
        list($response) = $this->ezsigntemplatepublicCreateEzsignfolderV1WithHttpInfo($ezsigntemplatepublicCreateEzsignfolderV1Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsigntemplatepublicCreateEzsignfolderV1WithHttpInfo
     *
     * Create an Ezsignfolder
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicCreateEzsignfolderV1Request $ezsigntemplatepublicCreateEzsignfolderV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicCreateEzsignfolderV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsigntemplatepublicCreateEzsignfolderV1Response|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsigntemplatepublicCreateEzsignfolderV1WithHttpInfo($ezsigntemplatepublicCreateEzsignfolderV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicCreateEzsignfolderV1'][0])
    {
        $request = $this->ezsigntemplatepublicCreateEzsignfolderV1Request($ezsigntemplatepublicCreateEzsignfolderV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsigntemplatepublicCreateEzsignfolderV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsigntemplatepublicCreateEzsignfolderV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsigntemplatepublicCreateEzsignfolderV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicCreateEzsignfolderV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsigntemplatepublicCreateEzsignfolderV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsigntemplatepublicCreateEzsignfolderV1Async
     *
     * Create an Ezsignfolder
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicCreateEzsignfolderV1Request $ezsigntemplatepublicCreateEzsignfolderV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicCreateEzsignfolderV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicCreateEzsignfolderV1Async($ezsigntemplatepublicCreateEzsignfolderV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicCreateEzsignfolderV1'][0])
    {
        return $this->ezsigntemplatepublicCreateEzsignfolderV1AsyncWithHttpInfo($ezsigntemplatepublicCreateEzsignfolderV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsigntemplatepublicCreateEzsignfolderV1AsyncWithHttpInfo
     *
     * Create an Ezsignfolder
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicCreateEzsignfolderV1Request $ezsigntemplatepublicCreateEzsignfolderV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicCreateEzsignfolderV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicCreateEzsignfolderV1AsyncWithHttpInfo($ezsigntemplatepublicCreateEzsignfolderV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicCreateEzsignfolderV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicCreateEzsignfolderV1Response';
        $request = $this->ezsigntemplatepublicCreateEzsignfolderV1Request($ezsigntemplatepublicCreateEzsignfolderV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsigntemplatepublicCreateEzsignfolderV1'
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicCreateEzsignfolderV1Request $ezsigntemplatepublicCreateEzsignfolderV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicCreateEzsignfolderV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsigntemplatepublicCreateEzsignfolderV1Request($ezsigntemplatepublicCreateEzsignfolderV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicCreateEzsignfolderV1'][0])
    {

        // verify the required parameter 'ezsigntemplatepublicCreateEzsignfolderV1Request' is set
        if ($ezsigntemplatepublicCreateEzsignfolderV1Request === null || (is_array($ezsigntemplatepublicCreateEzsignfolderV1Request) && count($ezsigntemplatepublicCreateEzsignfolderV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsigntemplatepublicCreateEzsignfolderV1Request when calling ezsigntemplatepublicCreateEzsignfolderV1'
            );
        }


        $resourcePath = '/1/object/ezsigntemplatepublic/createEzsignfolder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsigntemplatepublicCreateEzsignfolderV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsigntemplatepublicCreateEzsignfolderV1Request));
            } else {
                $httpBody = $ezsigntemplatepublicCreateEzsignfolderV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'POST', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsigntemplatepublicCreateObjectV1
     *
     * Create a new Ezsigntemplatepublic
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicCreateObjectV1Request $ezsigntemplatepublicCreateObjectV1Request ezsigntemplatepublicCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsigntemplatepublicCreateObjectV1Response
     */
    public function ezsigntemplatepublicCreateObjectV1($ezsigntemplatepublicCreateObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicCreateObjectV1'][0])
    {
        list($response) = $this->ezsigntemplatepublicCreateObjectV1WithHttpInfo($ezsigntemplatepublicCreateObjectV1Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsigntemplatepublicCreateObjectV1WithHttpInfo
     *
     * Create a new Ezsigntemplatepublic
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicCreateObjectV1Request $ezsigntemplatepublicCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsigntemplatepublicCreateObjectV1Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsigntemplatepublicCreateObjectV1WithHttpInfo($ezsigntemplatepublicCreateObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicCreateObjectV1'][0])
    {
        $request = $this->ezsigntemplatepublicCreateObjectV1Request($ezsigntemplatepublicCreateObjectV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\eZmaxAPI\Model\EzsigntemplatepublicCreateObjectV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsigntemplatepublicCreateObjectV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsigntemplatepublicCreateObjectV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicCreateObjectV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsigntemplatepublicCreateObjectV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsigntemplatepublicCreateObjectV1Async
     *
     * Create a new Ezsigntemplatepublic
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicCreateObjectV1Request $ezsigntemplatepublicCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicCreateObjectV1Async($ezsigntemplatepublicCreateObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicCreateObjectV1'][0])
    {
        return $this->ezsigntemplatepublicCreateObjectV1AsyncWithHttpInfo($ezsigntemplatepublicCreateObjectV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsigntemplatepublicCreateObjectV1AsyncWithHttpInfo
     *
     * Create a new Ezsigntemplatepublic
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicCreateObjectV1Request $ezsigntemplatepublicCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicCreateObjectV1AsyncWithHttpInfo($ezsigntemplatepublicCreateObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicCreateObjectV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicCreateObjectV1Response';
        $request = $this->ezsigntemplatepublicCreateObjectV1Request($ezsigntemplatepublicCreateObjectV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsigntemplatepublicCreateObjectV1'
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicCreateObjectV1Request $ezsigntemplatepublicCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsigntemplatepublicCreateObjectV1Request($ezsigntemplatepublicCreateObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicCreateObjectV1'][0])
    {

        // verify the required parameter 'ezsigntemplatepublicCreateObjectV1Request' is set
        if ($ezsigntemplatepublicCreateObjectV1Request === null || (is_array($ezsigntemplatepublicCreateObjectV1Request) && count($ezsigntemplatepublicCreateObjectV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsigntemplatepublicCreateObjectV1Request when calling ezsigntemplatepublicCreateObjectV1'
            );
        }


        $resourcePath = '/1/object/ezsigntemplatepublic';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsigntemplatepublicCreateObjectV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsigntemplatepublicCreateObjectV1Request));
            } else {
                $httpBody = $ezsigntemplatepublicCreateObjectV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'POST', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsigntemplatepublicEditObjectV1
     *
     * Edit an existing Ezsigntemplatepublic
     *
     * @param  int $pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicEditObjectV1Request $ezsigntemplatepublicEditObjectV1Request ezsigntemplatepublicEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicEditObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsigntemplatepublicEditObjectV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsigntemplatepublicEditObjectV1($pkiEzsigntemplatepublicID, $ezsigntemplatepublicEditObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicEditObjectV1'][0])
    {
        list($response) = $this->ezsigntemplatepublicEditObjectV1WithHttpInfo($pkiEzsigntemplatepublicID, $ezsigntemplatepublicEditObjectV1Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsigntemplatepublicEditObjectV1WithHttpInfo
     *
     * Edit an existing Ezsigntemplatepublic
     *
     * @param  int $pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicEditObjectV1Request $ezsigntemplatepublicEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicEditObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsigntemplatepublicEditObjectV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsigntemplatepublicEditObjectV1WithHttpInfo($pkiEzsigntemplatepublicID, $ezsigntemplatepublicEditObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicEditObjectV1'][0])
    {
        $request = $this->ezsigntemplatepublicEditObjectV1Request($pkiEzsigntemplatepublicID, $ezsigntemplatepublicEditObjectV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsigntemplatepublicEditObjectV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsigntemplatepublicEditObjectV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsigntemplatepublicEditObjectV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicEditObjectV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsigntemplatepublicEditObjectV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsigntemplatepublicEditObjectV1Async
     *
     * Edit an existing Ezsigntemplatepublic
     *
     * @param  int $pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicEditObjectV1Request $ezsigntemplatepublicEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicEditObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicEditObjectV1Async($pkiEzsigntemplatepublicID, $ezsigntemplatepublicEditObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicEditObjectV1'][0])
    {
        return $this->ezsigntemplatepublicEditObjectV1AsyncWithHttpInfo($pkiEzsigntemplatepublicID, $ezsigntemplatepublicEditObjectV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsigntemplatepublicEditObjectV1AsyncWithHttpInfo
     *
     * Edit an existing Ezsigntemplatepublic
     *
     * @param  int $pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicEditObjectV1Request $ezsigntemplatepublicEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicEditObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicEditObjectV1AsyncWithHttpInfo($pkiEzsigntemplatepublicID, $ezsigntemplatepublicEditObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicEditObjectV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicEditObjectV1Response';
        $request = $this->ezsigntemplatepublicEditObjectV1Request($pkiEzsigntemplatepublicID, $ezsigntemplatepublicEditObjectV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsigntemplatepublicEditObjectV1'
     *
     * @param  int $pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicEditObjectV1Request $ezsigntemplatepublicEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicEditObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsigntemplatepublicEditObjectV1Request($pkiEzsigntemplatepublicID, $ezsigntemplatepublicEditObjectV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicEditObjectV1'][0])
    {

        // verify the required parameter 'pkiEzsigntemplatepublicID' is set
        if ($pkiEzsigntemplatepublicID === null || (is_array($pkiEzsigntemplatepublicID) && count($pkiEzsigntemplatepublicID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsigntemplatepublicID when calling ezsigntemplatepublicEditObjectV1'
            );
        }
        if ($pkiEzsigntemplatepublicID > 65535) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicEditObjectV1, must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsigntemplatepublicID)?'null':'"'.$pkiEzsigntemplatepublicID.'"').' for "pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicEditObjectV1, must be smaller than or equal to 65535.');
        }
        if ($pkiEzsigntemplatepublicID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicEditObjectV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsigntemplatepublicID)?'null':'"'.$pkiEzsigntemplatepublicID.'"').' for "pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicEditObjectV1, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'ezsigntemplatepublicEditObjectV1Request' is set
        if ($ezsigntemplatepublicEditObjectV1Request === null || (is_array($ezsigntemplatepublicEditObjectV1Request) && count($ezsigntemplatepublicEditObjectV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsigntemplatepublicEditObjectV1Request when calling ezsigntemplatepublicEditObjectV1'
            );
        }


        $resourcePath = '/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsigntemplatepublicID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsigntemplatepublicID' . '}',
                ObjectSerializer::toPathValue($pkiEzsigntemplatepublicID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsigntemplatepublicEditObjectV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsigntemplatepublicEditObjectV1Request));
            } else {
                $httpBody = $ezsigntemplatepublicEditObjectV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'PUT', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1
     *
     * Retrieve the Ezsigntemplatepublic details
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request $ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1($ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1'][0])
    {
        list($response) = $this->ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1WithHttpInfo($ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1WithHttpInfo
     *
     * Retrieve the Ezsigntemplatepublic details
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request $ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1WithHttpInfo($ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1'][0])
    {
        $request = $this->ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request($ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Async
     *
     * Retrieve the Ezsigntemplatepublic details
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request $ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Async($ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1'][0])
    {
        return $this->ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1AsyncWithHttpInfo($ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1AsyncWithHttpInfo
     *
     * Retrieve the Ezsigntemplatepublic details
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request $ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1AsyncWithHttpInfo($ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response';
        $request = $this->ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request($ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1'
     *
     * @param  \eZmaxAPI\Model\EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request $ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request($ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, string $contentType = self::contentTypes['ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1'][0])
    {

        // verify the required parameter 'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request' is set
        if ($ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request === null || (is_array($ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request) && count($ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request when calling ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1'
            );
        }


        $resourcePath = '/1/object/ezsigntemplatepublic/getEzsigntemplatepublicDetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request));
            } else {
                $httpBody = $ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'POST', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsigntemplatepublicGetFormsDataV1
     *
     * Retrieve an existing Ezsigntemplatepublic&#39;s forms data
     *
     * @param  int $pkiEzsigntemplatepublicID pkiEzsigntemplatepublicID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetFormsDataV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsigntemplatepublicGetFormsDataV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsigntemplatepublicGetFormsDataV1($pkiEzsigntemplatepublicID, string $contentType = self::contentTypes['ezsigntemplatepublicGetFormsDataV1'][0])
    {
        list($response) = $this->ezsigntemplatepublicGetFormsDataV1WithHttpInfo($pkiEzsigntemplatepublicID, $contentType);
        return $response;
    }

    /**
     * Operation ezsigntemplatepublicGetFormsDataV1WithHttpInfo
     *
     * Retrieve an existing Ezsigntemplatepublic&#39;s forms data
     *
     * @param  int $pkiEzsigntemplatepublicID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetFormsDataV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsigntemplatepublicGetFormsDataV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsigntemplatepublicGetFormsDataV1WithHttpInfo($pkiEzsigntemplatepublicID, string $contentType = self::contentTypes['ezsigntemplatepublicGetFormsDataV1'][0])
    {
        $request = $this->ezsigntemplatepublicGetFormsDataV1Request($pkiEzsigntemplatepublicID, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsigntemplatepublicGetFormsDataV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsigntemplatepublicGetFormsDataV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsigntemplatepublicGetFormsDataV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicGetFormsDataV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsigntemplatepublicGetFormsDataV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsigntemplatepublicGetFormsDataV1Async
     *
     * Retrieve an existing Ezsigntemplatepublic&#39;s forms data
     *
     * @param  int $pkiEzsigntemplatepublicID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetFormsDataV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicGetFormsDataV1Async($pkiEzsigntemplatepublicID, string $contentType = self::contentTypes['ezsigntemplatepublicGetFormsDataV1'][0])
    {
        return $this->ezsigntemplatepublicGetFormsDataV1AsyncWithHttpInfo($pkiEzsigntemplatepublicID, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsigntemplatepublicGetFormsDataV1AsyncWithHttpInfo
     *
     * Retrieve an existing Ezsigntemplatepublic&#39;s forms data
     *
     * @param  int $pkiEzsigntemplatepublicID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetFormsDataV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicGetFormsDataV1AsyncWithHttpInfo($pkiEzsigntemplatepublicID, string $contentType = self::contentTypes['ezsigntemplatepublicGetFormsDataV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicGetFormsDataV1Response';
        $request = $this->ezsigntemplatepublicGetFormsDataV1Request($pkiEzsigntemplatepublicID, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsigntemplatepublicGetFormsDataV1'
     *
     * @param  int $pkiEzsigntemplatepublicID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetFormsDataV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsigntemplatepublicGetFormsDataV1Request($pkiEzsigntemplatepublicID, string $contentType = self::contentTypes['ezsigntemplatepublicGetFormsDataV1'][0])
    {

        // verify the required parameter 'pkiEzsigntemplatepublicID' is set
        if ($pkiEzsigntemplatepublicID === null || (is_array($pkiEzsigntemplatepublicID) && count($pkiEzsigntemplatepublicID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsigntemplatepublicID when calling ezsigntemplatepublicGetFormsDataV1'
            );
        }
        if ($pkiEzsigntemplatepublicID > 65535) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetFormsDataV1, must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsigntemplatepublicID)?'null':'"'.$pkiEzsigntemplatepublicID.'"').' for "pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetFormsDataV1, must be smaller than or equal to 65535.');
        }
        if ($pkiEzsigntemplatepublicID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetFormsDataV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsigntemplatepublicID)?'null':'"'.$pkiEzsigntemplatepublicID.'"').' for "pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetFormsDataV1, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/getFormsData';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsigntemplatepublicID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsigntemplatepublicID' . '}',
                ObjectSerializer::toPathValue($pkiEzsigntemplatepublicID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/zip', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsigntemplatepublicGetListV1
     *
     * Retrieve Ezsigntemplatepublic list
     *
     * @param  string|null $eOrderBy Specify how you want the results to be sorted (optional)
     * @param  int|null $iRowMax iRowMax (optional)
     * @param  int|null $iRowOffset iRowOffset (optional, default to 0)
     * @param  \eZmaxAPI\Model\HeaderAcceptLanguage|null $acceptLanguage acceptLanguage (optional)
     * @param  string|null $sFilter sFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetListV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsigntemplatepublicGetListV1Response|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsigntemplatepublicGetListV1($eOrderBy = null, $iRowMax = null, $iRowOffset = 0, $acceptLanguage = null, $sFilter = null, string $contentType = self::contentTypes['ezsigntemplatepublicGetListV1'][0])
    {
        list($response) = $this->ezsigntemplatepublicGetListV1WithHttpInfo($eOrderBy, $iRowMax, $iRowOffset, $acceptLanguage, $sFilter, $contentType);
        return $response;
    }

    /**
     * Operation ezsigntemplatepublicGetListV1WithHttpInfo
     *
     * Retrieve Ezsigntemplatepublic list
     *
     * @param  string|null $eOrderBy Specify how you want the results to be sorted (optional)
     * @param  int|null $iRowMax (optional)
     * @param  int|null $iRowOffset (optional, default to 0)
     * @param  \eZmaxAPI\Model\HeaderAcceptLanguage|null $acceptLanguage (optional)
     * @param  string|null $sFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetListV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsigntemplatepublicGetListV1Response|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsigntemplatepublicGetListV1WithHttpInfo($eOrderBy = null, $iRowMax = null, $iRowOffset = 0, $acceptLanguage = null, $sFilter = null, string $contentType = self::contentTypes['ezsigntemplatepublicGetListV1'][0])
    {
        $request = $this->ezsigntemplatepublicGetListV1Request($eOrderBy, $iRowMax, $iRowOffset, $acceptLanguage, $sFilter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsigntemplatepublicGetListV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsigntemplatepublicGetListV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsigntemplatepublicGetListV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicGetListV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsigntemplatepublicGetListV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsigntemplatepublicGetListV1Async
     *
     * Retrieve Ezsigntemplatepublic list
     *
     * @param  string|null $eOrderBy Specify how you want the results to be sorted (optional)
     * @param  int|null $iRowMax (optional)
     * @param  int|null $iRowOffset (optional, default to 0)
     * @param  \eZmaxAPI\Model\HeaderAcceptLanguage|null $acceptLanguage (optional)
     * @param  string|null $sFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetListV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicGetListV1Async($eOrderBy = null, $iRowMax = null, $iRowOffset = 0, $acceptLanguage = null, $sFilter = null, string $contentType = self::contentTypes['ezsigntemplatepublicGetListV1'][0])
    {
        return $this->ezsigntemplatepublicGetListV1AsyncWithHttpInfo($eOrderBy, $iRowMax, $iRowOffset, $acceptLanguage, $sFilter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsigntemplatepublicGetListV1AsyncWithHttpInfo
     *
     * Retrieve Ezsigntemplatepublic list
     *
     * @param  string|null $eOrderBy Specify how you want the results to be sorted (optional)
     * @param  int|null $iRowMax (optional)
     * @param  int|null $iRowOffset (optional, default to 0)
     * @param  \eZmaxAPI\Model\HeaderAcceptLanguage|null $acceptLanguage (optional)
     * @param  string|null $sFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetListV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicGetListV1AsyncWithHttpInfo($eOrderBy = null, $iRowMax = null, $iRowOffset = 0, $acceptLanguage = null, $sFilter = null, string $contentType = self::contentTypes['ezsigntemplatepublicGetListV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicGetListV1Response';
        $request = $this->ezsigntemplatepublicGetListV1Request($eOrderBy, $iRowMax, $iRowOffset, $acceptLanguage, $sFilter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsigntemplatepublicGetListV1'
     *
     * @param  string|null $eOrderBy Specify how you want the results to be sorted (optional)
     * @param  int|null $iRowMax (optional)
     * @param  int|null $iRowOffset (optional, default to 0)
     * @param  \eZmaxAPI\Model\HeaderAcceptLanguage|null $acceptLanguage (optional)
     * @param  string|null $sFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetListV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsigntemplatepublicGetListV1Request($eOrderBy = null, $iRowMax = null, $iRowOffset = 0, $acceptLanguage = null, $sFilter = null, string $contentType = self::contentTypes['ezsigntemplatepublicGetListV1'][0])
    {


        if ($iRowMax !== null && $iRowMax > 10000) {
	    //throw new \InvalidArgumentException('invalid value for "$iRowMax" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetListV1, must be smaller than or equal to 10000.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iRowMax)?'null':'"'.$iRowMax.'"').' for "iRowMax" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetListV1, must be smaller than or equal to 10000.');
        }
        if ($iRowMax !== null && $iRowMax < 1) {
	    //throw new \InvalidArgumentException('invalid value for "$iRowMax" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetListV1, must be bigger than or equal to 1.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iRowMax)?'null':'"'.$iRowMax.'"').' for "iRowMax" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetListV1, must be bigger than or equal to 1.');
        }
        
        if ($iRowOffset !== null && $iRowOffset < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$iRowOffset" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetListV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iRowOffset)?'null':'"'.$iRowOffset.'"').' for "iRowOffset" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetListV1, must be bigger than or equal to 0.');
        }
        



        $resourcePath = '/1/object/ezsigntemplatepublic/getList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $eOrderBy,
            'eOrderBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iRowMax,
            'iRowMax', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iRowOffset,
            'iRowOffset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sFilter,
            'sFilter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($acceptLanguage !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($acceptLanguage);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsigntemplatepublicGetObjectV2
     *
     * Retrieve an existing Ezsigntemplatepublic
     *
     * @param  int $pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetObjectV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsigntemplatepublicGetObjectV2Response|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsigntemplatepublicGetObjectV2($pkiEzsigntemplatepublicID, string $contentType = self::contentTypes['ezsigntemplatepublicGetObjectV2'][0])
    {
        list($response) = $this->ezsigntemplatepublicGetObjectV2WithHttpInfo($pkiEzsigntemplatepublicID, $contentType);
        return $response;
    }

    /**
     * Operation ezsigntemplatepublicGetObjectV2WithHttpInfo
     *
     * Retrieve an existing Ezsigntemplatepublic
     *
     * @param  int $pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetObjectV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsigntemplatepublicGetObjectV2Response|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsigntemplatepublicGetObjectV2WithHttpInfo($pkiEzsigntemplatepublicID, string $contentType = self::contentTypes['ezsigntemplatepublicGetObjectV2'][0])
    {
        $request = $this->ezsigntemplatepublicGetObjectV2Request($pkiEzsigntemplatepublicID, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsigntemplatepublicGetObjectV2Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsigntemplatepublicGetObjectV2Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsigntemplatepublicGetObjectV2Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicGetObjectV2Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsigntemplatepublicGetObjectV2Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsigntemplatepublicGetObjectV2Async
     *
     * Retrieve an existing Ezsigntemplatepublic
     *
     * @param  int $pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicGetObjectV2Async($pkiEzsigntemplatepublicID, string $contentType = self::contentTypes['ezsigntemplatepublicGetObjectV2'][0])
    {
        return $this->ezsigntemplatepublicGetObjectV2AsyncWithHttpInfo($pkiEzsigntemplatepublicID, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsigntemplatepublicGetObjectV2AsyncWithHttpInfo
     *
     * Retrieve an existing Ezsigntemplatepublic
     *
     * @param  int $pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicGetObjectV2AsyncWithHttpInfo($pkiEzsigntemplatepublicID, string $contentType = self::contentTypes['ezsigntemplatepublicGetObjectV2'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicGetObjectV2Response';
        $request = $this->ezsigntemplatepublicGetObjectV2Request($pkiEzsigntemplatepublicID, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsigntemplatepublicGetObjectV2'
     *
     * @param  int $pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicGetObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsigntemplatepublicGetObjectV2Request($pkiEzsigntemplatepublicID, string $contentType = self::contentTypes['ezsigntemplatepublicGetObjectV2'][0])
    {

        // verify the required parameter 'pkiEzsigntemplatepublicID' is set
        if ($pkiEzsigntemplatepublicID === null || (is_array($pkiEzsigntemplatepublicID) && count($pkiEzsigntemplatepublicID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsigntemplatepublicID when calling ezsigntemplatepublicGetObjectV2'
            );
        }
        if ($pkiEzsigntemplatepublicID > 65535) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetObjectV2, must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsigntemplatepublicID)?'null':'"'.$pkiEzsigntemplatepublicID.'"').' for "pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetObjectV2, must be smaller than or equal to 65535.');
        }
        if ($pkiEzsigntemplatepublicID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetObjectV2, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsigntemplatepublicID)?'null':'"'.$pkiEzsigntemplatepublicID.'"').' for "pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicGetObjectV2, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/2/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsigntemplatepublicID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsigntemplatepublicID' . '}',
                ObjectSerializer::toPathValue($pkiEzsigntemplatepublicID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsigntemplatepublicResetLimitExceededCounterV1
     *
     * Reset the limit exceeded counter
     *
     * @param  int $pkiEzsigntemplatepublicID pkiEzsigntemplatepublicID (required)
     * @param  object $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicResetLimitExceededCounterV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsigntemplatepublicResetLimitExceededCounterV1Response
     */
    public function ezsigntemplatepublicResetLimitExceededCounterV1($pkiEzsigntemplatepublicID, $body, string $contentType = self::contentTypes['ezsigntemplatepublicResetLimitExceededCounterV1'][0])
    {
        list($response) = $this->ezsigntemplatepublicResetLimitExceededCounterV1WithHttpInfo($pkiEzsigntemplatepublicID, $body, $contentType);
        return $response;
    }

    /**
     * Operation ezsigntemplatepublicResetLimitExceededCounterV1WithHttpInfo
     *
     * Reset the limit exceeded counter
     *
     * @param  int $pkiEzsigntemplatepublicID (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicResetLimitExceededCounterV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsigntemplatepublicResetLimitExceededCounterV1Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsigntemplatepublicResetLimitExceededCounterV1WithHttpInfo($pkiEzsigntemplatepublicID, $body, string $contentType = self::contentTypes['ezsigntemplatepublicResetLimitExceededCounterV1'][0])
    {
        $request = $this->ezsigntemplatepublicResetLimitExceededCounterV1Request($pkiEzsigntemplatepublicID, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsigntemplatepublicResetLimitExceededCounterV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsigntemplatepublicResetLimitExceededCounterV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsigntemplatepublicResetLimitExceededCounterV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicResetLimitExceededCounterV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsigntemplatepublicResetLimitExceededCounterV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsigntemplatepublicResetLimitExceededCounterV1Async
     *
     * Reset the limit exceeded counter
     *
     * @param  int $pkiEzsigntemplatepublicID (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicResetLimitExceededCounterV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicResetLimitExceededCounterV1Async($pkiEzsigntemplatepublicID, $body, string $contentType = self::contentTypes['ezsigntemplatepublicResetLimitExceededCounterV1'][0])
    {
        return $this->ezsigntemplatepublicResetLimitExceededCounterV1AsyncWithHttpInfo($pkiEzsigntemplatepublicID, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsigntemplatepublicResetLimitExceededCounterV1AsyncWithHttpInfo
     *
     * Reset the limit exceeded counter
     *
     * @param  int $pkiEzsigntemplatepublicID (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicResetLimitExceededCounterV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicResetLimitExceededCounterV1AsyncWithHttpInfo($pkiEzsigntemplatepublicID, $body, string $contentType = self::contentTypes['ezsigntemplatepublicResetLimitExceededCounterV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicResetLimitExceededCounterV1Response';
        $request = $this->ezsigntemplatepublicResetLimitExceededCounterV1Request($pkiEzsigntemplatepublicID, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsigntemplatepublicResetLimitExceededCounterV1'
     *
     * @param  int $pkiEzsigntemplatepublicID (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicResetLimitExceededCounterV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsigntemplatepublicResetLimitExceededCounterV1Request($pkiEzsigntemplatepublicID, $body, string $contentType = self::contentTypes['ezsigntemplatepublicResetLimitExceededCounterV1'][0])
    {

        // verify the required parameter 'pkiEzsigntemplatepublicID' is set
        if ($pkiEzsigntemplatepublicID === null || (is_array($pkiEzsigntemplatepublicID) && count($pkiEzsigntemplatepublicID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsigntemplatepublicID when calling ezsigntemplatepublicResetLimitExceededCounterV1'
            );
        }
        if ($pkiEzsigntemplatepublicID > 65535) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicResetLimitExceededCounterV1, must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsigntemplatepublicID)?'null':'"'.$pkiEzsigntemplatepublicID.'"').' for "pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicResetLimitExceededCounterV1, must be smaller than or equal to 65535.');
        }
        if ($pkiEzsigntemplatepublicID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicResetLimitExceededCounterV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsigntemplatepublicID)?'null':'"'.$pkiEzsigntemplatepublicID.'"').' for "pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicResetLimitExceededCounterV1, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling ezsigntemplatepublicResetLimitExceededCounterV1'
            );
        }


        $resourcePath = '/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetLimitExceededCounter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsigntemplatepublicID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsigntemplatepublicID' . '}',
                ObjectSerializer::toPathValue($pkiEzsigntemplatepublicID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'POST', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsigntemplatepublicResetUrlV1
     *
     * Reset the Ezsigntemplatepublic url
     *
     * @param  int $pkiEzsigntemplatepublicID pkiEzsigntemplatepublicID (required)
     * @param  object $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicResetUrlV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsigntemplatepublicResetUrlV1Response
     */
    public function ezsigntemplatepublicResetUrlV1($pkiEzsigntemplatepublicID, $body, string $contentType = self::contentTypes['ezsigntemplatepublicResetUrlV1'][0])
    {
        list($response) = $this->ezsigntemplatepublicResetUrlV1WithHttpInfo($pkiEzsigntemplatepublicID, $body, $contentType);
        return $response;
    }

    /**
     * Operation ezsigntemplatepublicResetUrlV1WithHttpInfo
     *
     * Reset the Ezsigntemplatepublic url
     *
     * @param  int $pkiEzsigntemplatepublicID (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicResetUrlV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsigntemplatepublicResetUrlV1Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsigntemplatepublicResetUrlV1WithHttpInfo($pkiEzsigntemplatepublicID, $body, string $contentType = self::contentTypes['ezsigntemplatepublicResetUrlV1'][0])
    {
        $request = $this->ezsigntemplatepublicResetUrlV1Request($pkiEzsigntemplatepublicID, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsigntemplatepublicResetUrlV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsigntemplatepublicResetUrlV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsigntemplatepublicResetUrlV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicResetUrlV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsigntemplatepublicResetUrlV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsigntemplatepublicResetUrlV1Async
     *
     * Reset the Ezsigntemplatepublic url
     *
     * @param  int $pkiEzsigntemplatepublicID (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicResetUrlV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicResetUrlV1Async($pkiEzsigntemplatepublicID, $body, string $contentType = self::contentTypes['ezsigntemplatepublicResetUrlV1'][0])
    {
        return $this->ezsigntemplatepublicResetUrlV1AsyncWithHttpInfo($pkiEzsigntemplatepublicID, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsigntemplatepublicResetUrlV1AsyncWithHttpInfo
     *
     * Reset the Ezsigntemplatepublic url
     *
     * @param  int $pkiEzsigntemplatepublicID (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicResetUrlV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsigntemplatepublicResetUrlV1AsyncWithHttpInfo($pkiEzsigntemplatepublicID, $body, string $contentType = self::contentTypes['ezsigntemplatepublicResetUrlV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsigntemplatepublicResetUrlV1Response';
        $request = $this->ezsigntemplatepublicResetUrlV1Request($pkiEzsigntemplatepublicID, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsigntemplatepublicResetUrlV1'
     *
     * @param  int $pkiEzsigntemplatepublicID (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsigntemplatepublicResetUrlV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsigntemplatepublicResetUrlV1Request($pkiEzsigntemplatepublicID, $body, string $contentType = self::contentTypes['ezsigntemplatepublicResetUrlV1'][0])
    {

        // verify the required parameter 'pkiEzsigntemplatepublicID' is set
        if ($pkiEzsigntemplatepublicID === null || (is_array($pkiEzsigntemplatepublicID) && count($pkiEzsigntemplatepublicID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsigntemplatepublicID when calling ezsigntemplatepublicResetUrlV1'
            );
        }
        if ($pkiEzsigntemplatepublicID > 65535) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicResetUrlV1, must be smaller than or equal to 65535.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsigntemplatepublicID)?'null':'"'.$pkiEzsigntemplatepublicID.'"').' for "pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicResetUrlV1, must be smaller than or equal to 65535.');
        }
        if ($pkiEzsigntemplatepublicID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicResetUrlV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsigntemplatepublicID)?'null':'"'.$pkiEzsigntemplatepublicID.'"').' for "pkiEzsigntemplatepublicID" when calling ObjectEzsigntemplatepublicApi.ezsigntemplatepublicResetUrlV1, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling ezsigntemplatepublicResetUrlV1'
            );
        }


        $resourcePath = '/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetUrl';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsigntemplatepublicID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsigntemplatepublicID' . '}',
                ObjectSerializer::toPathValue($pkiEzsigntemplatepublicID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'POST', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
