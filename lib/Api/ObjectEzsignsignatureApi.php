<?php
/**
 * ObjectEzsignsignatureApi
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use eZmaxAPI\ApiException;
use eZmaxAPI\Configuration;
use eZmaxAPI\HeaderSelector;
use eZmaxAPI\ObjectSerializer;
use eZmaxAPI\RequestSignature;

/**
 * ObjectEzsignsignatureApi Class Doc Comment
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ObjectEzsignsignatureApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'ezsignsignatureCreateObjectV1' => [
            'application/json',
        ],
        'ezsignsignatureCreateObjectV2' => [
            'application/json',
        ],
        'ezsignsignatureCreateObjectV3' => [
            'application/json',
        ],
        'ezsignsignatureDeleteObjectV1' => [
            'application/json',
        ],
        'ezsignsignatureEditObjectV2' => [
            'application/json',
        ],
        'ezsignsignatureGetEzsignsignatureattachmentV1' => [
            'application/json',
        ],
        'ezsignsignatureGetEzsignsignaturesAutomaticV1' => [
            'application/json',
        ],
        'ezsignsignatureGetObjectV3' => [
            'application/json',
        ],
        'ezsignsignatureSignV1' => [
            'application/json',
        ],
    ];

    /** @var array[] $objEzmaxConfig **/
    public const objEzmaxConfig = [
        'ezsignsignatureCreateObjectV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => true,
        ],
        'ezsignsignatureCreateObjectV2' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => true,
        ],
        'ezsignsignatureCreateObjectV3' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsignsignatureDeleteObjectV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsignsignatureEditObjectV2' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsignsignatureGetEzsignsignatureattachmentV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
                'EzsignSigner',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsignsignatureGetEzsignsignaturesAutomaticV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsignsignatureGetObjectV3' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'ezsignsignatureSignV1' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
                'EzsignSigner',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
    ];
/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation ezsignsignatureCreateObjectV1
     *
     * Create a new Ezsignsignature
     *
     * @param  \eZmaxAPI\Model\EzsignsignatureCreateObjectV1Request[] $ezsignsignatureCreateObjectV1Request ezsignsignatureCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignsignatureCreateObjectV1Response
     * @deprecated
     */
    public function ezsignsignatureCreateObjectV1($ezsignsignatureCreateObjectV1Request, string $contentType = self::contentTypes['ezsignsignatureCreateObjectV1'][0])
    {
        list($response) = $this->ezsignsignatureCreateObjectV1WithHttpInfo($ezsignsignatureCreateObjectV1Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsignsignatureCreateObjectV1WithHttpInfo
     *
     * Create a new Ezsignsignature
     *
     * @param  \eZmaxAPI\Model\EzsignsignatureCreateObjectV1Request[] $ezsignsignatureCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignsignatureCreateObjectV1Response, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function ezsignsignatureCreateObjectV1WithHttpInfo($ezsignsignatureCreateObjectV1Request, string $contentType = self::contentTypes['ezsignsignatureCreateObjectV1'][0])
    {
        $request = $this->ezsignsignatureCreateObjectV1Request($ezsignsignatureCreateObjectV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\eZmaxAPI\Model\EzsignsignatureCreateObjectV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignsignatureCreateObjectV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignsignatureCreateObjectV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignsignatureCreateObjectV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignsignatureCreateObjectV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignsignatureCreateObjectV1Async
     *
     * Create a new Ezsignsignature
     *
     * @param  \eZmaxAPI\Model\EzsignsignatureCreateObjectV1Request[] $ezsignsignatureCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function ezsignsignatureCreateObjectV1Async($ezsignsignatureCreateObjectV1Request, string $contentType = self::contentTypes['ezsignsignatureCreateObjectV1'][0])
    {
        return $this->ezsignsignatureCreateObjectV1AsyncWithHttpInfo($ezsignsignatureCreateObjectV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignsignatureCreateObjectV1AsyncWithHttpInfo
     *
     * Create a new Ezsignsignature
     *
     * @param  \eZmaxAPI\Model\EzsignsignatureCreateObjectV1Request[] $ezsignsignatureCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function ezsignsignatureCreateObjectV1AsyncWithHttpInfo($ezsignsignatureCreateObjectV1Request, string $contentType = self::contentTypes['ezsignsignatureCreateObjectV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignsignatureCreateObjectV1Response';
        $request = $this->ezsignsignatureCreateObjectV1Request($ezsignsignatureCreateObjectV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignsignatureCreateObjectV1'
     *
     * @param  \eZmaxAPI\Model\EzsignsignatureCreateObjectV1Request[] $ezsignsignatureCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function ezsignsignatureCreateObjectV1Request($ezsignsignatureCreateObjectV1Request, string $contentType = self::contentTypes['ezsignsignatureCreateObjectV1'][0])
    {

        // verify the required parameter 'ezsignsignatureCreateObjectV1Request' is set
        if ($ezsignsignatureCreateObjectV1Request === null || (is_array($ezsignsignatureCreateObjectV1Request) && count($ezsignsignatureCreateObjectV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsignsignatureCreateObjectV1Request when calling ezsignsignatureCreateObjectV1'
            );
        }


        $resourcePath = '/1/object/ezsignsignature';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsignsignatureCreateObjectV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsignsignatureCreateObjectV1Request));
            } else {
                $httpBody = $ezsignsignatureCreateObjectV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'POST', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignsignatureCreateObjectV2
     *
     * Create a new Ezsignsignature
     *
     * @param  \eZmaxAPI\Model\EzsignsignatureCreateObjectV2Request $ezsignsignatureCreateObjectV2Request ezsignsignatureCreateObjectV2Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureCreateObjectV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignsignatureCreateObjectV2Response
     * @deprecated
     */
    public function ezsignsignatureCreateObjectV2($ezsignsignatureCreateObjectV2Request, string $contentType = self::contentTypes['ezsignsignatureCreateObjectV2'][0])
    {
        list($response) = $this->ezsignsignatureCreateObjectV2WithHttpInfo($ezsignsignatureCreateObjectV2Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsignsignatureCreateObjectV2WithHttpInfo
     *
     * Create a new Ezsignsignature
     *
     * @param  \eZmaxAPI\Model\EzsignsignatureCreateObjectV2Request $ezsignsignatureCreateObjectV2Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureCreateObjectV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignsignatureCreateObjectV2Response, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function ezsignsignatureCreateObjectV2WithHttpInfo($ezsignsignatureCreateObjectV2Request, string $contentType = self::contentTypes['ezsignsignatureCreateObjectV2'][0])
    {
        $request = $this->ezsignsignatureCreateObjectV2Request($ezsignsignatureCreateObjectV2Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\eZmaxAPI\Model\EzsignsignatureCreateObjectV2Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignsignatureCreateObjectV2Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignsignatureCreateObjectV2Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignsignatureCreateObjectV2Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignsignatureCreateObjectV2Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignsignatureCreateObjectV2Async
     *
     * Create a new Ezsignsignature
     *
     * @param  \eZmaxAPI\Model\EzsignsignatureCreateObjectV2Request $ezsignsignatureCreateObjectV2Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureCreateObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function ezsignsignatureCreateObjectV2Async($ezsignsignatureCreateObjectV2Request, string $contentType = self::contentTypes['ezsignsignatureCreateObjectV2'][0])
    {
        return $this->ezsignsignatureCreateObjectV2AsyncWithHttpInfo($ezsignsignatureCreateObjectV2Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignsignatureCreateObjectV2AsyncWithHttpInfo
     *
     * Create a new Ezsignsignature
     *
     * @param  \eZmaxAPI\Model\EzsignsignatureCreateObjectV2Request $ezsignsignatureCreateObjectV2Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureCreateObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function ezsignsignatureCreateObjectV2AsyncWithHttpInfo($ezsignsignatureCreateObjectV2Request, string $contentType = self::contentTypes['ezsignsignatureCreateObjectV2'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignsignatureCreateObjectV2Response';
        $request = $this->ezsignsignatureCreateObjectV2Request($ezsignsignatureCreateObjectV2Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignsignatureCreateObjectV2'
     *
     * @param  \eZmaxAPI\Model\EzsignsignatureCreateObjectV2Request $ezsignsignatureCreateObjectV2Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureCreateObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function ezsignsignatureCreateObjectV2Request($ezsignsignatureCreateObjectV2Request, string $contentType = self::contentTypes['ezsignsignatureCreateObjectV2'][0])
    {

        // verify the required parameter 'ezsignsignatureCreateObjectV2Request' is set
        if ($ezsignsignatureCreateObjectV2Request === null || (is_array($ezsignsignatureCreateObjectV2Request) && count($ezsignsignatureCreateObjectV2Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsignsignatureCreateObjectV2Request when calling ezsignsignatureCreateObjectV2'
            );
        }


        $resourcePath = '/2/object/ezsignsignature';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsignsignatureCreateObjectV2Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsignsignatureCreateObjectV2Request));
            } else {
                $httpBody = $ezsignsignatureCreateObjectV2Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'POST', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignsignatureCreateObjectV3
     *
     * Create a new Ezsignsignature
     *
     * @param  \eZmaxAPI\Model\EzsignsignatureCreateObjectV3Request $ezsignsignatureCreateObjectV3Request ezsignsignatureCreateObjectV3Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureCreateObjectV3'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignsignatureCreateObjectV3Response
     */
    public function ezsignsignatureCreateObjectV3($ezsignsignatureCreateObjectV3Request, string $contentType = self::contentTypes['ezsignsignatureCreateObjectV3'][0])
    {
        list($response) = $this->ezsignsignatureCreateObjectV3WithHttpInfo($ezsignsignatureCreateObjectV3Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsignsignatureCreateObjectV3WithHttpInfo
     *
     * Create a new Ezsignsignature
     *
     * @param  \eZmaxAPI\Model\EzsignsignatureCreateObjectV3Request $ezsignsignatureCreateObjectV3Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureCreateObjectV3'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignsignatureCreateObjectV3Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsignsignatureCreateObjectV3WithHttpInfo($ezsignsignatureCreateObjectV3Request, string $contentType = self::contentTypes['ezsignsignatureCreateObjectV3'][0])
    {
        $request = $this->ezsignsignatureCreateObjectV3Request($ezsignsignatureCreateObjectV3Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\eZmaxAPI\Model\EzsignsignatureCreateObjectV3Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignsignatureCreateObjectV3Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignsignatureCreateObjectV3Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignsignatureCreateObjectV3Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignsignatureCreateObjectV3Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignsignatureCreateObjectV3Async
     *
     * Create a new Ezsignsignature
     *
     * @param  \eZmaxAPI\Model\EzsignsignatureCreateObjectV3Request $ezsignsignatureCreateObjectV3Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureCreateObjectV3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignsignatureCreateObjectV3Async($ezsignsignatureCreateObjectV3Request, string $contentType = self::contentTypes['ezsignsignatureCreateObjectV3'][0])
    {
        return $this->ezsignsignatureCreateObjectV3AsyncWithHttpInfo($ezsignsignatureCreateObjectV3Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignsignatureCreateObjectV3AsyncWithHttpInfo
     *
     * Create a new Ezsignsignature
     *
     * @param  \eZmaxAPI\Model\EzsignsignatureCreateObjectV3Request $ezsignsignatureCreateObjectV3Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureCreateObjectV3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignsignatureCreateObjectV3AsyncWithHttpInfo($ezsignsignatureCreateObjectV3Request, string $contentType = self::contentTypes['ezsignsignatureCreateObjectV3'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignsignatureCreateObjectV3Response';
        $request = $this->ezsignsignatureCreateObjectV3Request($ezsignsignatureCreateObjectV3Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignsignatureCreateObjectV3'
     *
     * @param  \eZmaxAPI\Model\EzsignsignatureCreateObjectV3Request $ezsignsignatureCreateObjectV3Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureCreateObjectV3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsignsignatureCreateObjectV3Request($ezsignsignatureCreateObjectV3Request, string $contentType = self::contentTypes['ezsignsignatureCreateObjectV3'][0])
    {

        // verify the required parameter 'ezsignsignatureCreateObjectV3Request' is set
        if ($ezsignsignatureCreateObjectV3Request === null || (is_array($ezsignsignatureCreateObjectV3Request) && count($ezsignsignatureCreateObjectV3Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsignsignatureCreateObjectV3Request when calling ezsignsignatureCreateObjectV3'
            );
        }


        $resourcePath = '/3/object/ezsignsignature';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsignsignatureCreateObjectV3Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsignsignatureCreateObjectV3Request));
            } else {
                $httpBody = $ezsignsignatureCreateObjectV3Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'POST', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignsignatureDeleteObjectV1
     *
     * Delete an existing Ezsignsignature
     *
     * @param  int $pkiEzsignsignatureID pkiEzsignsignatureID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureDeleteObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignsignatureDeleteObjectV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsignsignatureDeleteObjectV1($pkiEzsignsignatureID, string $contentType = self::contentTypes['ezsignsignatureDeleteObjectV1'][0])
    {
        list($response) = $this->ezsignsignatureDeleteObjectV1WithHttpInfo($pkiEzsignsignatureID, $contentType);
        return $response;
    }

    /**
     * Operation ezsignsignatureDeleteObjectV1WithHttpInfo
     *
     * Delete an existing Ezsignsignature
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureDeleteObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignsignatureDeleteObjectV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsignsignatureDeleteObjectV1WithHttpInfo($pkiEzsignsignatureID, string $contentType = self::contentTypes['ezsignsignatureDeleteObjectV1'][0])
    {
        $request = $this->ezsignsignatureDeleteObjectV1Request($pkiEzsignsignatureID, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsignsignatureDeleteObjectV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignsignatureDeleteObjectV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignsignatureDeleteObjectV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignsignatureDeleteObjectV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignsignatureDeleteObjectV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignsignatureDeleteObjectV1Async
     *
     * Delete an existing Ezsignsignature
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureDeleteObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignsignatureDeleteObjectV1Async($pkiEzsignsignatureID, string $contentType = self::contentTypes['ezsignsignatureDeleteObjectV1'][0])
    {
        return $this->ezsignsignatureDeleteObjectV1AsyncWithHttpInfo($pkiEzsignsignatureID, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignsignatureDeleteObjectV1AsyncWithHttpInfo
     *
     * Delete an existing Ezsignsignature
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureDeleteObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignsignatureDeleteObjectV1AsyncWithHttpInfo($pkiEzsignsignatureID, string $contentType = self::contentTypes['ezsignsignatureDeleteObjectV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignsignatureDeleteObjectV1Response';
        $request = $this->ezsignsignatureDeleteObjectV1Request($pkiEzsignsignatureID, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignsignatureDeleteObjectV1'
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureDeleteObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsignsignatureDeleteObjectV1Request($pkiEzsignsignatureID, string $contentType = self::contentTypes['ezsignsignatureDeleteObjectV1'][0])
    {

        // verify the required parameter 'pkiEzsignsignatureID' is set
        if ($pkiEzsignsignatureID === null || (is_array($pkiEzsignsignatureID) && count($pkiEzsignsignatureID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsignsignatureID when calling ezsignsignatureDeleteObjectV1'
            );
        }
        if ($pkiEzsignsignatureID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsignsignatureID" when calling ObjectEzsignsignatureApi.ezsignsignatureDeleteObjectV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsignsignatureID)?'null':'"'.$pkiEzsignsignatureID.'"').' for "pkiEzsignsignatureID" when calling ObjectEzsignsignatureApi.ezsignsignatureDeleteObjectV1, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/1/object/ezsignsignature/{pkiEzsignsignatureID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsignsignatureID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsignsignatureID' . '}',
                ObjectSerializer::toPathValue($pkiEzsignsignatureID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'DELETE', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignsignatureEditObjectV2
     *
     * Edit an existing Ezsignsignature
     *
     * @param  int $pkiEzsignsignatureID pkiEzsignsignatureID (required)
     * @param  \eZmaxAPI\Model\EzsignsignatureEditObjectV2Request $ezsignsignatureEditObjectV2Request ezsignsignatureEditObjectV2Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureEditObjectV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignsignatureEditObjectV2Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsignsignatureEditObjectV2($pkiEzsignsignatureID, $ezsignsignatureEditObjectV2Request, string $contentType = self::contentTypes['ezsignsignatureEditObjectV2'][0])
    {
        list($response) = $this->ezsignsignatureEditObjectV2WithHttpInfo($pkiEzsignsignatureID, $ezsignsignatureEditObjectV2Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsignsignatureEditObjectV2WithHttpInfo
     *
     * Edit an existing Ezsignsignature
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  \eZmaxAPI\Model\EzsignsignatureEditObjectV2Request $ezsignsignatureEditObjectV2Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureEditObjectV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignsignatureEditObjectV2Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsignsignatureEditObjectV2WithHttpInfo($pkiEzsignsignatureID, $ezsignsignatureEditObjectV2Request, string $contentType = self::contentTypes['ezsignsignatureEditObjectV2'][0])
    {
        $request = $this->ezsignsignatureEditObjectV2Request($pkiEzsignsignatureID, $ezsignsignatureEditObjectV2Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsignsignatureEditObjectV2Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignsignatureEditObjectV2Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignsignatureEditObjectV2Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignsignatureEditObjectV2Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignsignatureEditObjectV2Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignsignatureEditObjectV2Async
     *
     * Edit an existing Ezsignsignature
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  \eZmaxAPI\Model\EzsignsignatureEditObjectV2Request $ezsignsignatureEditObjectV2Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureEditObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignsignatureEditObjectV2Async($pkiEzsignsignatureID, $ezsignsignatureEditObjectV2Request, string $contentType = self::contentTypes['ezsignsignatureEditObjectV2'][0])
    {
        return $this->ezsignsignatureEditObjectV2AsyncWithHttpInfo($pkiEzsignsignatureID, $ezsignsignatureEditObjectV2Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignsignatureEditObjectV2AsyncWithHttpInfo
     *
     * Edit an existing Ezsignsignature
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  \eZmaxAPI\Model\EzsignsignatureEditObjectV2Request $ezsignsignatureEditObjectV2Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureEditObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignsignatureEditObjectV2AsyncWithHttpInfo($pkiEzsignsignatureID, $ezsignsignatureEditObjectV2Request, string $contentType = self::contentTypes['ezsignsignatureEditObjectV2'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignsignatureEditObjectV2Response';
        $request = $this->ezsignsignatureEditObjectV2Request($pkiEzsignsignatureID, $ezsignsignatureEditObjectV2Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignsignatureEditObjectV2'
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  \eZmaxAPI\Model\EzsignsignatureEditObjectV2Request $ezsignsignatureEditObjectV2Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureEditObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsignsignatureEditObjectV2Request($pkiEzsignsignatureID, $ezsignsignatureEditObjectV2Request, string $contentType = self::contentTypes['ezsignsignatureEditObjectV2'][0])
    {

        // verify the required parameter 'pkiEzsignsignatureID' is set
        if ($pkiEzsignsignatureID === null || (is_array($pkiEzsignsignatureID) && count($pkiEzsignsignatureID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsignsignatureID when calling ezsignsignatureEditObjectV2'
            );
        }
        if ($pkiEzsignsignatureID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsignsignatureID" when calling ObjectEzsignsignatureApi.ezsignsignatureEditObjectV2, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsignsignatureID)?'null':'"'.$pkiEzsignsignatureID.'"').' for "pkiEzsignsignatureID" when calling ObjectEzsignsignatureApi.ezsignsignatureEditObjectV2, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'ezsignsignatureEditObjectV2Request' is set
        if ($ezsignsignatureEditObjectV2Request === null || (is_array($ezsignsignatureEditObjectV2Request) && count($ezsignsignatureEditObjectV2Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsignsignatureEditObjectV2Request when calling ezsignsignatureEditObjectV2'
            );
        }


        $resourcePath = '/2/object/ezsignsignature/{pkiEzsignsignatureID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsignsignatureID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsignsignatureID' . '}',
                ObjectSerializer::toPathValue($pkiEzsignsignatureID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsignsignatureEditObjectV2Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsignsignatureEditObjectV2Request));
            } else {
                $httpBody = $ezsignsignatureEditObjectV2Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'PUT', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignsignatureGetEzsignsignatureattachmentV1
     *
     * Retrieve an existing Ezsignsignature&#39;s Ezsignsignatureattachments
     *
     * @param  int $pkiEzsignsignatureID pkiEzsignsignatureID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureGetEzsignsignatureattachmentV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignsignatureGetEzsignsignatureattachmentV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsignsignatureGetEzsignsignatureattachmentV1($pkiEzsignsignatureID, string $contentType = self::contentTypes['ezsignsignatureGetEzsignsignatureattachmentV1'][0])
    {
        list($response) = $this->ezsignsignatureGetEzsignsignatureattachmentV1WithHttpInfo($pkiEzsignsignatureID, $contentType);
        return $response;
    }

    /**
     * Operation ezsignsignatureGetEzsignsignatureattachmentV1WithHttpInfo
     *
     * Retrieve an existing Ezsignsignature&#39;s Ezsignsignatureattachments
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureGetEzsignsignatureattachmentV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignsignatureGetEzsignsignatureattachmentV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsignsignatureGetEzsignsignatureattachmentV1WithHttpInfo($pkiEzsignsignatureID, string $contentType = self::contentTypes['ezsignsignatureGetEzsignsignatureattachmentV1'][0])
    {
        $request = $this->ezsignsignatureGetEzsignsignatureattachmentV1Request($pkiEzsignsignatureID, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsignsignatureGetEzsignsignatureattachmentV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignsignatureGetEzsignsignatureattachmentV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignsignatureGetEzsignsignatureattachmentV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignsignatureGetEzsignsignatureattachmentV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignsignatureGetEzsignsignatureattachmentV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignsignatureGetEzsignsignatureattachmentV1Async
     *
     * Retrieve an existing Ezsignsignature&#39;s Ezsignsignatureattachments
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureGetEzsignsignatureattachmentV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignsignatureGetEzsignsignatureattachmentV1Async($pkiEzsignsignatureID, string $contentType = self::contentTypes['ezsignsignatureGetEzsignsignatureattachmentV1'][0])
    {
        return $this->ezsignsignatureGetEzsignsignatureattachmentV1AsyncWithHttpInfo($pkiEzsignsignatureID, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignsignatureGetEzsignsignatureattachmentV1AsyncWithHttpInfo
     *
     * Retrieve an existing Ezsignsignature&#39;s Ezsignsignatureattachments
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureGetEzsignsignatureattachmentV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignsignatureGetEzsignsignatureattachmentV1AsyncWithHttpInfo($pkiEzsignsignatureID, string $contentType = self::contentTypes['ezsignsignatureGetEzsignsignatureattachmentV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignsignatureGetEzsignsignatureattachmentV1Response';
        $request = $this->ezsignsignatureGetEzsignsignatureattachmentV1Request($pkiEzsignsignatureID, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignsignatureGetEzsignsignatureattachmentV1'
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureGetEzsignsignatureattachmentV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsignsignatureGetEzsignsignatureattachmentV1Request($pkiEzsignsignatureID, string $contentType = self::contentTypes['ezsignsignatureGetEzsignsignatureattachmentV1'][0])
    {

        // verify the required parameter 'pkiEzsignsignatureID' is set
        if ($pkiEzsignsignatureID === null || (is_array($pkiEzsignsignatureID) && count($pkiEzsignsignatureID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsignsignatureID when calling ezsignsignatureGetEzsignsignatureattachmentV1'
            );
        }
        if ($pkiEzsignsignatureID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsignsignatureID" when calling ObjectEzsignsignatureApi.ezsignsignatureGetEzsignsignatureattachmentV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsignsignatureID)?'null':'"'.$pkiEzsignsignatureID.'"').' for "pkiEzsignsignatureID" when calling ObjectEzsignsignatureApi.ezsignsignatureGetEzsignsignatureattachmentV1, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/1/object/ezsignsignature/{pkiEzsignsignatureID}/getEzsignsignatureattachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsignsignatureID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsignsignatureID' . '}',
                ObjectSerializer::toPathValue($pkiEzsignsignatureID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignsignatureGetEzsignsignaturesAutomaticV1
     *
     * Retrieve all automatic Ezsignsignatures
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureGetEzsignsignaturesAutomaticV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignsignatureGetEzsignsignaturesAutomaticV1Response
     */
    public function ezsignsignatureGetEzsignsignaturesAutomaticV1(string $contentType = self::contentTypes['ezsignsignatureGetEzsignsignaturesAutomaticV1'][0])
    {
        list($response) = $this->ezsignsignatureGetEzsignsignaturesAutomaticV1WithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation ezsignsignatureGetEzsignsignaturesAutomaticV1WithHttpInfo
     *
     * Retrieve all automatic Ezsignsignatures
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureGetEzsignsignaturesAutomaticV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignsignatureGetEzsignsignaturesAutomaticV1Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsignsignatureGetEzsignsignaturesAutomaticV1WithHttpInfo(string $contentType = self::contentTypes['ezsignsignatureGetEzsignsignaturesAutomaticV1'][0])
    {
        $request = $this->ezsignsignatureGetEzsignsignaturesAutomaticV1Request($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsignsignatureGetEzsignsignaturesAutomaticV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignsignatureGetEzsignsignaturesAutomaticV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignsignatureGetEzsignsignaturesAutomaticV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignsignatureGetEzsignsignaturesAutomaticV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignsignatureGetEzsignsignaturesAutomaticV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignsignatureGetEzsignsignaturesAutomaticV1Async
     *
     * Retrieve all automatic Ezsignsignatures
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureGetEzsignsignaturesAutomaticV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignsignatureGetEzsignsignaturesAutomaticV1Async(string $contentType = self::contentTypes['ezsignsignatureGetEzsignsignaturesAutomaticV1'][0])
    {
        return $this->ezsignsignatureGetEzsignsignaturesAutomaticV1AsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignsignatureGetEzsignsignaturesAutomaticV1AsyncWithHttpInfo
     *
     * Retrieve all automatic Ezsignsignatures
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureGetEzsignsignaturesAutomaticV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignsignatureGetEzsignsignaturesAutomaticV1AsyncWithHttpInfo(string $contentType = self::contentTypes['ezsignsignatureGetEzsignsignaturesAutomaticV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignsignatureGetEzsignsignaturesAutomaticV1Response';
        $request = $this->ezsignsignatureGetEzsignsignaturesAutomaticV1Request($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignsignatureGetEzsignsignaturesAutomaticV1'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureGetEzsignsignaturesAutomaticV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsignsignatureGetEzsignsignaturesAutomaticV1Request(string $contentType = self::contentTypes['ezsignsignatureGetEzsignsignaturesAutomaticV1'][0])
    {


        $resourcePath = '/1/object/ezsignsignature/getEzsignsignaturesAutomatic';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignsignatureGetObjectV3
     *
     * Retrieve an existing Ezsignsignature
     *
     * @param  int $pkiEzsignsignatureID pkiEzsignsignatureID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureGetObjectV3'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignsignatureGetObjectV3Response|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsignsignatureGetObjectV3($pkiEzsignsignatureID, string $contentType = self::contentTypes['ezsignsignatureGetObjectV3'][0])
    {
        list($response) = $this->ezsignsignatureGetObjectV3WithHttpInfo($pkiEzsignsignatureID, $contentType);
        return $response;
    }

    /**
     * Operation ezsignsignatureGetObjectV3WithHttpInfo
     *
     * Retrieve an existing Ezsignsignature
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureGetObjectV3'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignsignatureGetObjectV3Response|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsignsignatureGetObjectV3WithHttpInfo($pkiEzsignsignatureID, string $contentType = self::contentTypes['ezsignsignatureGetObjectV3'][0])
    {
        $request = $this->ezsignsignatureGetObjectV3Request($pkiEzsignsignatureID, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsignsignatureGetObjectV3Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignsignatureGetObjectV3Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignsignatureGetObjectV3Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignsignatureGetObjectV3Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignsignatureGetObjectV3Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignsignatureGetObjectV3Async
     *
     * Retrieve an existing Ezsignsignature
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureGetObjectV3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignsignatureGetObjectV3Async($pkiEzsignsignatureID, string $contentType = self::contentTypes['ezsignsignatureGetObjectV3'][0])
    {
        return $this->ezsignsignatureGetObjectV3AsyncWithHttpInfo($pkiEzsignsignatureID, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignsignatureGetObjectV3AsyncWithHttpInfo
     *
     * Retrieve an existing Ezsignsignature
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureGetObjectV3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignsignatureGetObjectV3AsyncWithHttpInfo($pkiEzsignsignatureID, string $contentType = self::contentTypes['ezsignsignatureGetObjectV3'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignsignatureGetObjectV3Response';
        $request = $this->ezsignsignatureGetObjectV3Request($pkiEzsignsignatureID, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignsignatureGetObjectV3'
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureGetObjectV3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsignsignatureGetObjectV3Request($pkiEzsignsignatureID, string $contentType = self::contentTypes['ezsignsignatureGetObjectV3'][0])
    {

        // verify the required parameter 'pkiEzsignsignatureID' is set
        if ($pkiEzsignsignatureID === null || (is_array($pkiEzsignsignatureID) && count($pkiEzsignsignatureID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsignsignatureID when calling ezsignsignatureGetObjectV3'
            );
        }
        if ($pkiEzsignsignatureID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsignsignatureID" when calling ObjectEzsignsignatureApi.ezsignsignatureGetObjectV3, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsignsignatureID)?'null':'"'.$pkiEzsignsignatureID.'"').' for "pkiEzsignsignatureID" when calling ObjectEzsignsignatureApi.ezsignsignatureGetObjectV3, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/3/object/ezsignsignature/{pkiEzsignsignatureID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsignsignatureID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsignsignatureID' . '}',
                ObjectSerializer::toPathValue($pkiEzsignsignatureID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ezsignsignatureSignV1
     *
     * Sign the Ezsignsignature
     *
     * @param  int $pkiEzsignsignatureID pkiEzsignsignatureID (required)
     * @param  \eZmaxAPI\Model\EzsignsignatureSignV1Request $ezsignsignatureSignV1Request ezsignsignatureSignV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureSignV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\EzsignsignatureSignV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function ezsignsignatureSignV1($pkiEzsignsignatureID, $ezsignsignatureSignV1Request, string $contentType = self::contentTypes['ezsignsignatureSignV1'][0])
    {
        list($response) = $this->ezsignsignatureSignV1WithHttpInfo($pkiEzsignsignatureID, $ezsignsignatureSignV1Request, $contentType);
        return $response;
    }

    /**
     * Operation ezsignsignatureSignV1WithHttpInfo
     *
     * Sign the Ezsignsignature
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  \eZmaxAPI\Model\EzsignsignatureSignV1Request $ezsignsignatureSignV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureSignV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\EzsignsignatureSignV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function ezsignsignatureSignV1WithHttpInfo($pkiEzsignsignatureID, $ezsignsignatureSignV1Request, string $contentType = self::contentTypes['ezsignsignatureSignV1'][0])
    {
        $request = $this->ezsignsignatureSignV1Request($pkiEzsignsignatureID, $ezsignsignatureSignV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\EzsignsignatureSignV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\EzsignsignatureSignV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\EzsignsignatureSignV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\EzsignsignatureSignV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\EzsignsignatureSignV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ezsignsignatureSignV1Async
     *
     * Sign the Ezsignsignature
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  \eZmaxAPI\Model\EzsignsignatureSignV1Request $ezsignsignatureSignV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureSignV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignsignatureSignV1Async($pkiEzsignsignatureID, $ezsignsignatureSignV1Request, string $contentType = self::contentTypes['ezsignsignatureSignV1'][0])
    {
        return $this->ezsignsignatureSignV1AsyncWithHttpInfo($pkiEzsignsignatureID, $ezsignsignatureSignV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ezsignsignatureSignV1AsyncWithHttpInfo
     *
     * Sign the Ezsignsignature
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  \eZmaxAPI\Model\EzsignsignatureSignV1Request $ezsignsignatureSignV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureSignV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ezsignsignatureSignV1AsyncWithHttpInfo($pkiEzsignsignatureID, $ezsignsignatureSignV1Request, string $contentType = self::contentTypes['ezsignsignatureSignV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\EzsignsignatureSignV1Response';
        $request = $this->ezsignsignatureSignV1Request($pkiEzsignsignatureID, $ezsignsignatureSignV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ezsignsignatureSignV1'
     *
     * @param  int $pkiEzsignsignatureID (required)
     * @param  \eZmaxAPI\Model\EzsignsignatureSignV1Request $ezsignsignatureSignV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ezsignsignatureSignV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ezsignsignatureSignV1Request($pkiEzsignsignatureID, $ezsignsignatureSignV1Request, string $contentType = self::contentTypes['ezsignsignatureSignV1'][0])
    {

        // verify the required parameter 'pkiEzsignsignatureID' is set
        if ($pkiEzsignsignatureID === null || (is_array($pkiEzsignsignatureID) && count($pkiEzsignsignatureID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiEzsignsignatureID when calling ezsignsignatureSignV1'
            );
        }
        if ($pkiEzsignsignatureID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiEzsignsignatureID" when calling ObjectEzsignsignatureApi.ezsignsignatureSignV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiEzsignsignatureID)?'null':'"'.$pkiEzsignsignatureID.'"').' for "pkiEzsignsignatureID" when calling ObjectEzsignsignatureApi.ezsignsignatureSignV1, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'ezsignsignatureSignV1Request' is set
        if ($ezsignsignatureSignV1Request === null || (is_array($ezsignsignatureSignV1Request) && count($ezsignsignatureSignV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ezsignsignatureSignV1Request when calling ezsignsignatureSignV1'
            );
        }


        $resourcePath = '/1/object/ezsignsignature/{pkiEzsignsignatureID}/sign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiEzsignsignatureID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiEzsignsignatureID' . '}',
                ObjectSerializer::toPathValue($pkiEzsignsignatureID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ezsignsignatureSignV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ezsignsignatureSignV1Request));
            } else {
                $httpBody = $ezsignsignatureSignV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'POST', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
