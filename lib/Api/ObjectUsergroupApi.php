<?php
/**
 * ObjectUsergroupApi
 * PHP version 7.4
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eZmaxAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use eZmaxAPI\ApiException;
use eZmaxAPI\Configuration;
use eZmaxAPI\HeaderSelector;
use eZmaxAPI\ObjectSerializer;
use eZmaxAPI\RequestSignature;

/**
 * ObjectUsergroupApi Class Doc Comment
 *
 * @category Class
 * @package  eZmaxAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ObjectUsergroupApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'usergroupCreateObjectV1' => [
            'application/json',
        ],
        'usergroupEditObjectV1' => [
            'application/json',
        ],
        'usergroupEditPermissionsV1' => [
            'application/json',
        ],
        'usergroupEditUsergroupdelegationsV1' => [
            'application/json',
        ],
        'usergroupEditUsergroupmembershipsV1' => [
            'application/json',
        ],
        'usergroupGetAutocompleteV2' => [
            'application/json',
        ],
        'usergroupGetListV1' => [
            'application/json',
        ],
        'usergroupGetObjectV2' => [
            'application/json',
        ],
        'usergroupGetPermissionsV1' => [
            'application/json',
        ],
        'usergroupGetUsergroupdelegationsV1' => [
            'application/json',
        ],
        'usergroupGetUsergroupmembershipsV1' => [
            'application/json',
        ],
    ];

    /** @var array[] $objEzmaxConfig **/
    public const objEzmaxConfig = [
        'usergroupCreateObjectV1' => [
            'permissions' => [
                'Management_Usergroup',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'usergroupEditObjectV1' => [
            'permissions' => [
                'Management_Usergroup',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'usergroupEditPermissionsV1' => [
            'permissions' => [
                'Management_Usergroup',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'usergroupEditUsergroupdelegationsV1' => [
            'permissions' => [
                'Management_Usergroup',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'usergroupEditUsergroupmembershipsV1' => [
            'permissions' => [
                'Management_Usergroup',
                'Management_UsergroupDelegated',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'usergroupGetAutocompleteV2' => [
            'permissions' => [
                'All',
            ],
            'usertypeextra' => [
                'AgentBroker',
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'usergroupGetListV1' => [
            'permissions' => [
                'Management_Usergroup',
                'Management_UsergroupDelegated',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'usergroupGetObjectV2' => [
            'permissions' => [
                'Management_Usergroup',
                'Management_UsergroupDelegated',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'usergroupGetPermissionsV1' => [
            'permissions' => [
                'Management_Usergroup',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'usergroupGetUsergroupdelegationsV1' => [
            'permissions' => [
                'Management_Usergroup',
                'Management_UsergroupDelegated',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
        'usergroupGetUsergroupmembershipsV1' => [
            'permissions' => [
                'Management_Usergroup',
                'Management_UsergroupDelegated',
            ],
            'usertypeextra' => [
            ],
            'authorizationsources' => [
                'Authorization',
            ],
            'deprecated' => false,
        ],
    ];
/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation usergroupCreateObjectV1
     *
     * Create a new Usergroup
     *
     * @param  \eZmaxAPI\Model\UsergroupCreateObjectV1Request $usergroupCreateObjectV1Request usergroupCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\UsergroupCreateObjectV1Response
     */
    public function usergroupCreateObjectV1($usergroupCreateObjectV1Request, string $contentType = self::contentTypes['usergroupCreateObjectV1'][0])
    {
        list($response) = $this->usergroupCreateObjectV1WithHttpInfo($usergroupCreateObjectV1Request, $contentType);
        return $response;
    }

    /**
     * Operation usergroupCreateObjectV1WithHttpInfo
     *
     * Create a new Usergroup
     *
     * @param  \eZmaxAPI\Model\UsergroupCreateObjectV1Request $usergroupCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\UsergroupCreateObjectV1Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupCreateObjectV1WithHttpInfo($usergroupCreateObjectV1Request, string $contentType = self::contentTypes['usergroupCreateObjectV1'][0])
    {
        $request = $this->usergroupCreateObjectV1Request($usergroupCreateObjectV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\eZmaxAPI\Model\UsergroupCreateObjectV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\UsergroupCreateObjectV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\UsergroupCreateObjectV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\UsergroupCreateObjectV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\UsergroupCreateObjectV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupCreateObjectV1Async
     *
     * Create a new Usergroup
     *
     * @param  \eZmaxAPI\Model\UsergroupCreateObjectV1Request $usergroupCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupCreateObjectV1Async($usergroupCreateObjectV1Request, string $contentType = self::contentTypes['usergroupCreateObjectV1'][0])
    {
        return $this->usergroupCreateObjectV1AsyncWithHttpInfo($usergroupCreateObjectV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupCreateObjectV1AsyncWithHttpInfo
     *
     * Create a new Usergroup
     *
     * @param  \eZmaxAPI\Model\UsergroupCreateObjectV1Request $usergroupCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupCreateObjectV1AsyncWithHttpInfo($usergroupCreateObjectV1Request, string $contentType = self::contentTypes['usergroupCreateObjectV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\UsergroupCreateObjectV1Response';
        $request = $this->usergroupCreateObjectV1Request($usergroupCreateObjectV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupCreateObjectV1'
     *
     * @param  \eZmaxAPI\Model\UsergroupCreateObjectV1Request $usergroupCreateObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupCreateObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupCreateObjectV1Request($usergroupCreateObjectV1Request, string $contentType = self::contentTypes['usergroupCreateObjectV1'][0])
    {

        // verify the required parameter 'usergroupCreateObjectV1Request' is set
        if ($usergroupCreateObjectV1Request === null || (is_array($usergroupCreateObjectV1Request) && count($usergroupCreateObjectV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroupCreateObjectV1Request when calling usergroupCreateObjectV1'
            );
        }


        $resourcePath = '/1/object/usergroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($usergroupCreateObjectV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($usergroupCreateObjectV1Request));
            } else {
                $httpBody = $usergroupCreateObjectV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'POST', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usergroupEditObjectV1
     *
     * Edit an existing Usergroup
     *
     * @param  int $pkiUsergroupID pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditObjectV1Request $usergroupEditObjectV1Request usergroupEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\UsergroupEditObjectV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function usergroupEditObjectV1($pkiUsergroupID, $usergroupEditObjectV1Request, string $contentType = self::contentTypes['usergroupEditObjectV1'][0])
    {
        list($response) = $this->usergroupEditObjectV1WithHttpInfo($pkiUsergroupID, $usergroupEditObjectV1Request, $contentType);
        return $response;
    }

    /**
     * Operation usergroupEditObjectV1WithHttpInfo
     *
     * Edit an existing Usergroup
     *
     * @param  int $pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditObjectV1Request $usergroupEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditObjectV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\UsergroupEditObjectV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupEditObjectV1WithHttpInfo($pkiUsergroupID, $usergroupEditObjectV1Request, string $contentType = self::contentTypes['usergroupEditObjectV1'][0])
    {
        $request = $this->usergroupEditObjectV1Request($pkiUsergroupID, $usergroupEditObjectV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\UsergroupEditObjectV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\UsergroupEditObjectV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\UsergroupEditObjectV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\UsergroupEditObjectV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\UsergroupEditObjectV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupEditObjectV1Async
     *
     * Edit an existing Usergroup
     *
     * @param  int $pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditObjectV1Request $usergroupEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupEditObjectV1Async($pkiUsergroupID, $usergroupEditObjectV1Request, string $contentType = self::contentTypes['usergroupEditObjectV1'][0])
    {
        return $this->usergroupEditObjectV1AsyncWithHttpInfo($pkiUsergroupID, $usergroupEditObjectV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupEditObjectV1AsyncWithHttpInfo
     *
     * Edit an existing Usergroup
     *
     * @param  int $pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditObjectV1Request $usergroupEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupEditObjectV1AsyncWithHttpInfo($pkiUsergroupID, $usergroupEditObjectV1Request, string $contentType = self::contentTypes['usergroupEditObjectV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\UsergroupEditObjectV1Response';
        $request = $this->usergroupEditObjectV1Request($pkiUsergroupID, $usergroupEditObjectV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupEditObjectV1'
     *
     * @param  int $pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditObjectV1Request $usergroupEditObjectV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditObjectV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupEditObjectV1Request($pkiUsergroupID, $usergroupEditObjectV1Request, string $contentType = self::contentTypes['usergroupEditObjectV1'][0])
    {

        // verify the required parameter 'pkiUsergroupID' is set
        if ($pkiUsergroupID === null || (is_array($pkiUsergroupID) && count($pkiUsergroupID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiUsergroupID when calling usergroupEditObjectV1'
            );
        }
        if ($pkiUsergroupID > 255) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiUsergroupID" when calling ObjectUsergroupApi.usergroupEditObjectV1, must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiUsergroupID)?'null':'"'.$pkiUsergroupID.'"').' for "pkiUsergroupID" when calling ObjectUsergroupApi.usergroupEditObjectV1, must be smaller than or equal to 255.');
        }
        if ($pkiUsergroupID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiUsergroupID" when calling ObjectUsergroupApi.usergroupEditObjectV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiUsergroupID)?'null':'"'.$pkiUsergroupID.'"').' for "pkiUsergroupID" when calling ObjectUsergroupApi.usergroupEditObjectV1, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'usergroupEditObjectV1Request' is set
        if ($usergroupEditObjectV1Request === null || (is_array($usergroupEditObjectV1Request) && count($usergroupEditObjectV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroupEditObjectV1Request when calling usergroupEditObjectV1'
            );
        }


        $resourcePath = '/1/object/usergroup/{pkiUsergroupID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiUsergroupID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiUsergroupID' . '}',
                ObjectSerializer::toPathValue($pkiUsergroupID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($usergroupEditObjectV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($usergroupEditObjectV1Request));
            } else {
                $httpBody = $usergroupEditObjectV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'PUT', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usergroupEditPermissionsV1
     *
     * Edit multiple Permissions
     *
     * @param  int $pkiUsergroupID pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditPermissionsV1Request $usergroupEditPermissionsV1Request usergroupEditPermissionsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditPermissionsV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\UsergroupEditPermissionsV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function usergroupEditPermissionsV1($pkiUsergroupID, $usergroupEditPermissionsV1Request, string $contentType = self::contentTypes['usergroupEditPermissionsV1'][0])
    {
        list($response) = $this->usergroupEditPermissionsV1WithHttpInfo($pkiUsergroupID, $usergroupEditPermissionsV1Request, $contentType);
        return $response;
    }

    /**
     * Operation usergroupEditPermissionsV1WithHttpInfo
     *
     * Edit multiple Permissions
     *
     * @param  int $pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditPermissionsV1Request $usergroupEditPermissionsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditPermissionsV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\UsergroupEditPermissionsV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupEditPermissionsV1WithHttpInfo($pkiUsergroupID, $usergroupEditPermissionsV1Request, string $contentType = self::contentTypes['usergroupEditPermissionsV1'][0])
    {
        $request = $this->usergroupEditPermissionsV1Request($pkiUsergroupID, $usergroupEditPermissionsV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\UsergroupEditPermissionsV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\UsergroupEditPermissionsV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\UsergroupEditPermissionsV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\UsergroupEditPermissionsV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\UsergroupEditPermissionsV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupEditPermissionsV1Async
     *
     * Edit multiple Permissions
     *
     * @param  int $pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditPermissionsV1Request $usergroupEditPermissionsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditPermissionsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupEditPermissionsV1Async($pkiUsergroupID, $usergroupEditPermissionsV1Request, string $contentType = self::contentTypes['usergroupEditPermissionsV1'][0])
    {
        return $this->usergroupEditPermissionsV1AsyncWithHttpInfo($pkiUsergroupID, $usergroupEditPermissionsV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupEditPermissionsV1AsyncWithHttpInfo
     *
     * Edit multiple Permissions
     *
     * @param  int $pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditPermissionsV1Request $usergroupEditPermissionsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditPermissionsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupEditPermissionsV1AsyncWithHttpInfo($pkiUsergroupID, $usergroupEditPermissionsV1Request, string $contentType = self::contentTypes['usergroupEditPermissionsV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\UsergroupEditPermissionsV1Response';
        $request = $this->usergroupEditPermissionsV1Request($pkiUsergroupID, $usergroupEditPermissionsV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupEditPermissionsV1'
     *
     * @param  int $pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditPermissionsV1Request $usergroupEditPermissionsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditPermissionsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupEditPermissionsV1Request($pkiUsergroupID, $usergroupEditPermissionsV1Request, string $contentType = self::contentTypes['usergroupEditPermissionsV1'][0])
    {

        // verify the required parameter 'pkiUsergroupID' is set
        if ($pkiUsergroupID === null || (is_array($pkiUsergroupID) && count($pkiUsergroupID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiUsergroupID when calling usergroupEditPermissionsV1'
            );
        }
        if ($pkiUsergroupID > 255) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiUsergroupID" when calling ObjectUsergroupApi.usergroupEditPermissionsV1, must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiUsergroupID)?'null':'"'.$pkiUsergroupID.'"').' for "pkiUsergroupID" when calling ObjectUsergroupApi.usergroupEditPermissionsV1, must be smaller than or equal to 255.');
        }
        if ($pkiUsergroupID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiUsergroupID" when calling ObjectUsergroupApi.usergroupEditPermissionsV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiUsergroupID)?'null':'"'.$pkiUsergroupID.'"').' for "pkiUsergroupID" when calling ObjectUsergroupApi.usergroupEditPermissionsV1, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'usergroupEditPermissionsV1Request' is set
        if ($usergroupEditPermissionsV1Request === null || (is_array($usergroupEditPermissionsV1Request) && count($usergroupEditPermissionsV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroupEditPermissionsV1Request when calling usergroupEditPermissionsV1'
            );
        }


        $resourcePath = '/1/object/usergroup/{pkiUsergroupID}/editPermissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiUsergroupID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiUsergroupID' . '}',
                ObjectSerializer::toPathValue($pkiUsergroupID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($usergroupEditPermissionsV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($usergroupEditPermissionsV1Request));
            } else {
                $httpBody = $usergroupEditPermissionsV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'PUT', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usergroupEditUsergroupdelegationsV1
     *
     * Edit multiple Usergroupdelegations
     *
     * @param  int $pkiUsergroupID pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditUsergroupdelegationsV1Request $usergroupEditUsergroupdelegationsV1Request usergroupEditUsergroupdelegationsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditUsergroupdelegationsV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\UsergroupEditUsergroupdelegationsV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function usergroupEditUsergroupdelegationsV1($pkiUsergroupID, $usergroupEditUsergroupdelegationsV1Request, string $contentType = self::contentTypes['usergroupEditUsergroupdelegationsV1'][0])
    {
        list($response) = $this->usergroupEditUsergroupdelegationsV1WithHttpInfo($pkiUsergroupID, $usergroupEditUsergroupdelegationsV1Request, $contentType);
        return $response;
    }

    /**
     * Operation usergroupEditUsergroupdelegationsV1WithHttpInfo
     *
     * Edit multiple Usergroupdelegations
     *
     * @param  int $pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditUsergroupdelegationsV1Request $usergroupEditUsergroupdelegationsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditUsergroupdelegationsV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\UsergroupEditUsergroupdelegationsV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupEditUsergroupdelegationsV1WithHttpInfo($pkiUsergroupID, $usergroupEditUsergroupdelegationsV1Request, string $contentType = self::contentTypes['usergroupEditUsergroupdelegationsV1'][0])
    {
        $request = $this->usergroupEditUsergroupdelegationsV1Request($pkiUsergroupID, $usergroupEditUsergroupdelegationsV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\UsergroupEditUsergroupdelegationsV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\UsergroupEditUsergroupdelegationsV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\UsergroupEditUsergroupdelegationsV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\UsergroupEditUsergroupdelegationsV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\UsergroupEditUsergroupdelegationsV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupEditUsergroupdelegationsV1Async
     *
     * Edit multiple Usergroupdelegations
     *
     * @param  int $pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditUsergroupdelegationsV1Request $usergroupEditUsergroupdelegationsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditUsergroupdelegationsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupEditUsergroupdelegationsV1Async($pkiUsergroupID, $usergroupEditUsergroupdelegationsV1Request, string $contentType = self::contentTypes['usergroupEditUsergroupdelegationsV1'][0])
    {
        return $this->usergroupEditUsergroupdelegationsV1AsyncWithHttpInfo($pkiUsergroupID, $usergroupEditUsergroupdelegationsV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupEditUsergroupdelegationsV1AsyncWithHttpInfo
     *
     * Edit multiple Usergroupdelegations
     *
     * @param  int $pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditUsergroupdelegationsV1Request $usergroupEditUsergroupdelegationsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditUsergroupdelegationsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupEditUsergroupdelegationsV1AsyncWithHttpInfo($pkiUsergroupID, $usergroupEditUsergroupdelegationsV1Request, string $contentType = self::contentTypes['usergroupEditUsergroupdelegationsV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\UsergroupEditUsergroupdelegationsV1Response';
        $request = $this->usergroupEditUsergroupdelegationsV1Request($pkiUsergroupID, $usergroupEditUsergroupdelegationsV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupEditUsergroupdelegationsV1'
     *
     * @param  int $pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditUsergroupdelegationsV1Request $usergroupEditUsergroupdelegationsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditUsergroupdelegationsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupEditUsergroupdelegationsV1Request($pkiUsergroupID, $usergroupEditUsergroupdelegationsV1Request, string $contentType = self::contentTypes['usergroupEditUsergroupdelegationsV1'][0])
    {

        // verify the required parameter 'pkiUsergroupID' is set
        if ($pkiUsergroupID === null || (is_array($pkiUsergroupID) && count($pkiUsergroupID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiUsergroupID when calling usergroupEditUsergroupdelegationsV1'
            );
        }
        if ($pkiUsergroupID > 255) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiUsergroupID" when calling ObjectUsergroupApi.usergroupEditUsergroupdelegationsV1, must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiUsergroupID)?'null':'"'.$pkiUsergroupID.'"').' for "pkiUsergroupID" when calling ObjectUsergroupApi.usergroupEditUsergroupdelegationsV1, must be smaller than or equal to 255.');
        }
        if ($pkiUsergroupID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiUsergroupID" when calling ObjectUsergroupApi.usergroupEditUsergroupdelegationsV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiUsergroupID)?'null':'"'.$pkiUsergroupID.'"').' for "pkiUsergroupID" when calling ObjectUsergroupApi.usergroupEditUsergroupdelegationsV1, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'usergroupEditUsergroupdelegationsV1Request' is set
        if ($usergroupEditUsergroupdelegationsV1Request === null || (is_array($usergroupEditUsergroupdelegationsV1Request) && count($usergroupEditUsergroupdelegationsV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroupEditUsergroupdelegationsV1Request when calling usergroupEditUsergroupdelegationsV1'
            );
        }


        $resourcePath = '/1/object/usergroup/{pkiUsergroupID}/editUsergroupdelegations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiUsergroupID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiUsergroupID' . '}',
                ObjectSerializer::toPathValue($pkiUsergroupID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($usergroupEditUsergroupdelegationsV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($usergroupEditUsergroupdelegationsV1Request));
            } else {
                $httpBody = $usergroupEditUsergroupdelegationsV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'PUT', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usergroupEditUsergroupmembershipsV1
     *
     * Edit multiple Usergroupmemberships
     *
     * @param  int $pkiUsergroupID pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditUsergroupmembershipsV1Request $usergroupEditUsergroupmembershipsV1Request usergroupEditUsergroupmembershipsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditUsergroupmembershipsV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\UsergroupEditUsergroupmembershipsV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError
     */
    public function usergroupEditUsergroupmembershipsV1($pkiUsergroupID, $usergroupEditUsergroupmembershipsV1Request, string $contentType = self::contentTypes['usergroupEditUsergroupmembershipsV1'][0])
    {
        list($response) = $this->usergroupEditUsergroupmembershipsV1WithHttpInfo($pkiUsergroupID, $usergroupEditUsergroupmembershipsV1Request, $contentType);
        return $response;
    }

    /**
     * Operation usergroupEditUsergroupmembershipsV1WithHttpInfo
     *
     * Edit multiple Usergroupmemberships
     *
     * @param  int $pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditUsergroupmembershipsV1Request $usergroupEditUsergroupmembershipsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditUsergroupmembershipsV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\UsergroupEditUsergroupmembershipsV1Response|\eZmaxAPI\Model\CommonResponseError|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupEditUsergroupmembershipsV1WithHttpInfo($pkiUsergroupID, $usergroupEditUsergroupmembershipsV1Request, string $contentType = self::contentTypes['usergroupEditUsergroupmembershipsV1'][0])
    {
        $request = $this->usergroupEditUsergroupmembershipsV1Request($pkiUsergroupID, $usergroupEditUsergroupmembershipsV1Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\UsergroupEditUsergroupmembershipsV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\UsergroupEditUsergroupmembershipsV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\UsergroupEditUsergroupmembershipsV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\UsergroupEditUsergroupmembershipsV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\UsergroupEditUsergroupmembershipsV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupEditUsergroupmembershipsV1Async
     *
     * Edit multiple Usergroupmemberships
     *
     * @param  int $pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditUsergroupmembershipsV1Request $usergroupEditUsergroupmembershipsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditUsergroupmembershipsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupEditUsergroupmembershipsV1Async($pkiUsergroupID, $usergroupEditUsergroupmembershipsV1Request, string $contentType = self::contentTypes['usergroupEditUsergroupmembershipsV1'][0])
    {
        return $this->usergroupEditUsergroupmembershipsV1AsyncWithHttpInfo($pkiUsergroupID, $usergroupEditUsergroupmembershipsV1Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupEditUsergroupmembershipsV1AsyncWithHttpInfo
     *
     * Edit multiple Usergroupmemberships
     *
     * @param  int $pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditUsergroupmembershipsV1Request $usergroupEditUsergroupmembershipsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditUsergroupmembershipsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupEditUsergroupmembershipsV1AsyncWithHttpInfo($pkiUsergroupID, $usergroupEditUsergroupmembershipsV1Request, string $contentType = self::contentTypes['usergroupEditUsergroupmembershipsV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\UsergroupEditUsergroupmembershipsV1Response';
        $request = $this->usergroupEditUsergroupmembershipsV1Request($pkiUsergroupID, $usergroupEditUsergroupmembershipsV1Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupEditUsergroupmembershipsV1'
     *
     * @param  int $pkiUsergroupID (required)
     * @param  \eZmaxAPI\Model\UsergroupEditUsergroupmembershipsV1Request $usergroupEditUsergroupmembershipsV1Request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupEditUsergroupmembershipsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupEditUsergroupmembershipsV1Request($pkiUsergroupID, $usergroupEditUsergroupmembershipsV1Request, string $contentType = self::contentTypes['usergroupEditUsergroupmembershipsV1'][0])
    {

        // verify the required parameter 'pkiUsergroupID' is set
        if ($pkiUsergroupID === null || (is_array($pkiUsergroupID) && count($pkiUsergroupID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiUsergroupID when calling usergroupEditUsergroupmembershipsV1'
            );
        }
        if ($pkiUsergroupID > 255) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiUsergroupID" when calling ObjectUsergroupApi.usergroupEditUsergroupmembershipsV1, must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiUsergroupID)?'null':'"'.$pkiUsergroupID.'"').' for "pkiUsergroupID" when calling ObjectUsergroupApi.usergroupEditUsergroupmembershipsV1, must be smaller than or equal to 255.');
        }
        if ($pkiUsergroupID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiUsergroupID" when calling ObjectUsergroupApi.usergroupEditUsergroupmembershipsV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiUsergroupID)?'null':'"'.$pkiUsergroupID.'"').' for "pkiUsergroupID" when calling ObjectUsergroupApi.usergroupEditUsergroupmembershipsV1, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'usergroupEditUsergroupmembershipsV1Request' is set
        if ($usergroupEditUsergroupmembershipsV1Request === null || (is_array($usergroupEditUsergroupmembershipsV1Request) && count($usergroupEditUsergroupmembershipsV1Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroupEditUsergroupmembershipsV1Request when calling usergroupEditUsergroupmembershipsV1'
            );
        }


        $resourcePath = '/1/object/usergroup/{pkiUsergroupID}/editUsergroupmemberships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiUsergroupID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiUsergroupID' . '}',
                ObjectSerializer::toPathValue($pkiUsergroupID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($usergroupEditUsergroupmembershipsV1Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($usergroupEditUsergroupmembershipsV1Request));
            } else {
                $httpBody = $usergroupEditUsergroupmembershipsV1Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'PUT', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usergroupGetAutocompleteV2
     *
     * Retrieve Usergroups and IDs
     *
     * @param  string $sSelector The type of Usergroups to return (required)
     * @param  string|null $eFilterActive Specify which results we want to display. (optional, default to 'Active')
     * @param  string|null $sQuery Allow to filter the returned results (optional)
     * @param  \eZmaxAPI\Model\HeaderAcceptLanguage|null $acceptLanguage acceptLanguage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetAutocompleteV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\UsergroupGetAutocompleteV2Response
     */
    public function usergroupGetAutocompleteV2($sSelector, $eFilterActive = 'Active', $sQuery = null, $acceptLanguage = null, string $contentType = self::contentTypes['usergroupGetAutocompleteV2'][0])
    {
        list($response) = $this->usergroupGetAutocompleteV2WithHttpInfo($sSelector, $eFilterActive, $sQuery, $acceptLanguage, $contentType);
        return $response;
    }

    /**
     * Operation usergroupGetAutocompleteV2WithHttpInfo
     *
     * Retrieve Usergroups and IDs
     *
     * @param  string $sSelector The type of Usergroups to return (required)
     * @param  string|null $eFilterActive Specify which results we want to display. (optional, default to 'Active')
     * @param  string|null $sQuery Allow to filter the returned results (optional)
     * @param  \eZmaxAPI\Model\HeaderAcceptLanguage|null $acceptLanguage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetAutocompleteV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\UsergroupGetAutocompleteV2Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupGetAutocompleteV2WithHttpInfo($sSelector, $eFilterActive = 'Active', $sQuery = null, $acceptLanguage = null, string $contentType = self::contentTypes['usergroupGetAutocompleteV2'][0])
    {
        $request = $this->usergroupGetAutocompleteV2Request($sSelector, $eFilterActive, $sQuery, $acceptLanguage, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\UsergroupGetAutocompleteV2Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\UsergroupGetAutocompleteV2Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\UsergroupGetAutocompleteV2Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\UsergroupGetAutocompleteV2Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\UsergroupGetAutocompleteV2Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupGetAutocompleteV2Async
     *
     * Retrieve Usergroups and IDs
     *
     * @param  string $sSelector The type of Usergroups to return (required)
     * @param  string|null $eFilterActive Specify which results we want to display. (optional, default to 'Active')
     * @param  string|null $sQuery Allow to filter the returned results (optional)
     * @param  \eZmaxAPI\Model\HeaderAcceptLanguage|null $acceptLanguage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetAutocompleteV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupGetAutocompleteV2Async($sSelector, $eFilterActive = 'Active', $sQuery = null, $acceptLanguage = null, string $contentType = self::contentTypes['usergroupGetAutocompleteV2'][0])
    {
        return $this->usergroupGetAutocompleteV2AsyncWithHttpInfo($sSelector, $eFilterActive, $sQuery, $acceptLanguage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupGetAutocompleteV2AsyncWithHttpInfo
     *
     * Retrieve Usergroups and IDs
     *
     * @param  string $sSelector The type of Usergroups to return (required)
     * @param  string|null $eFilterActive Specify which results we want to display. (optional, default to 'Active')
     * @param  string|null $sQuery Allow to filter the returned results (optional)
     * @param  \eZmaxAPI\Model\HeaderAcceptLanguage|null $acceptLanguage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetAutocompleteV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupGetAutocompleteV2AsyncWithHttpInfo($sSelector, $eFilterActive = 'Active', $sQuery = null, $acceptLanguage = null, string $contentType = self::contentTypes['usergroupGetAutocompleteV2'][0])
    {
        $returnType = '\eZmaxAPI\Model\UsergroupGetAutocompleteV2Response';
        $request = $this->usergroupGetAutocompleteV2Request($sSelector, $eFilterActive, $sQuery, $acceptLanguage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupGetAutocompleteV2'
     *
     * @param  string $sSelector The type of Usergroups to return (required)
     * @param  string|null $eFilterActive Specify which results we want to display. (optional, default to 'Active')
     * @param  string|null $sQuery Allow to filter the returned results (optional)
     * @param  \eZmaxAPI\Model\HeaderAcceptLanguage|null $acceptLanguage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetAutocompleteV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupGetAutocompleteV2Request($sSelector, $eFilterActive = 'Active', $sQuery = null, $acceptLanguage = null, string $contentType = self::contentTypes['usergroupGetAutocompleteV2'][0])
    {

        // verify the required parameter 'sSelector' is set
        if ($sSelector === null || (is_array($sSelector) && count($sSelector) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sSelector when calling usergroupGetAutocompleteV2'
            );
        }





        $resourcePath = '/2/object/usergroup/getAutocomplete/{sSelector}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $eFilterActive,
            'eFilterActive', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sQuery,
            'sQuery', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($acceptLanguage !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($acceptLanguage);
        }

        // path params
        if ($sSelector !== null) {
            $resourcePath = str_replace(
                '{' . 'sSelector' . '}',
                ObjectSerializer::toPathValue($sSelector),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usergroupGetListV1
     *
     * Retrieve Usergroup list
     *
     * @param  string|null $eOrderBy Specify how you want the results to be sorted (optional)
     * @param  int|null $iRowMax iRowMax (optional)
     * @param  int|null $iRowOffset iRowOffset (optional, default to 0)
     * @param  \eZmaxAPI\Model\HeaderAcceptLanguage|null $acceptLanguage acceptLanguage (optional)
     * @param  string|null $sFilter sFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetListV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\UsergroupGetListV1Response|\eZmaxAPI\Model\CommonResponseError
     */
    public function usergroupGetListV1($eOrderBy = null, $iRowMax = null, $iRowOffset = 0, $acceptLanguage = null, $sFilter = null, string $contentType = self::contentTypes['usergroupGetListV1'][0])
    {
        list($response) = $this->usergroupGetListV1WithHttpInfo($eOrderBy, $iRowMax, $iRowOffset, $acceptLanguage, $sFilter, $contentType);
        return $response;
    }

    /**
     * Operation usergroupGetListV1WithHttpInfo
     *
     * Retrieve Usergroup list
     *
     * @param  string|null $eOrderBy Specify how you want the results to be sorted (optional)
     * @param  int|null $iRowMax (optional)
     * @param  int|null $iRowOffset (optional, default to 0)
     * @param  \eZmaxAPI\Model\HeaderAcceptLanguage|null $acceptLanguage (optional)
     * @param  string|null $sFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetListV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\UsergroupGetListV1Response|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupGetListV1WithHttpInfo($eOrderBy = null, $iRowMax = null, $iRowOffset = 0, $acceptLanguage = null, $sFilter = null, string $contentType = self::contentTypes['usergroupGetListV1'][0])
    {
        $request = $this->usergroupGetListV1Request($eOrderBy, $iRowMax, $iRowOffset, $acceptLanguage, $sFilter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\UsergroupGetListV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\UsergroupGetListV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\UsergroupGetListV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\UsergroupGetListV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\UsergroupGetListV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupGetListV1Async
     *
     * Retrieve Usergroup list
     *
     * @param  string|null $eOrderBy Specify how you want the results to be sorted (optional)
     * @param  int|null $iRowMax (optional)
     * @param  int|null $iRowOffset (optional, default to 0)
     * @param  \eZmaxAPI\Model\HeaderAcceptLanguage|null $acceptLanguage (optional)
     * @param  string|null $sFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetListV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupGetListV1Async($eOrderBy = null, $iRowMax = null, $iRowOffset = 0, $acceptLanguage = null, $sFilter = null, string $contentType = self::contentTypes['usergroupGetListV1'][0])
    {
        return $this->usergroupGetListV1AsyncWithHttpInfo($eOrderBy, $iRowMax, $iRowOffset, $acceptLanguage, $sFilter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupGetListV1AsyncWithHttpInfo
     *
     * Retrieve Usergroup list
     *
     * @param  string|null $eOrderBy Specify how you want the results to be sorted (optional)
     * @param  int|null $iRowMax (optional)
     * @param  int|null $iRowOffset (optional, default to 0)
     * @param  \eZmaxAPI\Model\HeaderAcceptLanguage|null $acceptLanguage (optional)
     * @param  string|null $sFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetListV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupGetListV1AsyncWithHttpInfo($eOrderBy = null, $iRowMax = null, $iRowOffset = 0, $acceptLanguage = null, $sFilter = null, string $contentType = self::contentTypes['usergroupGetListV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\UsergroupGetListV1Response';
        $request = $this->usergroupGetListV1Request($eOrderBy, $iRowMax, $iRowOffset, $acceptLanguage, $sFilter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupGetListV1'
     *
     * @param  string|null $eOrderBy Specify how you want the results to be sorted (optional)
     * @param  int|null $iRowMax (optional)
     * @param  int|null $iRowOffset (optional, default to 0)
     * @param  \eZmaxAPI\Model\HeaderAcceptLanguage|null $acceptLanguage (optional)
     * @param  string|null $sFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetListV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupGetListV1Request($eOrderBy = null, $iRowMax = null, $iRowOffset = 0, $acceptLanguage = null, $sFilter = null, string $contentType = self::contentTypes['usergroupGetListV1'][0])
    {


        if ($iRowMax !== null && $iRowMax > 10000) {
	    //throw new \InvalidArgumentException('invalid value for "$iRowMax" when calling ObjectUsergroupApi.usergroupGetListV1, must be smaller than or equal to 10000.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iRowMax)?'null':'"'.$iRowMax.'"').' for "iRowMax" when calling ObjectUsergroupApi.usergroupGetListV1, must be smaller than or equal to 10000.');
        }
        if ($iRowMax !== null && $iRowMax < 1) {
	    //throw new \InvalidArgumentException('invalid value for "$iRowMax" when calling ObjectUsergroupApi.usergroupGetListV1, must be bigger than or equal to 1.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iRowMax)?'null':'"'.$iRowMax.'"').' for "iRowMax" when calling ObjectUsergroupApi.usergroupGetListV1, must be bigger than or equal to 1.');
        }
        
        if ($iRowOffset !== null && $iRowOffset < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$iRowOffset" when calling ObjectUsergroupApi.usergroupGetListV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($iRowOffset)?'null':'"'.$iRowOffset.'"').' for "iRowOffset" when calling ObjectUsergroupApi.usergroupGetListV1, must be bigger than or equal to 0.');
        }
        



        $resourcePath = '/1/object/usergroup/getList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $eOrderBy,
            'eOrderBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iRowMax,
            'iRowMax', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iRowOffset,
            'iRowOffset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sFilter,
            'sFilter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($acceptLanguage !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($acceptLanguage);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usergroupGetObjectV2
     *
     * Retrieve an existing Usergroup
     *
     * @param  int $pkiUsergroupID pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetObjectV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\UsergroupGetObjectV2Response|\eZmaxAPI\Model\CommonResponseError
     */
    public function usergroupGetObjectV2($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetObjectV2'][0])
    {
        list($response) = $this->usergroupGetObjectV2WithHttpInfo($pkiUsergroupID, $contentType);
        return $response;
    }

    /**
     * Operation usergroupGetObjectV2WithHttpInfo
     *
     * Retrieve an existing Usergroup
     *
     * @param  int $pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetObjectV2'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\UsergroupGetObjectV2Response|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupGetObjectV2WithHttpInfo($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetObjectV2'][0])
    {
        $request = $this->usergroupGetObjectV2Request($pkiUsergroupID, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\UsergroupGetObjectV2Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\UsergroupGetObjectV2Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\UsergroupGetObjectV2Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\UsergroupGetObjectV2Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\UsergroupGetObjectV2Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupGetObjectV2Async
     *
     * Retrieve an existing Usergroup
     *
     * @param  int $pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupGetObjectV2Async($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetObjectV2'][0])
    {
        return $this->usergroupGetObjectV2AsyncWithHttpInfo($pkiUsergroupID, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupGetObjectV2AsyncWithHttpInfo
     *
     * Retrieve an existing Usergroup
     *
     * @param  int $pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupGetObjectV2AsyncWithHttpInfo($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetObjectV2'][0])
    {
        $returnType = '\eZmaxAPI\Model\UsergroupGetObjectV2Response';
        $request = $this->usergroupGetObjectV2Request($pkiUsergroupID, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupGetObjectV2'
     *
     * @param  int $pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetObjectV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupGetObjectV2Request($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetObjectV2'][0])
    {

        // verify the required parameter 'pkiUsergroupID' is set
        if ($pkiUsergroupID === null || (is_array($pkiUsergroupID) && count($pkiUsergroupID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiUsergroupID when calling usergroupGetObjectV2'
            );
        }
        if ($pkiUsergroupID > 255) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiUsergroupID" when calling ObjectUsergroupApi.usergroupGetObjectV2, must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiUsergroupID)?'null':'"'.$pkiUsergroupID.'"').' for "pkiUsergroupID" when calling ObjectUsergroupApi.usergroupGetObjectV2, must be smaller than or equal to 255.');
        }
        if ($pkiUsergroupID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiUsergroupID" when calling ObjectUsergroupApi.usergroupGetObjectV2, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiUsergroupID)?'null':'"'.$pkiUsergroupID.'"').' for "pkiUsergroupID" when calling ObjectUsergroupApi.usergroupGetObjectV2, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/2/object/usergroup/{pkiUsergroupID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiUsergroupID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiUsergroupID' . '}',
                ObjectSerializer::toPathValue($pkiUsergroupID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usergroupGetPermissionsV1
     *
     * Retrieve an existing Usergroup&#39;s Permissions
     *
     * @param  int $pkiUsergroupID pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetPermissionsV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\UsergroupGetPermissionsV1Response|\eZmaxAPI\Model\CommonResponseError
     */
    public function usergroupGetPermissionsV1($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetPermissionsV1'][0])
    {
        list($response) = $this->usergroupGetPermissionsV1WithHttpInfo($pkiUsergroupID, $contentType);
        return $response;
    }

    /**
     * Operation usergroupGetPermissionsV1WithHttpInfo
     *
     * Retrieve an existing Usergroup&#39;s Permissions
     *
     * @param  int $pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetPermissionsV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\UsergroupGetPermissionsV1Response|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupGetPermissionsV1WithHttpInfo($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetPermissionsV1'][0])
    {
        $request = $this->usergroupGetPermissionsV1Request($pkiUsergroupID, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\UsergroupGetPermissionsV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\UsergroupGetPermissionsV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\UsergroupGetPermissionsV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\UsergroupGetPermissionsV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\UsergroupGetPermissionsV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupGetPermissionsV1Async
     *
     * Retrieve an existing Usergroup&#39;s Permissions
     *
     * @param  int $pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetPermissionsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupGetPermissionsV1Async($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetPermissionsV1'][0])
    {
        return $this->usergroupGetPermissionsV1AsyncWithHttpInfo($pkiUsergroupID, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupGetPermissionsV1AsyncWithHttpInfo
     *
     * Retrieve an existing Usergroup&#39;s Permissions
     *
     * @param  int $pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetPermissionsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupGetPermissionsV1AsyncWithHttpInfo($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetPermissionsV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\UsergroupGetPermissionsV1Response';
        $request = $this->usergroupGetPermissionsV1Request($pkiUsergroupID, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupGetPermissionsV1'
     *
     * @param  int $pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetPermissionsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupGetPermissionsV1Request($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetPermissionsV1'][0])
    {

        // verify the required parameter 'pkiUsergroupID' is set
        if ($pkiUsergroupID === null || (is_array($pkiUsergroupID) && count($pkiUsergroupID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiUsergroupID when calling usergroupGetPermissionsV1'
            );
        }
        if ($pkiUsergroupID > 255) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiUsergroupID" when calling ObjectUsergroupApi.usergroupGetPermissionsV1, must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiUsergroupID)?'null':'"'.$pkiUsergroupID.'"').' for "pkiUsergroupID" when calling ObjectUsergroupApi.usergroupGetPermissionsV1, must be smaller than or equal to 255.');
        }
        if ($pkiUsergroupID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiUsergroupID" when calling ObjectUsergroupApi.usergroupGetPermissionsV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiUsergroupID)?'null':'"'.$pkiUsergroupID.'"').' for "pkiUsergroupID" when calling ObjectUsergroupApi.usergroupGetPermissionsV1, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/1/object/usergroup/{pkiUsergroupID}/getPermissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiUsergroupID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiUsergroupID' . '}',
                ObjectSerializer::toPathValue($pkiUsergroupID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usergroupGetUsergroupdelegationsV1
     *
     * Retrieve an existing Usergroup&#39;s Usergroupdelegations
     *
     * @param  int $pkiUsergroupID pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetUsergroupdelegationsV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\UsergroupGetUsergroupdelegationsV1Response|\eZmaxAPI\Model\CommonResponseError
     */
    public function usergroupGetUsergroupdelegationsV1($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetUsergroupdelegationsV1'][0])
    {
        list($response) = $this->usergroupGetUsergroupdelegationsV1WithHttpInfo($pkiUsergroupID, $contentType);
        return $response;
    }

    /**
     * Operation usergroupGetUsergroupdelegationsV1WithHttpInfo
     *
     * Retrieve an existing Usergroup&#39;s Usergroupdelegations
     *
     * @param  int $pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetUsergroupdelegationsV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\UsergroupGetUsergroupdelegationsV1Response|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupGetUsergroupdelegationsV1WithHttpInfo($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetUsergroupdelegationsV1'][0])
    {
        $request = $this->usergroupGetUsergroupdelegationsV1Request($pkiUsergroupID, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\UsergroupGetUsergroupdelegationsV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\UsergroupGetUsergroupdelegationsV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\UsergroupGetUsergroupdelegationsV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\UsergroupGetUsergroupdelegationsV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\UsergroupGetUsergroupdelegationsV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupGetUsergroupdelegationsV1Async
     *
     * Retrieve an existing Usergroup&#39;s Usergroupdelegations
     *
     * @param  int $pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetUsergroupdelegationsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupGetUsergroupdelegationsV1Async($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetUsergroupdelegationsV1'][0])
    {
        return $this->usergroupGetUsergroupdelegationsV1AsyncWithHttpInfo($pkiUsergroupID, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupGetUsergroupdelegationsV1AsyncWithHttpInfo
     *
     * Retrieve an existing Usergroup&#39;s Usergroupdelegations
     *
     * @param  int $pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetUsergroupdelegationsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupGetUsergroupdelegationsV1AsyncWithHttpInfo($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetUsergroupdelegationsV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\UsergroupGetUsergroupdelegationsV1Response';
        $request = $this->usergroupGetUsergroupdelegationsV1Request($pkiUsergroupID, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupGetUsergroupdelegationsV1'
     *
     * @param  int $pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetUsergroupdelegationsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupGetUsergroupdelegationsV1Request($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetUsergroupdelegationsV1'][0])
    {

        // verify the required parameter 'pkiUsergroupID' is set
        if ($pkiUsergroupID === null || (is_array($pkiUsergroupID) && count($pkiUsergroupID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiUsergroupID when calling usergroupGetUsergroupdelegationsV1'
            );
        }
        if ($pkiUsergroupID > 255) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiUsergroupID" when calling ObjectUsergroupApi.usergroupGetUsergroupdelegationsV1, must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiUsergroupID)?'null':'"'.$pkiUsergroupID.'"').' for "pkiUsergroupID" when calling ObjectUsergroupApi.usergroupGetUsergroupdelegationsV1, must be smaller than or equal to 255.');
        }
        if ($pkiUsergroupID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiUsergroupID" when calling ObjectUsergroupApi.usergroupGetUsergroupdelegationsV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiUsergroupID)?'null':'"'.$pkiUsergroupID.'"').' for "pkiUsergroupID" when calling ObjectUsergroupApi.usergroupGetUsergroupdelegationsV1, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/1/object/usergroup/{pkiUsergroupID}/getUsergroupdelegations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiUsergroupID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiUsergroupID' . '}',
                ObjectSerializer::toPathValue($pkiUsergroupID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usergroupGetUsergroupmembershipsV1
     *
     * Retrieve an existing Usergroup&#39;s Usergroupmemberships
     *
     * @param  int $pkiUsergroupID pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetUsergroupmembershipsV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \eZmaxAPI\Model\UsergroupGetUsergroupmembershipsV1Response|\eZmaxAPI\Model\CommonResponseError
     */
    public function usergroupGetUsergroupmembershipsV1($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetUsergroupmembershipsV1'][0])
    {
        list($response) = $this->usergroupGetUsergroupmembershipsV1WithHttpInfo($pkiUsergroupID, $contentType);
        return $response;
    }

    /**
     * Operation usergroupGetUsergroupmembershipsV1WithHttpInfo
     *
     * Retrieve an existing Usergroup&#39;s Usergroupmemberships
     *
     * @param  int $pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetUsergroupmembershipsV1'] to see the possible values for this operation
     *
     * @throws \eZmaxAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \eZmaxAPI\Model\UsergroupGetUsergroupmembershipsV1Response|\eZmaxAPI\Model\CommonResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupGetUsergroupmembershipsV1WithHttpInfo($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetUsergroupmembershipsV1'][0])
    {
        $request = $this->usergroupGetUsergroupmembershipsV1Request($pkiUsergroupID, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\eZmaxAPI\Model\UsergroupGetUsergroupmembershipsV1Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\UsergroupGetUsergroupmembershipsV1Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\UsergroupGetUsergroupmembershipsV1Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\eZmaxAPI\Model\CommonResponseError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\eZmaxAPI\Model\CommonResponseError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\eZmaxAPI\Model\CommonResponseError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\eZmaxAPI\Model\UsergroupGetUsergroupmembershipsV1Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\UsergroupGetUsergroupmembershipsV1Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eZmaxAPI\Model\CommonResponseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupGetUsergroupmembershipsV1Async
     *
     * Retrieve an existing Usergroup&#39;s Usergroupmemberships
     *
     * @param  int $pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetUsergroupmembershipsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupGetUsergroupmembershipsV1Async($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetUsergroupmembershipsV1'][0])
    {
        return $this->usergroupGetUsergroupmembershipsV1AsyncWithHttpInfo($pkiUsergroupID, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupGetUsergroupmembershipsV1AsyncWithHttpInfo
     *
     * Retrieve an existing Usergroup&#39;s Usergroupmemberships
     *
     * @param  int $pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetUsergroupmembershipsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupGetUsergroupmembershipsV1AsyncWithHttpInfo($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetUsergroupmembershipsV1'][0])
    {
        $returnType = '\eZmaxAPI\Model\UsergroupGetUsergroupmembershipsV1Response';
        $request = $this->usergroupGetUsergroupmembershipsV1Request($pkiUsergroupID, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupGetUsergroupmembershipsV1'
     *
     * @param  int $pkiUsergroupID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupGetUsergroupmembershipsV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupGetUsergroupmembershipsV1Request($pkiUsergroupID, string $contentType = self::contentTypes['usergroupGetUsergroupmembershipsV1'][0])
    {

        // verify the required parameter 'pkiUsergroupID' is set
        if ($pkiUsergroupID === null || (is_array($pkiUsergroupID) && count($pkiUsergroupID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pkiUsergroupID when calling usergroupGetUsergroupmembershipsV1'
            );
        }
        if ($pkiUsergroupID > 255) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiUsergroupID" when calling ObjectUsergroupApi.usergroupGetUsergroupmembershipsV1, must be smaller than or equal to 255.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiUsergroupID)?'null':'"'.$pkiUsergroupID.'"').' for "pkiUsergroupID" when calling ObjectUsergroupApi.usergroupGetUsergroupmembershipsV1, must be smaller than or equal to 255.');
        }
        if ($pkiUsergroupID < 0) {
	    //throw new \InvalidArgumentException('invalid value for "$pkiUsergroupID" when calling ObjectUsergroupApi.usergroupGetUsergroupmembershipsV1, must be bigger than or equal to 0.');
            throw new \InvalidArgumentException('invalid value '.(is_null($pkiUsergroupID)?'null':'"'.$pkiUsergroupID.'"').' for "pkiUsergroupID" when calling ObjectUsergroupApi.usergroupGetUsergroupmembershipsV1, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/1/object/usergroup/{pkiUsergroupID}/getUsergroupmemberships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pkiUsergroupID !== null) {
            $resourcePath = str_replace(
                '{' . 'pkiUsergroupID' . '}',
                ObjectSerializer::toPathValue($pkiUsergroupID),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        if ($apiKey !== null) {
            $secret = $this->config->getSecret();
            if ($secret !== '') {
                //Let's sign the request
                $headers = array_merge($headers, RequestSignature::getHeadersV1($apiKey, $secret, 'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $httpBody));
            }		
        }

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
